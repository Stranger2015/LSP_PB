// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/protocol.proto

package protocol;

/**
 * <pre>
 * TraceValue represents the level of verbosity with which the server systematically reports its
 * execution trace using $/logTrace notifications. The initial trace value is set by the client at
 * initialization and can be modified later using the $/setTrace notification.
 * </pre>
 *
 * Protobuf enum {@code protocol.TraceValue}
 */
public enum TraceValue
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Conventional default for enums. Do not use this.
   * </pre>
   *
   * <code>TRACE_VALUE_UNSPECIFIED = 0;</code>
   */
  TRACE_VALUE_UNSPECIFIED(0),
  /**
   * <pre>
   * trace is off.
   * </pre>
   *
   * <code>OFF = 1;</code>
   */
  OFF(1),
  /**
   * <pre>
   * message trace level.
   * </pre>
   *
   * <code>MESSAGE = 2;</code>
   */
  MESSAGE(2),
  /**
   * <pre>
   * verbose trace level.
   * </pre>
   *
   * <code>VERBOSE = 3;</code>
   */
  VERBOSE(3),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Conventional default for enums. Do not use this.
   * </pre>
   *
   * <code>TRACE_VALUE_UNSPECIFIED = 0;</code>
   */
  public static final int TRACE_VALUE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * trace is off.
   * </pre>
   *
   * <code>OFF = 1;</code>
   */
  public static final int OFF_VALUE = 1;
  /**
   * <pre>
   * message trace level.
   * </pre>
   *
   * <code>MESSAGE = 2;</code>
   */
  public static final int MESSAGE_VALUE = 2;
  /**
   * <pre>
   * verbose trace level.
   * </pre>
   *
   * <code>VERBOSE = 3;</code>
   */
  public static final int VERBOSE_VALUE = 3;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TraceValue valueOf(int value) {
    return forNumber(value);
  }

  public static TraceValue forNumber(int value) {
    switch (value) {
      case 0: return TRACE_VALUE_UNSPECIFIED;
      case 1: return OFF;
      case 2: return MESSAGE;
      case 3: return VERBOSE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TraceValue>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TraceValue> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TraceValue>() {
          public TraceValue findValueByNumber(int number) {
            return TraceValue.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return protocol.ProtocolProto.getDescriptor().getEnumTypes().get(5);
  }

  private static final TraceValue[] VALUES = values();

  public static TraceValue valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TraceValue(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:protocol.TraceValue)
}

