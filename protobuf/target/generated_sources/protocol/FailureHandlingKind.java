// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/protocol.proto

package protocol;

/**
 * Protobuf enum {@code protocol.FailureHandlingKind}
 */
public enum FailureHandlingKind
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Conventional default for enums. Do not use this.
   * </pre>
   *
   * <code>FAILURE_HANDLING_KIND_UNSPECIFIED = 0;</code>
   */
  FAILURE_HANDLING_KIND_UNSPECIFIED(0),
  /**
   * <pre>
   * Applying the workspace change is simply aborted if one of the changes provided
   * fails. All operations executed before the failing operation stay executed.
   * </pre>
   *
   * <code>ABORT = 1;</code>
   */
  ABORT(1),
  /**
   * <pre>
   * All operations are executed transactional. That means they either all
   * succeed or no changes at all are applied to the workspace.
   * </pre>
   *
   * <code>TRANSACTIONAL = 2;</code>
   */
  TRANSACTIONAL(2),
  /**
   * <pre>
   * If the workspace edit contains only textual file changes they are executed transactional.
   * If resource changes (create, rename or delete file) are part of the change the failure
   * handling strategy is abort.
   * </pre>
   *
   * <code>TEXT_ONLY_TRANSACTIONAL = 3;</code>
   */
  TEXT_ONLY_TRANSACTIONAL(3),
  /**
   * <pre>
   * The client tries to undo the operations already executed. But there is no
   * guarantee that this is succeeding.
   * </pre>
   *
   * <code>UNDO = 4;</code>
   */
  UNDO(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Conventional default for enums. Do not use this.
   * </pre>
   *
   * <code>FAILURE_HANDLING_KIND_UNSPECIFIED = 0;</code>
   */
  public static final int FAILURE_HANDLING_KIND_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Applying the workspace change is simply aborted if one of the changes provided
   * fails. All operations executed before the failing operation stay executed.
   * </pre>
   *
   * <code>ABORT = 1;</code>
   */
  public static final int ABORT_VALUE = 1;
  /**
   * <pre>
   * All operations are executed transactional. That means they either all
   * succeed or no changes at all are applied to the workspace.
   * </pre>
   *
   * <code>TRANSACTIONAL = 2;</code>
   */
  public static final int TRANSACTIONAL_VALUE = 2;
  /**
   * <pre>
   * If the workspace edit contains only textual file changes they are executed transactional.
   * If resource changes (create, rename or delete file) are part of the change the failure
   * handling strategy is abort.
   * </pre>
   *
   * <code>TEXT_ONLY_TRANSACTIONAL = 3;</code>
   */
  public static final int TEXT_ONLY_TRANSACTIONAL_VALUE = 3;
  /**
   * <pre>
   * The client tries to undo the operations already executed. But there is no
   * guarantee that this is succeeding.
   * </pre>
   *
   * <code>UNDO = 4;</code>
   */
  public static final int UNDO_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static FailureHandlingKind valueOf(int value) {
    return forNumber(value);
  }

  public static FailureHandlingKind forNumber(int value) {
    switch (value) {
      case 0: return FAILURE_HANDLING_KIND_UNSPECIFIED;
      case 1: return ABORT;
      case 2: return TRANSACTIONAL;
      case 3: return TEXT_ONLY_TRANSACTIONAL;
      case 4: return UNDO;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<FailureHandlingKind>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      FailureHandlingKind> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<FailureHandlingKind>() {
          public FailureHandlingKind findValueByNumber(int number) {
            return FailureHandlingKind.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return protocol.ProtocolProto.getDescriptor().getEnumTypes().get(3);
  }

  private static final FailureHandlingKind[] VALUES = values();

  public static FailureHandlingKind valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private FailureHandlingKind(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:protocol.FailureHandlingKind)
}

