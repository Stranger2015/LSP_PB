// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/protocol.proto

package protocol;

public interface DiagnosticOrBuilder extends
    // @@protoc_insertion_point(interface_extends:protocol.Diagnostic)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The range at which the message applies.
   * </pre>
   *
   * <code>.protocol.Range range = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  boolean hasRange();
  /**
   * <pre>
   * The range at which the message applies.
   * </pre>
   *
   * <code>.protocol.Range range = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  protocol.Range getRange();
  /**
   * <pre>
   * The range at which the message applies.
   * </pre>
   *
   * <code>.protocol.Range range = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  protocol.RangeOrBuilder getRangeOrBuilder();

  /**
   * <pre>
   * Optional. The diagnostic's severity. Can be omitted. If omitted it is up to the
   * client to interpret diagnostics as error, warning, info or hint.
   * </pre>
   *
   * <code>.protocol.DiagnosticSeverity severity = 2;</code>
   */
  int getSeverityValue();
  /**
   * <pre>
   * Optional. The diagnostic's severity. Can be omitted. If omitted it is up to the
   * client to interpret diagnostics as error, warning, info or hint.
   * </pre>
   *
   * <code>.protocol.DiagnosticSeverity severity = 2;</code>
   */
  protocol.DiagnosticSeverity getSeverity();

  /**
   * <pre>
   * Optional. The diagnostic's code, which might appear in the user interface.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value code = 3;</code>
   */
  boolean hasCode();
  /**
   * <pre>
   * Optional. The diagnostic's code, which might appear in the user interface.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value code = 3;</code>
   */
  com.google.protobuf.Int32Value getCode();
  /**
   * <pre>
   * Optional. The diagnostic's code, which might appear in the user interface.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value code = 3;</code>
   */
  com.google.protobuf.Int32ValueOrBuilder getCodeOrBuilder();

  /**
   * <pre>
   * Optional. A human-readable string describing the source of this
   * diagnostic, e.g. 'typescript' or 'super lint'.
   * </pre>
   *
   * <code>.google.protobuf.StringValue source = 4;</code>
   */
  boolean hasSource();
  /**
   * <pre>
   * Optional. A human-readable string describing the source of this
   * diagnostic, e.g. 'typescript' or 'super lint'.
   * </pre>
   *
   * <code>.google.protobuf.StringValue source = 4;</code>
   */
  com.google.protobuf.StringValue getSource();
  /**
   * <pre>
   * Optional. A human-readable string describing the source of this
   * diagnostic, e.g. 'typescript' or 'super lint'.
   * </pre>
   *
   * <code>.google.protobuf.StringValue source = 4;</code>
   */
  com.google.protobuf.StringValueOrBuilder getSourceOrBuilder();

  /**
   * <pre>
   * The diagnostic's message.
   * </pre>
   *
   * <code>string message = 5 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  java.lang.String getMessage();
  /**
   * <pre>
   * The diagnostic's message.
   * </pre>
   *
   * <code>string message = 5 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  com.google.protobuf.ByteString
      getMessageBytes();

  /**
   * <pre>
   * Optional. Additional metadata about the diagnostic.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>repeated .protocol.DiagnosticTag tags = 6;</code>
   */
  java.util.List<protocol.DiagnosticTag> getTagsList();
  /**
   * <pre>
   * Optional. Additional metadata about the diagnostic.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>repeated .protocol.DiagnosticTag tags = 6;</code>
   */
  int getTagsCount();
  /**
   * <pre>
   * Optional. Additional metadata about the diagnostic.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>repeated .protocol.DiagnosticTag tags = 6;</code>
   */
  protocol.DiagnosticTag getTags(int index);
  /**
   * <pre>
   * Optional. Additional metadata about the diagnostic.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>repeated .protocol.DiagnosticTag tags = 6;</code>
   */
  java.util.List<java.lang.Integer>
  getTagsValueList();
  /**
   * <pre>
   * Optional. Additional metadata about the diagnostic.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>repeated .protocol.DiagnosticTag tags = 6;</code>
   */
  int getTagsValue(int index);

  /**
   * <pre>
   * Optional. An array of related diagnostic information, e.g. when symbol-names within
   * a scope collide all definitions can be marked via this property.
   * (-- api-linter: core::0140::abbreviations=disabled --)
   * </pre>
   *
   * <code>repeated .protocol.DiagnosticRelatedInformation related_information = 7;</code>
   */
  java.util.List<protocol.DiagnosticRelatedInformation> 
      getRelatedInformationList();
  /**
   * <pre>
   * Optional. An array of related diagnostic information, e.g. when symbol-names within
   * a scope collide all definitions can be marked via this property.
   * (-- api-linter: core::0140::abbreviations=disabled --)
   * </pre>
   *
   * <code>repeated .protocol.DiagnosticRelatedInformation related_information = 7;</code>
   */
  protocol.DiagnosticRelatedInformation getRelatedInformation(int index);
  /**
   * <pre>
   * Optional. An array of related diagnostic information, e.g. when symbol-names within
   * a scope collide all definitions can be marked via this property.
   * (-- api-linter: core::0140::abbreviations=disabled --)
   * </pre>
   *
   * <code>repeated .protocol.DiagnosticRelatedInformation related_information = 7;</code>
   */
  int getRelatedInformationCount();
  /**
   * <pre>
   * Optional. An array of related diagnostic information, e.g. when symbol-names within
   * a scope collide all definitions can be marked via this property.
   * (-- api-linter: core::0140::abbreviations=disabled --)
   * </pre>
   *
   * <code>repeated .protocol.DiagnosticRelatedInformation related_information = 7;</code>
   */
  java.util.List<? extends protocol.DiagnosticRelatedInformationOrBuilder> 
      getRelatedInformationOrBuilderList();
  /**
   * <pre>
   * Optional. An array of related diagnostic information, e.g. when symbol-names within
   * a scope collide all definitions can be marked via this property.
   * (-- api-linter: core::0140::abbreviations=disabled --)
   * </pre>
   *
   * <code>repeated .protocol.DiagnosticRelatedInformation related_information = 7;</code>
   */
  protocol.DiagnosticRelatedInformationOrBuilder getRelatedInformationOrBuilder(
      int index);
}
