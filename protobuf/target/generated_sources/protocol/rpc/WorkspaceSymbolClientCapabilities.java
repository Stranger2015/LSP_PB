// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

/**
 * <pre>
 * WorkspaceSymbolClientCapabilities represents a client capabilities of
 * `workspace/symbol` request.
 * </pre>
 *
 * Protobuf type {@code protocol.rpc.WorkspaceSymbolClientCapabilities}
 */
public  final class WorkspaceSymbolClientCapabilities extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:protocol.rpc.WorkspaceSymbolClientCapabilities)
    WorkspaceSymbolClientCapabilitiesOrBuilder {
  // Use WorkspaceSymbolClientCapabilities.newBuilder() to construct.
  private WorkspaceSymbolClientCapabilities(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private WorkspaceSymbolClientCapabilities() {
    dynamicRegistration_ = false;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private WorkspaceSymbolClientCapabilities(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 8: {

            dynamicRegistration_ = input.readBool();
            break;
          }
          case 18: {
            protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder subBuilder = null;
            if (symbolKind_ != null) {
              subBuilder = symbolKind_.toBuilder();
            }
            symbolKind_ = input.readMessage(protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(symbolKind_);
              symbolKind_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_WorkspaceSymbolClientCapabilities_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_WorkspaceSymbolClientCapabilities_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            protocol.rpc.WorkspaceSymbolClientCapabilities.class, protocol.rpc.WorkspaceSymbolClientCapabilities.Builder.class);
  }

  public interface SymbolKindOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The symbol kind values the client supports. When this
     * property exists the client also guarantees that it will
     * handle values outside its set gracefully and falls back
     * to a default value when unknown.
     * If this property is not present the client only supports
     * the symbol kinds from `File` to `Array` as defined in
     * the initial version of the protocol.
     * </pre>
     *
     * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
     */
    java.util.List<protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind> 
        getValueSetList();
    /**
     * <pre>
     * The symbol kind values the client supports. When this
     * property exists the client also guarantees that it will
     * handle values outside its set gracefully and falls back
     * to a default value when unknown.
     * If this property is not present the client only supports
     * the symbol kinds from `File` to `Array` as defined in
     * the initial version of the protocol.
     * </pre>
     *
     * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
     */
    protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind getValueSet(int index);
    /**
     * <pre>
     * The symbol kind values the client supports. When this
     * property exists the client also guarantees that it will
     * handle values outside its set gracefully and falls back
     * to a default value when unknown.
     * If this property is not present the client only supports
     * the symbol kinds from `File` to `Array` as defined in
     * the initial version of the protocol.
     * </pre>
     *
     * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
     */
    int getValueSetCount();
    /**
     * <pre>
     * The symbol kind values the client supports. When this
     * property exists the client also guarantees that it will
     * handle values outside its set gracefully and falls back
     * to a default value when unknown.
     * If this property is not present the client only supports
     * the symbol kinds from `File` to `Array` as defined in
     * the initial version of the protocol.
     * </pre>
     *
     * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
     */
    java.util.List<? extends protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKindOrBuilder> 
        getValueSetOrBuilderList();
    /**
     * <pre>
     * The symbol kind values the client supports. When this
     * property exists the client also guarantees that it will
     * handle values outside its set gracefully and falls back
     * to a default value when unknown.
     * If this property is not present the client only supports
     * the symbol kinds from `File` to `Array` as defined in
     * the initial version of the protocol.
     * </pre>
     *
     * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
     */
    protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKindOrBuilder getValueSetOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind}
   */
  public  static final class SymbolKind extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind)
      SymbolKindOrBuilder {
    // Use SymbolKind.newBuilder() to construct.
    private SymbolKind(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SymbolKind() {
      valueSet_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private SymbolKind(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                valueSet_ = new java.util.ArrayList<protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind>();
                mutable_bitField0_ |= 0x00000001;
              }
              valueSet_.add(
                  input.readMessage(protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          valueSet_ = java.util.Collections.unmodifiableList(valueSet_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_WorkspaceSymbolClientCapabilities_SymbolKind_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_WorkspaceSymbolClientCapabilities_SymbolKind_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.class, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder.class);
    }

    public static final int VALUE_SET_FIELD_NUMBER = 1;
    private java.util.List<protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind> valueSet_;
    /**
     * <pre>
     * The symbol kind values the client supports. When this
     * property exists the client also guarantees that it will
     * handle values outside its set gracefully and falls back
     * to a default value when unknown.
     * If this property is not present the client only supports
     * the symbol kinds from `File` to `Array` as defined in
     * the initial version of the protocol.
     * </pre>
     *
     * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
     */
    public java.util.List<protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind> getValueSetList() {
      return valueSet_;
    }
    /**
     * <pre>
     * The symbol kind values the client supports. When this
     * property exists the client also guarantees that it will
     * handle values outside its set gracefully and falls back
     * to a default value when unknown.
     * If this property is not present the client only supports
     * the symbol kinds from `File` to `Array` as defined in
     * the initial version of the protocol.
     * </pre>
     *
     * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
     */
    public java.util.List<? extends protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKindOrBuilder> 
        getValueSetOrBuilderList() {
      return valueSet_;
    }
    /**
     * <pre>
     * The symbol kind values the client supports. When this
     * property exists the client also guarantees that it will
     * handle values outside its set gracefully and falls back
     * to a default value when unknown.
     * If this property is not present the client only supports
     * the symbol kinds from `File` to `Array` as defined in
     * the initial version of the protocol.
     * </pre>
     *
     * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
     */
    public int getValueSetCount() {
      return valueSet_.size();
    }
    /**
     * <pre>
     * The symbol kind values the client supports. When this
     * property exists the client also guarantees that it will
     * handle values outside its set gracefully and falls back
     * to a default value when unknown.
     * If this property is not present the client only supports
     * the symbol kinds from `File` to `Array` as defined in
     * the initial version of the protocol.
     * </pre>
     *
     * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
     */
    public protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind getValueSet(int index) {
      return valueSet_.get(index);
    }
    /**
     * <pre>
     * The symbol kind values the client supports. When this
     * property exists the client also guarantees that it will
     * handle values outside its set gracefully and falls back
     * to a default value when unknown.
     * If this property is not present the client only supports
     * the symbol kinds from `File` to `Array` as defined in
     * the initial version of the protocol.
     * </pre>
     *
     * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
     */
    public protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKindOrBuilder getValueSetOrBuilder(
        int index) {
      return valueSet_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < valueSet_.size(); i++) {
        output.writeMessage(1, valueSet_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < valueSet_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, valueSet_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind)) {
        return super.equals(obj);
      }
      protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind other = (protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind) obj;

      boolean result = true;
      result = result && getValueSetList()
          .equals(other.getValueSetList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getValueSetCount() > 0) {
        hash = (37 * hash) + VALUE_SET_FIELD_NUMBER;
        hash = (53 * hash) + getValueSetList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind)
        protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKindOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocol.rpc.RpcProto.internal_static_protocol_rpc_WorkspaceSymbolClientCapabilities_SymbolKind_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocol.rpc.RpcProto.internal_static_protocol_rpc_WorkspaceSymbolClientCapabilities_SymbolKind_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.class, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder.class);
      }

      // Construct using protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getValueSetFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (valueSetBuilder_ == null) {
          valueSet_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          valueSetBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocol.rpc.RpcProto.internal_static_protocol_rpc_WorkspaceSymbolClientCapabilities_SymbolKind_descriptor;
      }

      public protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind getDefaultInstanceForType() {
        return protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.getDefaultInstance();
      }

      public protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind build() {
        protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind buildPartial() {
        protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind result = new protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind(this);
        int from_bitField0_ = bitField0_;
        if (valueSetBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            valueSet_ = java.util.Collections.unmodifiableList(valueSet_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.valueSet_ = valueSet_;
        } else {
          result.valueSet_ = valueSetBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind) {
          return mergeFrom((protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind other) {
        if (other == protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.getDefaultInstance()) return this;
        if (valueSetBuilder_ == null) {
          if (!other.valueSet_.isEmpty()) {
            if (valueSet_.isEmpty()) {
              valueSet_ = other.valueSet_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureValueSetIsMutable();
              valueSet_.addAll(other.valueSet_);
            }
            onChanged();
          }
        } else {
          if (!other.valueSet_.isEmpty()) {
            if (valueSetBuilder_.isEmpty()) {
              valueSetBuilder_.dispose();
              valueSetBuilder_ = null;
              valueSet_ = other.valueSet_;
              bitField0_ = (bitField0_ & ~0x00000001);
              valueSetBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getValueSetFieldBuilder() : null;
            } else {
              valueSetBuilder_.addAllMessages(other.valueSet_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind> valueSet_ =
        java.util.Collections.emptyList();
      private void ensureValueSetIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          valueSet_ = new java.util.ArrayList<protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind>(valueSet_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKindOrBuilder> valueSetBuilder_;

      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public java.util.List<protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind> getValueSetList() {
        if (valueSetBuilder_ == null) {
          return java.util.Collections.unmodifiableList(valueSet_);
        } else {
          return valueSetBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public int getValueSetCount() {
        if (valueSetBuilder_ == null) {
          return valueSet_.size();
        } else {
          return valueSetBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind getValueSet(int index) {
        if (valueSetBuilder_ == null) {
          return valueSet_.get(index);
        } else {
          return valueSetBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public Builder setValueSet(
          int index, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value) {
        if (valueSetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueSetIsMutable();
          valueSet_.set(index, value);
          onChanged();
        } else {
          valueSetBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public Builder setValueSet(
          int index, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder builderForValue) {
        if (valueSetBuilder_ == null) {
          ensureValueSetIsMutable();
          valueSet_.set(index, builderForValue.build());
          onChanged();
        } else {
          valueSetBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public Builder addValueSet(protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value) {
        if (valueSetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueSetIsMutable();
          valueSet_.add(value);
          onChanged();
        } else {
          valueSetBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public Builder addValueSet(
          int index, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value) {
        if (valueSetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValueSetIsMutable();
          valueSet_.add(index, value);
          onChanged();
        } else {
          valueSetBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public Builder addValueSet(
          protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder builderForValue) {
        if (valueSetBuilder_ == null) {
          ensureValueSetIsMutable();
          valueSet_.add(builderForValue.build());
          onChanged();
        } else {
          valueSetBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public Builder addValueSet(
          int index, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder builderForValue) {
        if (valueSetBuilder_ == null) {
          ensureValueSetIsMutable();
          valueSet_.add(index, builderForValue.build());
          onChanged();
        } else {
          valueSetBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public Builder addAllValueSet(
          java.lang.Iterable<? extends protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind> values) {
        if (valueSetBuilder_ == null) {
          ensureValueSetIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, valueSet_);
          onChanged();
        } else {
          valueSetBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public Builder clearValueSet() {
        if (valueSetBuilder_ == null) {
          valueSet_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          valueSetBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public Builder removeValueSet(int index) {
        if (valueSetBuilder_ == null) {
          ensureValueSetIsMutable();
          valueSet_.remove(index);
          onChanged();
        } else {
          valueSetBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder getValueSetBuilder(
          int index) {
        return getValueSetFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKindOrBuilder getValueSetOrBuilder(
          int index) {
        if (valueSetBuilder_ == null) {
          return valueSet_.get(index);  } else {
          return valueSetBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public java.util.List<? extends protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKindOrBuilder> 
           getValueSetOrBuilderList() {
        if (valueSetBuilder_ != null) {
          return valueSetBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(valueSet_);
        }
      }
      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder addValueSetBuilder() {
        return getValueSetFieldBuilder().addBuilder(
            protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.getDefaultInstance());
      }
      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder addValueSetBuilder(
          int index) {
        return getValueSetFieldBuilder().addBuilder(
            index, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.getDefaultInstance());
      }
      /**
       * <pre>
       * The symbol kind values the client supports. When this
       * property exists the client also guarantees that it will
       * handle values outside its set gracefully and falls back
       * to a default value when unknown.
       * If this property is not present the client only supports
       * the symbol kinds from `File` to `Array` as defined in
       * the initial version of the protocol.
       * </pre>
       *
       * <code>repeated .protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value_set = 1;</code>
       */
      public java.util.List<protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder> 
           getValueSetBuilderList() {
        return getValueSetFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKindOrBuilder> 
          getValueSetFieldBuilder() {
        if (valueSetBuilder_ == null) {
          valueSetBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKindOrBuilder>(
                  valueSet_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          valueSet_ = null;
        }
        return valueSetBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind)
    }

    // @@protoc_insertion_point(class_scope:protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind)
    private static final protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind();
    }

    public static protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SymbolKind>
        PARSER = new com.google.protobuf.AbstractParser<SymbolKind>() {
      public SymbolKind parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new SymbolKind(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SymbolKind> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SymbolKind> getParserForType() {
      return PARSER;
    }

    public protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int DYNAMIC_REGISTRATION_FIELD_NUMBER = 1;
  private boolean dynamicRegistration_;
  /**
   * <pre>
   * Optional. Symbol request supports dynamic registration.
   * </pre>
   *
   * <code>bool dynamic_registration = 1;</code>
   */
  public boolean getDynamicRegistration() {
    return dynamicRegistration_;
  }

  public static final int SYMBOL_KIND_FIELD_NUMBER = 2;
  private protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind symbolKind_;
  /**
   * <pre>
   * Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.
   * </pre>
   *
   * <code>.protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind symbol_kind = 2;</code>
   */
  public boolean hasSymbolKind() {
    return symbolKind_ != null;
  }
  /**
   * <pre>
   * Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.
   * </pre>
   *
   * <code>.protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind symbol_kind = 2;</code>
   */
  public protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind getSymbolKind() {
    return symbolKind_ == null ? protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.getDefaultInstance() : symbolKind_;
  }
  /**
   * <pre>
   * Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.
   * </pre>
   *
   * <code>.protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind symbol_kind = 2;</code>
   */
  public protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKindOrBuilder getSymbolKindOrBuilder() {
    return getSymbolKind();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (dynamicRegistration_ != false) {
      output.writeBool(1, dynamicRegistration_);
    }
    if (symbolKind_ != null) {
      output.writeMessage(2, getSymbolKind());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (dynamicRegistration_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, dynamicRegistration_);
    }
    if (symbolKind_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getSymbolKind());
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof protocol.rpc.WorkspaceSymbolClientCapabilities)) {
      return super.equals(obj);
    }
    protocol.rpc.WorkspaceSymbolClientCapabilities other = (protocol.rpc.WorkspaceSymbolClientCapabilities) obj;

    boolean result = true;
    result = result && (getDynamicRegistration()
        == other.getDynamicRegistration());
    result = result && (hasSymbolKind() == other.hasSymbolKind());
    if (hasSymbolKind()) {
      result = result && getSymbolKind()
          .equals(other.getSymbolKind());
    }
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + DYNAMIC_REGISTRATION_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getDynamicRegistration());
    if (hasSymbolKind()) {
      hash = (37 * hash) + SYMBOL_KIND_FIELD_NUMBER;
      hash = (53 * hash) + getSymbolKind().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static protocol.rpc.WorkspaceSymbolClientCapabilities parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.WorkspaceSymbolClientCapabilities parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.WorkspaceSymbolClientCapabilities parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.WorkspaceSymbolClientCapabilities parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.WorkspaceSymbolClientCapabilities parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.WorkspaceSymbolClientCapabilities parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.WorkspaceSymbolClientCapabilities parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static protocol.rpc.WorkspaceSymbolClientCapabilities parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.WorkspaceSymbolClientCapabilities parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.WorkspaceSymbolClientCapabilities parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(protocol.rpc.WorkspaceSymbolClientCapabilities prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * WorkspaceSymbolClientCapabilities represents a client capabilities of
   * `workspace/symbol` request.
   * </pre>
   *
   * Protobuf type {@code protocol.rpc.WorkspaceSymbolClientCapabilities}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:protocol.rpc.WorkspaceSymbolClientCapabilities)
      protocol.rpc.WorkspaceSymbolClientCapabilitiesOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_WorkspaceSymbolClientCapabilities_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_WorkspaceSymbolClientCapabilities_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol.rpc.WorkspaceSymbolClientCapabilities.class, protocol.rpc.WorkspaceSymbolClientCapabilities.Builder.class);
    }

    // Construct using protocol.rpc.WorkspaceSymbolClientCapabilities.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      dynamicRegistration_ = false;

      if (symbolKindBuilder_ == null) {
        symbolKind_ = null;
      } else {
        symbolKind_ = null;
        symbolKindBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_WorkspaceSymbolClientCapabilities_descriptor;
    }

    public protocol.rpc.WorkspaceSymbolClientCapabilities getDefaultInstanceForType() {
      return protocol.rpc.WorkspaceSymbolClientCapabilities.getDefaultInstance();
    }

    public protocol.rpc.WorkspaceSymbolClientCapabilities build() {
      protocol.rpc.WorkspaceSymbolClientCapabilities result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public protocol.rpc.WorkspaceSymbolClientCapabilities buildPartial() {
      protocol.rpc.WorkspaceSymbolClientCapabilities result = new protocol.rpc.WorkspaceSymbolClientCapabilities(this);
      result.dynamicRegistration_ = dynamicRegistration_;
      if (symbolKindBuilder_ == null) {
        result.symbolKind_ = symbolKind_;
      } else {
        result.symbolKind_ = symbolKindBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof protocol.rpc.WorkspaceSymbolClientCapabilities) {
        return mergeFrom((protocol.rpc.WorkspaceSymbolClientCapabilities)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(protocol.rpc.WorkspaceSymbolClientCapabilities other) {
      if (other == protocol.rpc.WorkspaceSymbolClientCapabilities.getDefaultInstance()) return this;
      if (other.getDynamicRegistration() != false) {
        setDynamicRegistration(other.getDynamicRegistration());
      }
      if (other.hasSymbolKind()) {
        mergeSymbolKind(other.getSymbolKind());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      protocol.rpc.WorkspaceSymbolClientCapabilities parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (protocol.rpc.WorkspaceSymbolClientCapabilities) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private boolean dynamicRegistration_ ;
    /**
     * <pre>
     * Optional. Symbol request supports dynamic registration.
     * </pre>
     *
     * <code>bool dynamic_registration = 1;</code>
     */
    public boolean getDynamicRegistration() {
      return dynamicRegistration_;
    }
    /**
     * <pre>
     * Optional. Symbol request supports dynamic registration.
     * </pre>
     *
     * <code>bool dynamic_registration = 1;</code>
     */
    public Builder setDynamicRegistration(boolean value) {
      
      dynamicRegistration_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. Symbol request supports dynamic registration.
     * </pre>
     *
     * <code>bool dynamic_registration = 1;</code>
     */
    public Builder clearDynamicRegistration() {
      
      dynamicRegistration_ = false;
      onChanged();
      return this;
    }

    private protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind symbolKind_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKindOrBuilder> symbolKindBuilder_;
    /**
     * <pre>
     * Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.
     * </pre>
     *
     * <code>.protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind symbol_kind = 2;</code>
     */
    public boolean hasSymbolKind() {
      return symbolKindBuilder_ != null || symbolKind_ != null;
    }
    /**
     * <pre>
     * Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.
     * </pre>
     *
     * <code>.protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind symbol_kind = 2;</code>
     */
    public protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind getSymbolKind() {
      if (symbolKindBuilder_ == null) {
        return symbolKind_ == null ? protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.getDefaultInstance() : symbolKind_;
      } else {
        return symbolKindBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.
     * </pre>
     *
     * <code>.protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind symbol_kind = 2;</code>
     */
    public Builder setSymbolKind(protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value) {
      if (symbolKindBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        symbolKind_ = value;
        onChanged();
      } else {
        symbolKindBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.
     * </pre>
     *
     * <code>.protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind symbol_kind = 2;</code>
     */
    public Builder setSymbolKind(
        protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder builderForValue) {
      if (symbolKindBuilder_ == null) {
        symbolKind_ = builderForValue.build();
        onChanged();
      } else {
        symbolKindBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.
     * </pre>
     *
     * <code>.protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind symbol_kind = 2;</code>
     */
    public Builder mergeSymbolKind(protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind value) {
      if (symbolKindBuilder_ == null) {
        if (symbolKind_ != null) {
          symbolKind_ =
            protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.newBuilder(symbolKind_).mergeFrom(value).buildPartial();
        } else {
          symbolKind_ = value;
        }
        onChanged();
      } else {
        symbolKindBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.
     * </pre>
     *
     * <code>.protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind symbol_kind = 2;</code>
     */
    public Builder clearSymbolKind() {
      if (symbolKindBuilder_ == null) {
        symbolKind_ = null;
        onChanged();
      } else {
        symbolKind_ = null;
        symbolKindBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.
     * </pre>
     *
     * <code>.protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind symbol_kind = 2;</code>
     */
    public protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder getSymbolKindBuilder() {
      
      onChanged();
      return getSymbolKindFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.
     * </pre>
     *
     * <code>.protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind symbol_kind = 2;</code>
     */
    public protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKindOrBuilder getSymbolKindOrBuilder() {
      if (symbolKindBuilder_ != null) {
        return symbolKindBuilder_.getMessageOrBuilder();
      } else {
        return symbolKind_ == null ?
            protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.getDefaultInstance() : symbolKind_;
      }
    }
    /**
     * <pre>
     * Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.
     * </pre>
     *
     * <code>.protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind symbol_kind = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKindOrBuilder> 
        getSymbolKindFieldBuilder() {
      if (symbolKindBuilder_ == null) {
        symbolKindBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.Builder, protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKindOrBuilder>(
                getSymbolKind(),
                getParentForChildren(),
                isClean());
        symbolKind_ = null;
      }
      return symbolKindBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:protocol.rpc.WorkspaceSymbolClientCapabilities)
  }

  // @@protoc_insertion_point(class_scope:protocol.rpc.WorkspaceSymbolClientCapabilities)
  private static final protocol.rpc.WorkspaceSymbolClientCapabilities DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new protocol.rpc.WorkspaceSymbolClientCapabilities();
  }

  public static protocol.rpc.WorkspaceSymbolClientCapabilities getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<WorkspaceSymbolClientCapabilities>
      PARSER = new com.google.protobuf.AbstractParser<WorkspaceSymbolClientCapabilities>() {
    public WorkspaceSymbolClientCapabilities parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new WorkspaceSymbolClientCapabilities(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<WorkspaceSymbolClientCapabilities> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<WorkspaceSymbolClientCapabilities> getParserForType() {
    return PARSER;
  }

  public protocol.rpc.WorkspaceSymbolClientCapabilities getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

