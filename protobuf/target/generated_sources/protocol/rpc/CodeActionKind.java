// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

/**
 * <pre>
 * CodeActionKind is the kind of a code action.
 * Kinds are a hierarchical list of identifiers separated by `.`, e.g.
 * `"refactor.extract.function"`.
 * The set of kinds is open and client needs to announce the kinds it supports to the server during
 * initialization.
 * A set of predefined code action kinds.
 * (-- api-linter: core::0126::unspecified=disabled --)
 * </pre>
 *
 * Protobuf enum {@code protocol.rpc.CodeActionKind}
 */
public enum CodeActionKind
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Empty kind.
   * </pre>
   *
   * <code>EMPTY = 0;</code>
   */
  EMPTY(0),
  /**
   * <pre>
   * Base kind for quickfix actions: 'quickfix'.
   * </pre>
   *
   * <code>QUICKFIX = 1;</code>
   */
  QUICKFIX(1),
  /**
   * <pre>
   * Base kind for refactoring actions: 'refactor'.
   * </pre>
   *
   * <code>REFACTOR = 2;</code>
   */
  REFACTOR(2),
  /**
   * <pre>
   * Base kind for refactoring extraction actions: 'refactor.extract'.
   * Example extract actions:
   * - Extract method
   * - Extract function
   * - Extract variable
   * - Extract interface from class
   * - ...
   * </pre>
   *
   * <code>REFACTOR_EXTRACT = 3;</code>
   */
  REFACTOR_EXTRACT(3),
  /**
   * <pre>
   * Base kind for refactoring inline actions: 'refactor.inline'.
   * Example inline actions:
   * - Inline function
   * - Inline variable
   * - Inline constant
   * - ...
   * </pre>
   *
   * <code>REFACTOR_INLINE = 4;</code>
   */
  REFACTOR_INLINE(4),
  /**
   * <pre>
   * Base kind for refactoring rewrite actions: 'refactor.rewrite'.
   * Example rewrite actions:
   * - Convert JavaScript function to class
   * - Add or remove parameter
   * - Encapsulate field
   * - Make method static
   * - Move method to base class
   * - ...
   * </pre>
   *
   * <code>REFACTOR_REWRITE = 5;</code>
   */
  REFACTOR_REWRITE(5),
  /**
   * <pre>
   * Base kind for source actions: `source`.
   * Source code actions apply to the entire file.
   * </pre>
   *
   * <code>SOURCE = 6;</code>
   */
  SOURCE(6),
  /**
   * <pre>
   * Base kind for an organize imports source action: `source.organizeImports`.
   * </pre>
   *
   * <code>SOURCE_ORGANIZE_IMPORTS = 7;</code>
   */
  SOURCE_ORGANIZE_IMPORTS(7),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Empty kind.
   * </pre>
   *
   * <code>EMPTY = 0;</code>
   */
  public static final int EMPTY_VALUE = 0;
  /**
   * <pre>
   * Base kind for quickfix actions: 'quickfix'.
   * </pre>
   *
   * <code>QUICKFIX = 1;</code>
   */
  public static final int QUICKFIX_VALUE = 1;
  /**
   * <pre>
   * Base kind for refactoring actions: 'refactor'.
   * </pre>
   *
   * <code>REFACTOR = 2;</code>
   */
  public static final int REFACTOR_VALUE = 2;
  /**
   * <pre>
   * Base kind for refactoring extraction actions: 'refactor.extract'.
   * Example extract actions:
   * - Extract method
   * - Extract function
   * - Extract variable
   * - Extract interface from class
   * - ...
   * </pre>
   *
   * <code>REFACTOR_EXTRACT = 3;</code>
   */
  public static final int REFACTOR_EXTRACT_VALUE = 3;
  /**
   * <pre>
   * Base kind for refactoring inline actions: 'refactor.inline'.
   * Example inline actions:
   * - Inline function
   * - Inline variable
   * - Inline constant
   * - ...
   * </pre>
   *
   * <code>REFACTOR_INLINE = 4;</code>
   */
  public static final int REFACTOR_INLINE_VALUE = 4;
  /**
   * <pre>
   * Base kind for refactoring rewrite actions: 'refactor.rewrite'.
   * Example rewrite actions:
   * - Convert JavaScript function to class
   * - Add or remove parameter
   * - Encapsulate field
   * - Make method static
   * - Move method to base class
   * - ...
   * </pre>
   *
   * <code>REFACTOR_REWRITE = 5;</code>
   */
  public static final int REFACTOR_REWRITE_VALUE = 5;
  /**
   * <pre>
   * Base kind for source actions: `source`.
   * Source code actions apply to the entire file.
   * </pre>
   *
   * <code>SOURCE = 6;</code>
   */
  public static final int SOURCE_VALUE = 6;
  /**
   * <pre>
   * Base kind for an organize imports source action: `source.organizeImports`.
   * </pre>
   *
   * <code>SOURCE_ORGANIZE_IMPORTS = 7;</code>
   */
  public static final int SOURCE_ORGANIZE_IMPORTS_VALUE = 7;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static CodeActionKind valueOf(int value) {
    return forNumber(value);
  }

  public static CodeActionKind forNumber(int value) {
    switch (value) {
      case 0: return EMPTY;
      case 1: return QUICKFIX;
      case 2: return REFACTOR;
      case 3: return REFACTOR_EXTRACT;
      case 4: return REFACTOR_INLINE;
      case 5: return REFACTOR_REWRITE;
      case 6: return SOURCE;
      case 7: return SOURCE_ORGANIZE_IMPORTS;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<CodeActionKind>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      CodeActionKind> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<CodeActionKind>() {
          public CodeActionKind findValueByNumber(int number) {
            return CodeActionKind.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return protocol.rpc.RpcProto.getDescriptor().getEnumTypes().get(9);
  }

  private static final CodeActionKind[] VALUES = values();

  public static CodeActionKind valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private CodeActionKind(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:protocol.rpc.CodeActionKind)
}

