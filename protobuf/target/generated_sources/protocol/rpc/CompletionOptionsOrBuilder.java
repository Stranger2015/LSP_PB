// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

public interface CompletionOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:protocol.rpc.CompletionOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * extends
   * </pre>
   *
   * <code>.protocol.WorkDoneProgressOptions work_done_progress_options = 1;</code>
   */
  boolean hasWorkDoneProgressOptions();
  /**
   * <pre>
   * extends
   * </pre>
   *
   * <code>.protocol.WorkDoneProgressOptions work_done_progress_options = 1;</code>
   */
  protocol.WorkDoneProgressOptions getWorkDoneProgressOptions();
  /**
   * <pre>
   * extends
   * </pre>
   *
   * <code>.protocol.WorkDoneProgressOptions work_done_progress_options = 1;</code>
   */
  protocol.WorkDoneProgressOptionsOrBuilder getWorkDoneProgressOptionsOrBuilder();

  /**
   * <pre>
   * Most tools trigger completion request automatically without explicitly requesting
   * it using a keyboard shortcut (e.g. Ctrl+Space). Typically they do so when the user
   * starts to type an identifier. For example if the user types `c` in a JavaScript file
   * code complete will automatically pop up present `console` besides others as a
   * completion item. Characters that make up identifiers don't need to be listed here.
   * If code complete should automatically be trigger on characters not being valid inside
   * an identifier (for example `.` in JavaScript) list them in `triggerCharacters`.
   * </pre>
   *
   * <code>repeated string trigger_characters = 2;</code>
   */
  java.util.List<java.lang.String>
      getTriggerCharactersList();
  /**
   * <pre>
   * Most tools trigger completion request automatically without explicitly requesting
   * it using a keyboard shortcut (e.g. Ctrl+Space). Typically they do so when the user
   * starts to type an identifier. For example if the user types `c` in a JavaScript file
   * code complete will automatically pop up present `console` besides others as a
   * completion item. Characters that make up identifiers don't need to be listed here.
   * If code complete should automatically be trigger on characters not being valid inside
   * an identifier (for example `.` in JavaScript) list them in `triggerCharacters`.
   * </pre>
   *
   * <code>repeated string trigger_characters = 2;</code>
   */
  int getTriggerCharactersCount();
  /**
   * <pre>
   * Most tools trigger completion request automatically without explicitly requesting
   * it using a keyboard shortcut (e.g. Ctrl+Space). Typically they do so when the user
   * starts to type an identifier. For example if the user types `c` in a JavaScript file
   * code complete will automatically pop up present `console` besides others as a
   * completion item. Characters that make up identifiers don't need to be listed here.
   * If code complete should automatically be trigger on characters not being valid inside
   * an identifier (for example `.` in JavaScript) list them in `triggerCharacters`.
   * </pre>
   *
   * <code>repeated string trigger_characters = 2;</code>
   */
  java.lang.String getTriggerCharacters(int index);
  /**
   * <pre>
   * Most tools trigger completion request automatically without explicitly requesting
   * it using a keyboard shortcut (e.g. Ctrl+Space). Typically they do so when the user
   * starts to type an identifier. For example if the user types `c` in a JavaScript file
   * code complete will automatically pop up present `console` besides others as a
   * completion item. Characters that make up identifiers don't need to be listed here.
   * If code complete should automatically be trigger on characters not being valid inside
   * an identifier (for example `.` in JavaScript) list them in `triggerCharacters`.
   * </pre>
   *
   * <code>repeated string trigger_characters = 2;</code>
   */
  com.google.protobuf.ByteString
      getTriggerCharactersBytes(int index);

  /**
   * <pre>
   * The list of all possible characters that commit a completion. This field can be used
   * if clients don't support individual commit characters per completion item. See
   * `ClientCapabilities.textDocument.completion.completionItem.commitCharactersSupport`.
   * If a server provides both `allCommitCharacters` and commit characters on an individual
   * completion item the ones on the completion item win.
   * &#64;since 3.2.0
   * </pre>
   *
   * <code>repeated string all_commit_characters = 3;</code>
   */
  java.util.List<java.lang.String>
      getAllCommitCharactersList();
  /**
   * <pre>
   * The list of all possible characters that commit a completion. This field can be used
   * if clients don't support individual commit characters per completion item. See
   * `ClientCapabilities.textDocument.completion.completionItem.commitCharactersSupport`.
   * If a server provides both `allCommitCharacters` and commit characters on an individual
   * completion item the ones on the completion item win.
   * &#64;since 3.2.0
   * </pre>
   *
   * <code>repeated string all_commit_characters = 3;</code>
   */
  int getAllCommitCharactersCount();
  /**
   * <pre>
   * The list of all possible characters that commit a completion. This field can be used
   * if clients don't support individual commit characters per completion item. See
   * `ClientCapabilities.textDocument.completion.completionItem.commitCharactersSupport`.
   * If a server provides both `allCommitCharacters` and commit characters on an individual
   * completion item the ones on the completion item win.
   * &#64;since 3.2.0
   * </pre>
   *
   * <code>repeated string all_commit_characters = 3;</code>
   */
  java.lang.String getAllCommitCharacters(int index);
  /**
   * <pre>
   * The list of all possible characters that commit a completion. This field can be used
   * if clients don't support individual commit characters per completion item. See
   * `ClientCapabilities.textDocument.completion.completionItem.commitCharactersSupport`.
   * If a server provides both `allCommitCharacters` and commit characters on an individual
   * completion item the ones on the completion item win.
   * &#64;since 3.2.0
   * </pre>
   *
   * <code>repeated string all_commit_characters = 3;</code>
   */
  com.google.protobuf.ByteString
      getAllCommitCharactersBytes(int index);

  /**
   * <pre>
   * Optional. The server provides support to resolve additional
   * information for a completion item.
   * </pre>
   *
   * <code>bool resolve_provider = 4;</code>
   */
  boolean getResolveProvider();
}
