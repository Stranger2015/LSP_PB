// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

/**
 * <pre>
 * SymbolKind is a symbol kind.
 * </pre>
 *
 * Protobuf enum {@code protocol.rpc.SymbolKind}
 */
public enum SymbolKind
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Conventional default for enums. Do not use this.
   * </pre>
   *
   * <code>SYMBOL_KIND_UNSPECIFIED = 0;</code>
   */
  SYMBOL_KIND_UNSPECIFIED(0),
  /**
   * <code>SYMBOL_FILE = 1;</code>
   */
  SYMBOL_FILE(1),
  /**
   * <code>SYMBOL_MODULE = 2;</code>
   */
  SYMBOL_MODULE(2),
  /**
   * <code>SYMBOL_NAMESPACE = 3;</code>
   */
  SYMBOL_NAMESPACE(3),
  /**
   * <code>SYMBOL_PACKAGE = 4;</code>
   */
  SYMBOL_PACKAGE(4),
  /**
   * <code>SYMBOL_CLASS = 5;</code>
   */
  SYMBOL_CLASS(5),
  /**
   * <code>SYMBOL_METHOD = 6;</code>
   */
  SYMBOL_METHOD(6),
  /**
   * <code>SYMBOL_PROPERTY = 7;</code>
   */
  SYMBOL_PROPERTY(7),
  /**
   * <code>SYMBOL_FIELD = 8;</code>
   */
  SYMBOL_FIELD(8),
  /**
   * <code>SYMBOL_CONSTRUCTOR = 9;</code>
   */
  SYMBOL_CONSTRUCTOR(9),
  /**
   * <code>SYMBOL_ENUM = 10;</code>
   */
  SYMBOL_ENUM(10),
  /**
   * <code>SYMBOL_INTERFACE = 11;</code>
   */
  SYMBOL_INTERFACE(11),
  /**
   * <code>SYMBOL_FUNCTION = 12;</code>
   */
  SYMBOL_FUNCTION(12),
  /**
   * <code>SYMBOL_VARIABLE = 13;</code>
   */
  SYMBOL_VARIABLE(13),
  /**
   * <code>SYMBOL_CONSTANT = 14;</code>
   */
  SYMBOL_CONSTANT(14),
  /**
   * <code>SYMBOL_STRING = 15;</code>
   */
  SYMBOL_STRING(15),
  /**
   * <code>SYMBOL_NUMBER = 16;</code>
   */
  SYMBOL_NUMBER(16),
  /**
   * <code>SYMBOL_BOOLEAN = 17;</code>
   */
  SYMBOL_BOOLEAN(17),
  /**
   * <code>SYMBOL_ARRAY = 18;</code>
   */
  SYMBOL_ARRAY(18),
  /**
   * <code>SYMBOL_OBJECT = 19;</code>
   */
  SYMBOL_OBJECT(19),
  /**
   * <code>SYMBOL_KEY = 20;</code>
   */
  SYMBOL_KEY(20),
  /**
   * <code>SYMBOL_NULL = 21;</code>
   */
  SYMBOL_NULL(21),
  /**
   * <code>SYMBOL_ENUMMEMBER = 22;</code>
   */
  SYMBOL_ENUMMEMBER(22),
  /**
   * <code>SYMBOL_STRUCT = 23;</code>
   */
  SYMBOL_STRUCT(23),
  /**
   * <code>SYMBOL_EVENT = 24;</code>
   */
  SYMBOL_EVENT(24),
  /**
   * <code>SYMBOL_OPERATOR = 25;</code>
   */
  SYMBOL_OPERATOR(25),
  /**
   * <code>SYMBOL_TYPEPARAMETER = 26;</code>
   */
  SYMBOL_TYPEPARAMETER(26),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Conventional default for enums. Do not use this.
   * </pre>
   *
   * <code>SYMBOL_KIND_UNSPECIFIED = 0;</code>
   */
  public static final int SYMBOL_KIND_UNSPECIFIED_VALUE = 0;
  /**
   * <code>SYMBOL_FILE = 1;</code>
   */
  public static final int SYMBOL_FILE_VALUE = 1;
  /**
   * <code>SYMBOL_MODULE = 2;</code>
   */
  public static final int SYMBOL_MODULE_VALUE = 2;
  /**
   * <code>SYMBOL_NAMESPACE = 3;</code>
   */
  public static final int SYMBOL_NAMESPACE_VALUE = 3;
  /**
   * <code>SYMBOL_PACKAGE = 4;</code>
   */
  public static final int SYMBOL_PACKAGE_VALUE = 4;
  /**
   * <code>SYMBOL_CLASS = 5;</code>
   */
  public static final int SYMBOL_CLASS_VALUE = 5;
  /**
   * <code>SYMBOL_METHOD = 6;</code>
   */
  public static final int SYMBOL_METHOD_VALUE = 6;
  /**
   * <code>SYMBOL_PROPERTY = 7;</code>
   */
  public static final int SYMBOL_PROPERTY_VALUE = 7;
  /**
   * <code>SYMBOL_FIELD = 8;</code>
   */
  public static final int SYMBOL_FIELD_VALUE = 8;
  /**
   * <code>SYMBOL_CONSTRUCTOR = 9;</code>
   */
  public static final int SYMBOL_CONSTRUCTOR_VALUE = 9;
  /**
   * <code>SYMBOL_ENUM = 10;</code>
   */
  public static final int SYMBOL_ENUM_VALUE = 10;
  /**
   * <code>SYMBOL_INTERFACE = 11;</code>
   */
  public static final int SYMBOL_INTERFACE_VALUE = 11;
  /**
   * <code>SYMBOL_FUNCTION = 12;</code>
   */
  public static final int SYMBOL_FUNCTION_VALUE = 12;
  /**
   * <code>SYMBOL_VARIABLE = 13;</code>
   */
  public static final int SYMBOL_VARIABLE_VALUE = 13;
  /**
   * <code>SYMBOL_CONSTANT = 14;</code>
   */
  public static final int SYMBOL_CONSTANT_VALUE = 14;
  /**
   * <code>SYMBOL_STRING = 15;</code>
   */
  public static final int SYMBOL_STRING_VALUE = 15;
  /**
   * <code>SYMBOL_NUMBER = 16;</code>
   */
  public static final int SYMBOL_NUMBER_VALUE = 16;
  /**
   * <code>SYMBOL_BOOLEAN = 17;</code>
   */
  public static final int SYMBOL_BOOLEAN_VALUE = 17;
  /**
   * <code>SYMBOL_ARRAY = 18;</code>
   */
  public static final int SYMBOL_ARRAY_VALUE = 18;
  /**
   * <code>SYMBOL_OBJECT = 19;</code>
   */
  public static final int SYMBOL_OBJECT_VALUE = 19;
  /**
   * <code>SYMBOL_KEY = 20;</code>
   */
  public static final int SYMBOL_KEY_VALUE = 20;
  /**
   * <code>SYMBOL_NULL = 21;</code>
   */
  public static final int SYMBOL_NULL_VALUE = 21;
  /**
   * <code>SYMBOL_ENUMMEMBER = 22;</code>
   */
  public static final int SYMBOL_ENUMMEMBER_VALUE = 22;
  /**
   * <code>SYMBOL_STRUCT = 23;</code>
   */
  public static final int SYMBOL_STRUCT_VALUE = 23;
  /**
   * <code>SYMBOL_EVENT = 24;</code>
   */
  public static final int SYMBOL_EVENT_VALUE = 24;
  /**
   * <code>SYMBOL_OPERATOR = 25;</code>
   */
  public static final int SYMBOL_OPERATOR_VALUE = 25;
  /**
   * <code>SYMBOL_TYPEPARAMETER = 26;</code>
   */
  public static final int SYMBOL_TYPEPARAMETER_VALUE = 26;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SymbolKind valueOf(int value) {
    return forNumber(value);
  }

  public static SymbolKind forNumber(int value) {
    switch (value) {
      case 0: return SYMBOL_KIND_UNSPECIFIED;
      case 1: return SYMBOL_FILE;
      case 2: return SYMBOL_MODULE;
      case 3: return SYMBOL_NAMESPACE;
      case 4: return SYMBOL_PACKAGE;
      case 5: return SYMBOL_CLASS;
      case 6: return SYMBOL_METHOD;
      case 7: return SYMBOL_PROPERTY;
      case 8: return SYMBOL_FIELD;
      case 9: return SYMBOL_CONSTRUCTOR;
      case 10: return SYMBOL_ENUM;
      case 11: return SYMBOL_INTERFACE;
      case 12: return SYMBOL_FUNCTION;
      case 13: return SYMBOL_VARIABLE;
      case 14: return SYMBOL_CONSTANT;
      case 15: return SYMBOL_STRING;
      case 16: return SYMBOL_NUMBER;
      case 17: return SYMBOL_BOOLEAN;
      case 18: return SYMBOL_ARRAY;
      case 19: return SYMBOL_OBJECT;
      case 20: return SYMBOL_KEY;
      case 21: return SYMBOL_NULL;
      case 22: return SYMBOL_ENUMMEMBER;
      case 23: return SYMBOL_STRUCT;
      case 24: return SYMBOL_EVENT;
      case 25: return SYMBOL_OPERATOR;
      case 26: return SYMBOL_TYPEPARAMETER;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SymbolKind>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SymbolKind> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SymbolKind>() {
          public SymbolKind findValueByNumber(int number) {
            return SymbolKind.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return protocol.rpc.RpcProto.getDescriptor().getEnumTypes().get(7);
  }

  private static final SymbolKind[] VALUES = values();

  public static SymbolKind valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SymbolKind(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:protocol.rpc.SymbolKind)
}

