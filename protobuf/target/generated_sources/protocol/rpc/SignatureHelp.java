// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

/**
 * <pre>
 * SignatureHelp represents the signature of something
 * callable. There can be multiple signature but only one
 * active and only one active parameter.
 * </pre>
 *
 * Protobuf type {@code protocol.rpc.SignatureHelp}
 */
public  final class SignatureHelp extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:protocol.rpc.SignatureHelp)
    SignatureHelpOrBuilder {
  // Use SignatureHelp.newBuilder() to construct.
  private SignatureHelp(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SignatureHelp() {
    signatures_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private SignatureHelp(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              signatures_ = new java.util.ArrayList<protocol.rpc.SignatureInformation>();
              mutable_bitField0_ |= 0x00000001;
            }
            signatures_.add(
                input.readMessage(protocol.rpc.SignatureInformation.parser(), extensionRegistry));
            break;
          }
          case 18: {
            com.google.protobuf.Int32Value.Builder subBuilder = null;
            if (activeSignature_ != null) {
              subBuilder = activeSignature_.toBuilder();
            }
            activeSignature_ = input.readMessage(com.google.protobuf.Int32Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(activeSignature_);
              activeSignature_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            com.google.protobuf.Int32Value.Builder subBuilder = null;
            if (activeParameter_ != null) {
              subBuilder = activeParameter_.toBuilder();
            }
            activeParameter_ = input.readMessage(com.google.protobuf.Int32Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(activeParameter_);
              activeParameter_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        signatures_ = java.util.Collections.unmodifiableList(signatures_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_SignatureHelp_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_SignatureHelp_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            protocol.rpc.SignatureHelp.class, protocol.rpc.SignatureHelp.Builder.class);
  }

  private int bitField0_;
  public static final int SIGNATURES_FIELD_NUMBER = 1;
  private java.util.List<protocol.rpc.SignatureInformation> signatures_;
  /**
   * <pre>
   * One or more signatures. If no signatures are available the signature help
   * request should return `null`.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public java.util.List<protocol.rpc.SignatureInformation> getSignaturesList() {
    return signatures_;
  }
  /**
   * <pre>
   * One or more signatures. If no signatures are available the signature help
   * request should return `null`.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public java.util.List<? extends protocol.rpc.SignatureInformationOrBuilder> 
      getSignaturesOrBuilderList() {
    return signatures_;
  }
  /**
   * <pre>
   * One or more signatures. If no signatures are available the signature help
   * request should return `null`.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public int getSignaturesCount() {
    return signatures_.size();
  }
  /**
   * <pre>
   * One or more signatures. If no signatures are available the signature help
   * request should return `null`.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public protocol.rpc.SignatureInformation getSignatures(int index) {
    return signatures_.get(index);
  }
  /**
   * <pre>
   * One or more signatures. If no signatures are available the signature help
   * request should return `null`.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public protocol.rpc.SignatureInformationOrBuilder getSignaturesOrBuilder(
      int index) {
    return signatures_.get(index);
  }

  public static final int ACTIVE_SIGNATURE_FIELD_NUMBER = 2;
  private com.google.protobuf.Int32Value activeSignature_;
  /**
   * <pre>
   * The active signature. If omitted or the value lies outside the
   * range of `signatures` the value defaults to zero or is ignore if
   * the `SignatureHelp` as no signatures.
   * Whenever possible implementors should make an active decision about
   * the active signature and shouldn't rely on a default value.
   * In future version of the protocol this property might become
   * mandatory to better express this.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value active_signature = 2;</code>
   */
  public boolean hasActiveSignature() {
    return activeSignature_ != null;
  }
  /**
   * <pre>
   * The active signature. If omitted or the value lies outside the
   * range of `signatures` the value defaults to zero or is ignore if
   * the `SignatureHelp` as no signatures.
   * Whenever possible implementors should make an active decision about
   * the active signature and shouldn't rely on a default value.
   * In future version of the protocol this property might become
   * mandatory to better express this.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value active_signature = 2;</code>
   */
  public com.google.protobuf.Int32Value getActiveSignature() {
    return activeSignature_ == null ? com.google.protobuf.Int32Value.getDefaultInstance() : activeSignature_;
  }
  /**
   * <pre>
   * The active signature. If omitted or the value lies outside the
   * range of `signatures` the value defaults to zero or is ignore if
   * the `SignatureHelp` as no signatures.
   * Whenever possible implementors should make an active decision about
   * the active signature and shouldn't rely on a default value.
   * In future version of the protocol this property might become
   * mandatory to better express this.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value active_signature = 2;</code>
   */
  public com.google.protobuf.Int32ValueOrBuilder getActiveSignatureOrBuilder() {
    return getActiveSignature();
  }

  public static final int ACTIVE_PARAMETER_FIELD_NUMBER = 3;
  private com.google.protobuf.Int32Value activeParameter_;
  /**
   * <pre>
   * The active parameter of the active signature. If omitted or the value
   * lies outside the range of `signatures[activeSignature].parameters`
   * defaults to 0 if the active signature has parameters. If
   * the active signature has no parameters it is ignored.
   * In future version of the protocol this property might become
   * mandatory to better express the active parameter if the
   * active signature does have any.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value active_parameter = 3;</code>
   */
  public boolean hasActiveParameter() {
    return activeParameter_ != null;
  }
  /**
   * <pre>
   * The active parameter of the active signature. If omitted or the value
   * lies outside the range of `signatures[activeSignature].parameters`
   * defaults to 0 if the active signature has parameters. If
   * the active signature has no parameters it is ignored.
   * In future version of the protocol this property might become
   * mandatory to better express the active parameter if the
   * active signature does have any.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value active_parameter = 3;</code>
   */
  public com.google.protobuf.Int32Value getActiveParameter() {
    return activeParameter_ == null ? com.google.protobuf.Int32Value.getDefaultInstance() : activeParameter_;
  }
  /**
   * <pre>
   * The active parameter of the active signature. If omitted or the value
   * lies outside the range of `signatures[activeSignature].parameters`
   * defaults to 0 if the active signature has parameters. If
   * the active signature has no parameters it is ignored.
   * In future version of the protocol this property might become
   * mandatory to better express the active parameter if the
   * active signature does have any.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value active_parameter = 3;</code>
   */
  public com.google.protobuf.Int32ValueOrBuilder getActiveParameterOrBuilder() {
    return getActiveParameter();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < signatures_.size(); i++) {
      output.writeMessage(1, signatures_.get(i));
    }
    if (activeSignature_ != null) {
      output.writeMessage(2, getActiveSignature());
    }
    if (activeParameter_ != null) {
      output.writeMessage(3, getActiveParameter());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < signatures_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, signatures_.get(i));
    }
    if (activeSignature_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getActiveSignature());
    }
    if (activeParameter_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getActiveParameter());
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof protocol.rpc.SignatureHelp)) {
      return super.equals(obj);
    }
    protocol.rpc.SignatureHelp other = (protocol.rpc.SignatureHelp) obj;

    boolean result = true;
    result = result && getSignaturesList()
        .equals(other.getSignaturesList());
    result = result && (hasActiveSignature() == other.hasActiveSignature());
    if (hasActiveSignature()) {
      result = result && getActiveSignature()
          .equals(other.getActiveSignature());
    }
    result = result && (hasActiveParameter() == other.hasActiveParameter());
    if (hasActiveParameter()) {
      result = result && getActiveParameter()
          .equals(other.getActiveParameter());
    }
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getSignaturesCount() > 0) {
      hash = (37 * hash) + SIGNATURES_FIELD_NUMBER;
      hash = (53 * hash) + getSignaturesList().hashCode();
    }
    if (hasActiveSignature()) {
      hash = (37 * hash) + ACTIVE_SIGNATURE_FIELD_NUMBER;
      hash = (53 * hash) + getActiveSignature().hashCode();
    }
    if (hasActiveParameter()) {
      hash = (37 * hash) + ACTIVE_PARAMETER_FIELD_NUMBER;
      hash = (53 * hash) + getActiveParameter().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static protocol.rpc.SignatureHelp parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.SignatureHelp parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.SignatureHelp parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.SignatureHelp parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.SignatureHelp parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.SignatureHelp parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.SignatureHelp parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static protocol.rpc.SignatureHelp parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.SignatureHelp parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.SignatureHelp parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(protocol.rpc.SignatureHelp prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * SignatureHelp represents the signature of something
   * callable. There can be multiple signature but only one
   * active and only one active parameter.
   * </pre>
   *
   * Protobuf type {@code protocol.rpc.SignatureHelp}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:protocol.rpc.SignatureHelp)
      protocol.rpc.SignatureHelpOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_SignatureHelp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_SignatureHelp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol.rpc.SignatureHelp.class, protocol.rpc.SignatureHelp.Builder.class);
    }

    // Construct using protocol.rpc.SignatureHelp.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getSignaturesFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      if (signaturesBuilder_ == null) {
        signatures_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        signaturesBuilder_.clear();
      }
      if (activeSignatureBuilder_ == null) {
        activeSignature_ = null;
      } else {
        activeSignature_ = null;
        activeSignatureBuilder_ = null;
      }
      if (activeParameterBuilder_ == null) {
        activeParameter_ = null;
      } else {
        activeParameter_ = null;
        activeParameterBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_SignatureHelp_descriptor;
    }

    public protocol.rpc.SignatureHelp getDefaultInstanceForType() {
      return protocol.rpc.SignatureHelp.getDefaultInstance();
    }

    public protocol.rpc.SignatureHelp build() {
      protocol.rpc.SignatureHelp result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public protocol.rpc.SignatureHelp buildPartial() {
      protocol.rpc.SignatureHelp result = new protocol.rpc.SignatureHelp(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (signaturesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          signatures_ = java.util.Collections.unmodifiableList(signatures_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.signatures_ = signatures_;
      } else {
        result.signatures_ = signaturesBuilder_.build();
      }
      if (activeSignatureBuilder_ == null) {
        result.activeSignature_ = activeSignature_;
      } else {
        result.activeSignature_ = activeSignatureBuilder_.build();
      }
      if (activeParameterBuilder_ == null) {
        result.activeParameter_ = activeParameter_;
      } else {
        result.activeParameter_ = activeParameterBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof protocol.rpc.SignatureHelp) {
        return mergeFrom((protocol.rpc.SignatureHelp)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(protocol.rpc.SignatureHelp other) {
      if (other == protocol.rpc.SignatureHelp.getDefaultInstance()) return this;
      if (signaturesBuilder_ == null) {
        if (!other.signatures_.isEmpty()) {
          if (signatures_.isEmpty()) {
            signatures_ = other.signatures_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSignaturesIsMutable();
            signatures_.addAll(other.signatures_);
          }
          onChanged();
        }
      } else {
        if (!other.signatures_.isEmpty()) {
          if (signaturesBuilder_.isEmpty()) {
            signaturesBuilder_.dispose();
            signaturesBuilder_ = null;
            signatures_ = other.signatures_;
            bitField0_ = (bitField0_ & ~0x00000001);
            signaturesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSignaturesFieldBuilder() : null;
          } else {
            signaturesBuilder_.addAllMessages(other.signatures_);
          }
        }
      }
      if (other.hasActiveSignature()) {
        mergeActiveSignature(other.getActiveSignature());
      }
      if (other.hasActiveParameter()) {
        mergeActiveParameter(other.getActiveParameter());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      protocol.rpc.SignatureHelp parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (protocol.rpc.SignatureHelp) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<protocol.rpc.SignatureInformation> signatures_ =
      java.util.Collections.emptyList();
    private void ensureSignaturesIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        signatures_ = new java.util.ArrayList<protocol.rpc.SignatureInformation>(signatures_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        protocol.rpc.SignatureInformation, protocol.rpc.SignatureInformation.Builder, protocol.rpc.SignatureInformationOrBuilder> signaturesBuilder_;

    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<protocol.rpc.SignatureInformation> getSignaturesList() {
      if (signaturesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(signatures_);
      } else {
        return signaturesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public int getSignaturesCount() {
      if (signaturesBuilder_ == null) {
        return signatures_.size();
      } else {
        return signaturesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.rpc.SignatureInformation getSignatures(int index) {
      if (signaturesBuilder_ == null) {
        return signatures_.get(index);
      } else {
        return signaturesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setSignatures(
        int index, protocol.rpc.SignatureInformation value) {
      if (signaturesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSignaturesIsMutable();
        signatures_.set(index, value);
        onChanged();
      } else {
        signaturesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setSignatures(
        int index, protocol.rpc.SignatureInformation.Builder builderForValue) {
      if (signaturesBuilder_ == null) {
        ensureSignaturesIsMutable();
        signatures_.set(index, builderForValue.build());
        onChanged();
      } else {
        signaturesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addSignatures(protocol.rpc.SignatureInformation value) {
      if (signaturesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSignaturesIsMutable();
        signatures_.add(value);
        onChanged();
      } else {
        signaturesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addSignatures(
        int index, protocol.rpc.SignatureInformation value) {
      if (signaturesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSignaturesIsMutable();
        signatures_.add(index, value);
        onChanged();
      } else {
        signaturesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addSignatures(
        protocol.rpc.SignatureInformation.Builder builderForValue) {
      if (signaturesBuilder_ == null) {
        ensureSignaturesIsMutable();
        signatures_.add(builderForValue.build());
        onChanged();
      } else {
        signaturesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addSignatures(
        int index, protocol.rpc.SignatureInformation.Builder builderForValue) {
      if (signaturesBuilder_ == null) {
        ensureSignaturesIsMutable();
        signatures_.add(index, builderForValue.build());
        onChanged();
      } else {
        signaturesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addAllSignatures(
        java.lang.Iterable<? extends protocol.rpc.SignatureInformation> values) {
      if (signaturesBuilder_ == null) {
        ensureSignaturesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, signatures_);
        onChanged();
      } else {
        signaturesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearSignatures() {
      if (signaturesBuilder_ == null) {
        signatures_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        signaturesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder removeSignatures(int index) {
      if (signaturesBuilder_ == null) {
        ensureSignaturesIsMutable();
        signatures_.remove(index);
        onChanged();
      } else {
        signaturesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.rpc.SignatureInformation.Builder getSignaturesBuilder(
        int index) {
      return getSignaturesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.rpc.SignatureInformationOrBuilder getSignaturesOrBuilder(
        int index) {
      if (signaturesBuilder_ == null) {
        return signatures_.get(index);  } else {
        return signaturesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<? extends protocol.rpc.SignatureInformationOrBuilder> 
         getSignaturesOrBuilderList() {
      if (signaturesBuilder_ != null) {
        return signaturesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(signatures_);
      }
    }
    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.rpc.SignatureInformation.Builder addSignaturesBuilder() {
      return getSignaturesFieldBuilder().addBuilder(
          protocol.rpc.SignatureInformation.getDefaultInstance());
    }
    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.rpc.SignatureInformation.Builder addSignaturesBuilder(
        int index) {
      return getSignaturesFieldBuilder().addBuilder(
          index, protocol.rpc.SignatureInformation.getDefaultInstance());
    }
    /**
     * <pre>
     * One or more signatures. If no signatures are available the signature help
     * request should return `null`.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SignatureInformation signatures = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<protocol.rpc.SignatureInformation.Builder> 
         getSignaturesBuilderList() {
      return getSignaturesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        protocol.rpc.SignatureInformation, protocol.rpc.SignatureInformation.Builder, protocol.rpc.SignatureInformationOrBuilder> 
        getSignaturesFieldBuilder() {
      if (signaturesBuilder_ == null) {
        signaturesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            protocol.rpc.SignatureInformation, protocol.rpc.SignatureInformation.Builder, protocol.rpc.SignatureInformationOrBuilder>(
                signatures_,
                ((bitField0_ & 0x00000001) == 0x00000001),
                getParentForChildren(),
                isClean());
        signatures_ = null;
      }
      return signaturesBuilder_;
    }

    private com.google.protobuf.Int32Value activeSignature_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder> activeSignatureBuilder_;
    /**
     * <pre>
     * The active signature. If omitted or the value lies outside the
     * range of `signatures` the value defaults to zero or is ignore if
     * the `SignatureHelp` as no signatures.
     * Whenever possible implementors should make an active decision about
     * the active signature and shouldn't rely on a default value.
     * In future version of the protocol this property might become
     * mandatory to better express this.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_signature = 2;</code>
     */
    public boolean hasActiveSignature() {
      return activeSignatureBuilder_ != null || activeSignature_ != null;
    }
    /**
     * <pre>
     * The active signature. If omitted or the value lies outside the
     * range of `signatures` the value defaults to zero or is ignore if
     * the `SignatureHelp` as no signatures.
     * Whenever possible implementors should make an active decision about
     * the active signature and shouldn't rely on a default value.
     * In future version of the protocol this property might become
     * mandatory to better express this.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_signature = 2;</code>
     */
    public com.google.protobuf.Int32Value getActiveSignature() {
      if (activeSignatureBuilder_ == null) {
        return activeSignature_ == null ? com.google.protobuf.Int32Value.getDefaultInstance() : activeSignature_;
      } else {
        return activeSignatureBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The active signature. If omitted or the value lies outside the
     * range of `signatures` the value defaults to zero or is ignore if
     * the `SignatureHelp` as no signatures.
     * Whenever possible implementors should make an active decision about
     * the active signature and shouldn't rely on a default value.
     * In future version of the protocol this property might become
     * mandatory to better express this.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_signature = 2;</code>
     */
    public Builder setActiveSignature(com.google.protobuf.Int32Value value) {
      if (activeSignatureBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        activeSignature_ = value;
        onChanged();
      } else {
        activeSignatureBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The active signature. If omitted or the value lies outside the
     * range of `signatures` the value defaults to zero or is ignore if
     * the `SignatureHelp` as no signatures.
     * Whenever possible implementors should make an active decision about
     * the active signature and shouldn't rely on a default value.
     * In future version of the protocol this property might become
     * mandatory to better express this.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_signature = 2;</code>
     */
    public Builder setActiveSignature(
        com.google.protobuf.Int32Value.Builder builderForValue) {
      if (activeSignatureBuilder_ == null) {
        activeSignature_ = builderForValue.build();
        onChanged();
      } else {
        activeSignatureBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The active signature. If omitted or the value lies outside the
     * range of `signatures` the value defaults to zero or is ignore if
     * the `SignatureHelp` as no signatures.
     * Whenever possible implementors should make an active decision about
     * the active signature and shouldn't rely on a default value.
     * In future version of the protocol this property might become
     * mandatory to better express this.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_signature = 2;</code>
     */
    public Builder mergeActiveSignature(com.google.protobuf.Int32Value value) {
      if (activeSignatureBuilder_ == null) {
        if (activeSignature_ != null) {
          activeSignature_ =
            com.google.protobuf.Int32Value.newBuilder(activeSignature_).mergeFrom(value).buildPartial();
        } else {
          activeSignature_ = value;
        }
        onChanged();
      } else {
        activeSignatureBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The active signature. If omitted or the value lies outside the
     * range of `signatures` the value defaults to zero or is ignore if
     * the `SignatureHelp` as no signatures.
     * Whenever possible implementors should make an active decision about
     * the active signature and shouldn't rely on a default value.
     * In future version of the protocol this property might become
     * mandatory to better express this.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_signature = 2;</code>
     */
    public Builder clearActiveSignature() {
      if (activeSignatureBuilder_ == null) {
        activeSignature_ = null;
        onChanged();
      } else {
        activeSignature_ = null;
        activeSignatureBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The active signature. If omitted or the value lies outside the
     * range of `signatures` the value defaults to zero or is ignore if
     * the `SignatureHelp` as no signatures.
     * Whenever possible implementors should make an active decision about
     * the active signature and shouldn't rely on a default value.
     * In future version of the protocol this property might become
     * mandatory to better express this.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_signature = 2;</code>
     */
    public com.google.protobuf.Int32Value.Builder getActiveSignatureBuilder() {
      
      onChanged();
      return getActiveSignatureFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The active signature. If omitted or the value lies outside the
     * range of `signatures` the value defaults to zero or is ignore if
     * the `SignatureHelp` as no signatures.
     * Whenever possible implementors should make an active decision about
     * the active signature and shouldn't rely on a default value.
     * In future version of the protocol this property might become
     * mandatory to better express this.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_signature = 2;</code>
     */
    public com.google.protobuf.Int32ValueOrBuilder getActiveSignatureOrBuilder() {
      if (activeSignatureBuilder_ != null) {
        return activeSignatureBuilder_.getMessageOrBuilder();
      } else {
        return activeSignature_ == null ?
            com.google.protobuf.Int32Value.getDefaultInstance() : activeSignature_;
      }
    }
    /**
     * <pre>
     * The active signature. If omitted or the value lies outside the
     * range of `signatures` the value defaults to zero or is ignore if
     * the `SignatureHelp` as no signatures.
     * Whenever possible implementors should make an active decision about
     * the active signature and shouldn't rely on a default value.
     * In future version of the protocol this property might become
     * mandatory to better express this.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_signature = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder> 
        getActiveSignatureFieldBuilder() {
      if (activeSignatureBuilder_ == null) {
        activeSignatureBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder>(
                getActiveSignature(),
                getParentForChildren(),
                isClean());
        activeSignature_ = null;
      }
      return activeSignatureBuilder_;
    }

    private com.google.protobuf.Int32Value activeParameter_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder> activeParameterBuilder_;
    /**
     * <pre>
     * The active parameter of the active signature. If omitted or the value
     * lies outside the range of `signatures[activeSignature].parameters`
     * defaults to 0 if the active signature has parameters. If
     * the active signature has no parameters it is ignored.
     * In future version of the protocol this property might become
     * mandatory to better express the active parameter if the
     * active signature does have any.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_parameter = 3;</code>
     */
    public boolean hasActiveParameter() {
      return activeParameterBuilder_ != null || activeParameter_ != null;
    }
    /**
     * <pre>
     * The active parameter of the active signature. If omitted or the value
     * lies outside the range of `signatures[activeSignature].parameters`
     * defaults to 0 if the active signature has parameters. If
     * the active signature has no parameters it is ignored.
     * In future version of the protocol this property might become
     * mandatory to better express the active parameter if the
     * active signature does have any.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_parameter = 3;</code>
     */
    public com.google.protobuf.Int32Value getActiveParameter() {
      if (activeParameterBuilder_ == null) {
        return activeParameter_ == null ? com.google.protobuf.Int32Value.getDefaultInstance() : activeParameter_;
      } else {
        return activeParameterBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The active parameter of the active signature. If omitted or the value
     * lies outside the range of `signatures[activeSignature].parameters`
     * defaults to 0 if the active signature has parameters. If
     * the active signature has no parameters it is ignored.
     * In future version of the protocol this property might become
     * mandatory to better express the active parameter if the
     * active signature does have any.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_parameter = 3;</code>
     */
    public Builder setActiveParameter(com.google.protobuf.Int32Value value) {
      if (activeParameterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        activeParameter_ = value;
        onChanged();
      } else {
        activeParameterBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The active parameter of the active signature. If omitted or the value
     * lies outside the range of `signatures[activeSignature].parameters`
     * defaults to 0 if the active signature has parameters. If
     * the active signature has no parameters it is ignored.
     * In future version of the protocol this property might become
     * mandatory to better express the active parameter if the
     * active signature does have any.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_parameter = 3;</code>
     */
    public Builder setActiveParameter(
        com.google.protobuf.Int32Value.Builder builderForValue) {
      if (activeParameterBuilder_ == null) {
        activeParameter_ = builderForValue.build();
        onChanged();
      } else {
        activeParameterBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The active parameter of the active signature. If omitted or the value
     * lies outside the range of `signatures[activeSignature].parameters`
     * defaults to 0 if the active signature has parameters. If
     * the active signature has no parameters it is ignored.
     * In future version of the protocol this property might become
     * mandatory to better express the active parameter if the
     * active signature does have any.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_parameter = 3;</code>
     */
    public Builder mergeActiveParameter(com.google.protobuf.Int32Value value) {
      if (activeParameterBuilder_ == null) {
        if (activeParameter_ != null) {
          activeParameter_ =
            com.google.protobuf.Int32Value.newBuilder(activeParameter_).mergeFrom(value).buildPartial();
        } else {
          activeParameter_ = value;
        }
        onChanged();
      } else {
        activeParameterBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The active parameter of the active signature. If omitted or the value
     * lies outside the range of `signatures[activeSignature].parameters`
     * defaults to 0 if the active signature has parameters. If
     * the active signature has no parameters it is ignored.
     * In future version of the protocol this property might become
     * mandatory to better express the active parameter if the
     * active signature does have any.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_parameter = 3;</code>
     */
    public Builder clearActiveParameter() {
      if (activeParameterBuilder_ == null) {
        activeParameter_ = null;
        onChanged();
      } else {
        activeParameter_ = null;
        activeParameterBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The active parameter of the active signature. If omitted or the value
     * lies outside the range of `signatures[activeSignature].parameters`
     * defaults to 0 if the active signature has parameters. If
     * the active signature has no parameters it is ignored.
     * In future version of the protocol this property might become
     * mandatory to better express the active parameter if the
     * active signature does have any.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_parameter = 3;</code>
     */
    public com.google.protobuf.Int32Value.Builder getActiveParameterBuilder() {
      
      onChanged();
      return getActiveParameterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The active parameter of the active signature. If omitted or the value
     * lies outside the range of `signatures[activeSignature].parameters`
     * defaults to 0 if the active signature has parameters. If
     * the active signature has no parameters it is ignored.
     * In future version of the protocol this property might become
     * mandatory to better express the active parameter if the
     * active signature does have any.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_parameter = 3;</code>
     */
    public com.google.protobuf.Int32ValueOrBuilder getActiveParameterOrBuilder() {
      if (activeParameterBuilder_ != null) {
        return activeParameterBuilder_.getMessageOrBuilder();
      } else {
        return activeParameter_ == null ?
            com.google.protobuf.Int32Value.getDefaultInstance() : activeParameter_;
      }
    }
    /**
     * <pre>
     * The active parameter of the active signature. If omitted or the value
     * lies outside the range of `signatures[activeSignature].parameters`
     * defaults to 0 if the active signature has parameters. If
     * the active signature has no parameters it is ignored.
     * In future version of the protocol this property might become
     * mandatory to better express the active parameter if the
     * active signature does have any.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value active_parameter = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder> 
        getActiveParameterFieldBuilder() {
      if (activeParameterBuilder_ == null) {
        activeParameterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder>(
                getActiveParameter(),
                getParentForChildren(),
                isClean());
        activeParameter_ = null;
      }
      return activeParameterBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:protocol.rpc.SignatureHelp)
  }

  // @@protoc_insertion_point(class_scope:protocol.rpc.SignatureHelp)
  private static final protocol.rpc.SignatureHelp DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new protocol.rpc.SignatureHelp();
  }

  public static protocol.rpc.SignatureHelp getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SignatureHelp>
      PARSER = new com.google.protobuf.AbstractParser<SignatureHelp>() {
    public SignatureHelp parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new SignatureHelp(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SignatureHelp> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SignatureHelp> getParserForType() {
    return PARSER;
  }

  public protocol.rpc.SignatureHelp getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

