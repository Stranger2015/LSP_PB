// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

public interface CompletionItemOrBuilder extends
    // @@protoc_insertion_point(interface_extends:protocol.rpc.CompletionItem)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The label of this completion item. By default
   * also the text that is inserted when selecting
   * this completion.
   * </pre>
   *
   * <code>string label = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  java.lang.String getLabel();
  /**
   * <pre>
   * The label of this completion item. By default
   * also the text that is inserted when selecting
   * this completion.
   * </pre>
   *
   * <code>string label = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  com.google.protobuf.ByteString
      getLabelBytes();

  /**
   * <pre>
   * The kind of this completion item. Based of the kind
   * an icon is chosen by the editor. The standardized set
   * of available values is defined in `CompletionItemKind`.
   * </pre>
   *
   * <code>.protocol.rpc.CompletionItemKind kind = 2;</code>
   */
  int getKindValue();
  /**
   * <pre>
   * The kind of this completion item. Based of the kind
   * an icon is chosen by the editor. The standardized set
   * of available values is defined in `CompletionItemKind`.
   * </pre>
   *
   * <code>.protocol.rpc.CompletionItemKind kind = 2;</code>
   */
  protocol.rpc.CompletionItemKind getKind();

  /**
   * <pre>
   * Tags for this completion item.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
   */
  java.util.List<protocol.rpc.CompletionItemTag> getTagsList();
  /**
   * <pre>
   * Tags for this completion item.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
   */
  int getTagsCount();
  /**
   * <pre>
   * Tags for this completion item.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
   */
  protocol.rpc.CompletionItemTag getTags(int index);
  /**
   * <pre>
   * Tags for this completion item.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
   */
  java.util.List<java.lang.Integer>
  getTagsValueList();
  /**
   * <pre>
   * Tags for this completion item.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
   */
  int getTagsValue(int index);

  /**
   * <pre>
   * A human-readable string with additional information
   * about this item, like type or symbol information.
   * </pre>
   *
   * <code>.google.protobuf.StringValue detail = 4;</code>
   */
  boolean hasDetail();
  /**
   * <pre>
   * A human-readable string with additional information
   * about this item, like type or symbol information.
   * </pre>
   *
   * <code>.google.protobuf.StringValue detail = 4;</code>
   */
  com.google.protobuf.StringValue getDetail();
  /**
   * <pre>
   * A human-readable string with additional information
   * about this item, like type or symbol information.
   * </pre>
   *
   * <code>.google.protobuf.StringValue detail = 4;</code>
   */
  com.google.protobuf.StringValueOrBuilder getDetailOrBuilder();

  /**
   * <code>.protocol.MarkupContent markup_content = 5;</code>
   */
  protocol.MarkupContent getMarkupContent();
  /**
   * <code>.protocol.MarkupContent markup_content = 5;</code>
   */
  protocol.MarkupContentOrBuilder getMarkupContentOrBuilder();

  /**
   * <code>string content = 6;</code>
   */
  java.lang.String getContent();
  /**
   * <code>string content = 6;</code>
   */
  com.google.protobuf.ByteString
      getContentBytes();

  /**
   * <pre>
   * Indicates if this item is deprecated.
   * Use tags instead if supported.
   * </pre>
   *
   * <code>bool deprecated = 7 [deprecated = true];</code>
   */
  @java.lang.Deprecated boolean getDeprecated();

  /**
   * <pre>
   * Optional. Select this item when showing.
   * *Note* that only one completion item can be selected and that the
   * tool / client decides which item that is. The rule is that the *first*
   * item of those that match best is selected.
   * </pre>
   *
   * <code>bool preselect = 8;</code>
   */
  boolean getPreselect();

  /**
   * <pre>
   * A string that should be used when comparing this item
   * with other items. When `falsy` the label is used.
   * </pre>
   *
   * <code>.google.protobuf.StringValue sort_text = 9;</code>
   */
  boolean hasSortText();
  /**
   * <pre>
   * A string that should be used when comparing this item
   * with other items. When `falsy` the label is used.
   * </pre>
   *
   * <code>.google.protobuf.StringValue sort_text = 9;</code>
   */
  com.google.protobuf.StringValue getSortText();
  /**
   * <pre>
   * A string that should be used when comparing this item
   * with other items. When `falsy` the label is used.
   * </pre>
   *
   * <code>.google.protobuf.StringValue sort_text = 9;</code>
   */
  com.google.protobuf.StringValueOrBuilder getSortTextOrBuilder();

  /**
   * <pre>
   * A string that should be used when filtering a set of
   * completion items. When `falsy` the label is used.
   * </pre>
   *
   * <code>.google.protobuf.StringValue filter_text = 10;</code>
   */
  boolean hasFilterText();
  /**
   * <pre>
   * A string that should be used when filtering a set of
   * completion items. When `falsy` the label is used.
   * </pre>
   *
   * <code>.google.protobuf.StringValue filter_text = 10;</code>
   */
  com.google.protobuf.StringValue getFilterText();
  /**
   * <pre>
   * A string that should be used when filtering a set of
   * completion items. When `falsy` the label is used.
   * </pre>
   *
   * <code>.google.protobuf.StringValue filter_text = 10;</code>
   */
  com.google.protobuf.StringValueOrBuilder getFilterTextOrBuilder();

  /**
   * <pre>
   * A string that should be inserted into a document when selecting
   * this completion. When `falsy` the label is used.
   * The `insertText` is subject to interpretation by the client side.
   * Some tools might not take the string literally. For example
   * VS Code when code complete is requested in this example `con&lt;cursor position&gt;`
   * and a completion item with an `insertText` of `console` is provided it
   * will only insert `sole`. Therefore it is recommended to use `textEdit` instead
   * since it avoids additional client side interpretation.
   * </pre>
   *
   * <code>.google.protobuf.StringValue insert_text = 11;</code>
   */
  boolean hasInsertText();
  /**
   * <pre>
   * A string that should be inserted into a document when selecting
   * this completion. When `falsy` the label is used.
   * The `insertText` is subject to interpretation by the client side.
   * Some tools might not take the string literally. For example
   * VS Code when code complete is requested in this example `con&lt;cursor position&gt;`
   * and a completion item with an `insertText` of `console` is provided it
   * will only insert `sole`. Therefore it is recommended to use `textEdit` instead
   * since it avoids additional client side interpretation.
   * </pre>
   *
   * <code>.google.protobuf.StringValue insert_text = 11;</code>
   */
  com.google.protobuf.StringValue getInsertText();
  /**
   * <pre>
   * A string that should be inserted into a document when selecting
   * this completion. When `falsy` the label is used.
   * The `insertText` is subject to interpretation by the client side.
   * Some tools might not take the string literally. For example
   * VS Code when code complete is requested in this example `con&lt;cursor position&gt;`
   * and a completion item with an `insertText` of `console` is provided it
   * will only insert `sole`. Therefore it is recommended to use `textEdit` instead
   * since it avoids additional client side interpretation.
   * </pre>
   *
   * <code>.google.protobuf.StringValue insert_text = 11;</code>
   */
  com.google.protobuf.StringValueOrBuilder getInsertTextOrBuilder();

  /**
   * <pre>
   * The format of the insert text. The format applies to both the `insertText` property
   * and the `newText` property of a provided `textEdit`. If omitted defaults to
   * `InsertTextFormat.PlainText`.
   * </pre>
   *
   * <code>.protocol.rpc.InsertTextFormat insert_text_format = 12;</code>
   */
  int getInsertTextFormatValue();
  /**
   * <pre>
   * The format of the insert text. The format applies to both the `insertText` property
   * and the `newText` property of a provided `textEdit`. If omitted defaults to
   * `InsertTextFormat.PlainText`.
   * </pre>
   *
   * <code>.protocol.rpc.InsertTextFormat insert_text_format = 12;</code>
   */
  protocol.rpc.InsertTextFormat getInsertTextFormat();

  /**
   * <pre>
   * An edit which is applied to a document when selecting this completion. When an edit is provided
   * the value of `insertText` is ignored.
   * NOTE: The range of the edit must be a single line range and it must contain the position at
   * which completion has been requested.
   * </pre>
   *
   * <code>.protocol.TextEdit text_edit = 13;</code>
   */
  boolean hasTextEdit();
  /**
   * <pre>
   * An edit which is applied to a document when selecting this completion. When an edit is provided
   * the value of `insertText` is ignored.
   * NOTE: The range of the edit must be a single line range and it must contain the position at
   * which completion has been requested.
   * </pre>
   *
   * <code>.protocol.TextEdit text_edit = 13;</code>
   */
  protocol.TextEdit getTextEdit();
  /**
   * <pre>
   * An edit which is applied to a document when selecting this completion. When an edit is provided
   * the value of `insertText` is ignored.
   * NOTE: The range of the edit must be a single line range and it must contain the position at
   * which completion has been requested.
   * </pre>
   *
   * <code>.protocol.TextEdit text_edit = 13;</code>
   */
  protocol.TextEditOrBuilder getTextEditOrBuilder();

  /**
   * <pre>
   * An optional array of additional text edits that are applied when
   * selecting this completion. Edits must not overlap (including the same insert position)
   * with the main edit nor with themselves.
   * Additional text edits should be used to change text unrelated to the current cursor position
   * (for example adding an import statement at the top of the file if the completion item will
   * insert an unqualified type).
   * </pre>
   *
   * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
   */
  java.util.List<protocol.TextEdit> 
      getAdditionalTextEditsList();
  /**
   * <pre>
   * An optional array of additional text edits that are applied when
   * selecting this completion. Edits must not overlap (including the same insert position)
   * with the main edit nor with themselves.
   * Additional text edits should be used to change text unrelated to the current cursor position
   * (for example adding an import statement at the top of the file if the completion item will
   * insert an unqualified type).
   * </pre>
   *
   * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
   */
  protocol.TextEdit getAdditionalTextEdits(int index);
  /**
   * <pre>
   * An optional array of additional text edits that are applied when
   * selecting this completion. Edits must not overlap (including the same insert position)
   * with the main edit nor with themselves.
   * Additional text edits should be used to change text unrelated to the current cursor position
   * (for example adding an import statement at the top of the file if the completion item will
   * insert an unqualified type).
   * </pre>
   *
   * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
   */
  int getAdditionalTextEditsCount();
  /**
   * <pre>
   * An optional array of additional text edits that are applied when
   * selecting this completion. Edits must not overlap (including the same insert position)
   * with the main edit nor with themselves.
   * Additional text edits should be used to change text unrelated to the current cursor position
   * (for example adding an import statement at the top of the file if the completion item will
   * insert an unqualified type).
   * </pre>
   *
   * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
   */
  java.util.List<? extends protocol.TextEditOrBuilder> 
      getAdditionalTextEditsOrBuilderList();
  /**
   * <pre>
   * An optional array of additional text edits that are applied when
   * selecting this completion. Edits must not overlap (including the same insert position)
   * with the main edit nor with themselves.
   * Additional text edits should be used to change text unrelated to the current cursor position
   * (for example adding an import statement at the top of the file if the completion item will
   * insert an unqualified type).
   * </pre>
   *
   * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
   */
  protocol.TextEditOrBuilder getAdditionalTextEditsOrBuilder(
      int index);

  /**
   * <pre>
   * An optional set of characters that when pressed while this completion is active will accept it
   * first and then type that character. *Note* that all commit characters should have `length=1`
   * and that superfluous characters will be ignored.
   * </pre>
   *
   * <code>repeated string commit_characters = 15;</code>
   */
  java.util.List<java.lang.String>
      getCommitCharactersList();
  /**
   * <pre>
   * An optional set of characters that when pressed while this completion is active will accept it
   * first and then type that character. *Note* that all commit characters should have `length=1`
   * and that superfluous characters will be ignored.
   * </pre>
   *
   * <code>repeated string commit_characters = 15;</code>
   */
  int getCommitCharactersCount();
  /**
   * <pre>
   * An optional set of characters that when pressed while this completion is active will accept it
   * first and then type that character. *Note* that all commit characters should have `length=1`
   * and that superfluous characters will be ignored.
   * </pre>
   *
   * <code>repeated string commit_characters = 15;</code>
   */
  java.lang.String getCommitCharacters(int index);
  /**
   * <pre>
   * An optional set of characters that when pressed while this completion is active will accept it
   * first and then type that character. *Note* that all commit characters should have `length=1`
   * and that superfluous characters will be ignored.
   * </pre>
   *
   * <code>repeated string commit_characters = 15;</code>
   */
  com.google.protobuf.ByteString
      getCommitCharactersBytes(int index);

  /**
   * <pre>
   * Optional. An optional command that is executed *after* inserting this completion. *Note* that
   * additional modifications to the current document should be described with the
   * additionalTextEdits-property.
   * </pre>
   *
   * <code>.protocol.Command command = 16;</code>
   */
  boolean hasCommand();
  /**
   * <pre>
   * Optional. An optional command that is executed *after* inserting this completion. *Note* that
   * additional modifications to the current document should be described with the
   * additionalTextEdits-property.
   * </pre>
   *
   * <code>.protocol.Command command = 16;</code>
   */
  protocol.Command getCommand();
  /**
   * <pre>
   * Optional. An optional command that is executed *after* inserting this completion. *Note* that
   * additional modifications to the current document should be described with the
   * additionalTextEdits-property.
   * </pre>
   *
   * <code>.protocol.Command command = 16;</code>
   */
  protocol.CommandOrBuilder getCommandOrBuilder();

  /**
   * <pre>
   * A data entry field that is preserved on a completion item between
   * a completion and a completion resolve request.
   * </pre>
   *
   * <code>.google.protobuf.Any data = 17;</code>
   */
  boolean hasData();
  /**
   * <pre>
   * A data entry field that is preserved on a completion item between
   * a completion and a completion resolve request.
   * </pre>
   *
   * <code>.google.protobuf.Any data = 17;</code>
   */
  com.google.protobuf.Any getData();
  /**
   * <pre>
   * A data entry field that is preserved on a completion item between
   * a completion and a completion resolve request.
   * </pre>
   *
   * <code>.google.protobuf.Any data = 17;</code>
   */
  com.google.protobuf.AnyOrBuilder getDataOrBuilder();

  public protocol.rpc.CompletionItem.DocumentationCase getDocumentationCase();
}
