// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

public interface DidChangeTextDocumentRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:protocol.rpc.DidChangeTextDocumentRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The document that did change. The version number points
   * to the version after all provided content changes have
   * been applied.
   * </pre>
   *
   * <code>.protocol.VersionedTextDocumentIdentifier text_document = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  boolean hasTextDocument();
  /**
   * <pre>
   * The document that did change. The version number points
   * to the version after all provided content changes have
   * been applied.
   * </pre>
   *
   * <code>.protocol.VersionedTextDocumentIdentifier text_document = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  protocol.VersionedTextDocumentIdentifier getTextDocument();
  /**
   * <pre>
   * The document that did change. The version number points
   * to the version after all provided content changes have
   * been applied.
   * </pre>
   *
   * <code>.protocol.VersionedTextDocumentIdentifier text_document = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  protocol.VersionedTextDocumentIdentifierOrBuilder getTextDocumentOrBuilder();

  /**
   * <pre>
   * The actual content changes. The content changes describe single state changes
   * to the document. So if there are two content changes c1 (at array index 0) and
   * c2 (at array index 1) for a document in state S then c1 moves the document from
   * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
   * on the state S'.
   * To mirror the content of a document using change events use the following approach:
   * - start with the same initial content
   * - apply the 'textDocument/didChange' notifications in the order you receive them.
   * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
   *   you receive them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  java.util.List<protocol.rpc.TextDocumentContentChangeEvent> 
      getContentChangesList();
  /**
   * <pre>
   * The actual content changes. The content changes describe single state changes
   * to the document. So if there are two content changes c1 (at array index 0) and
   * c2 (at array index 1) for a document in state S then c1 moves the document from
   * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
   * on the state S'.
   * To mirror the content of a document using change events use the following approach:
   * - start with the same initial content
   * - apply the 'textDocument/didChange' notifications in the order you receive them.
   * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
   *   you receive them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  protocol.rpc.TextDocumentContentChangeEvent getContentChanges(int index);
  /**
   * <pre>
   * The actual content changes. The content changes describe single state changes
   * to the document. So if there are two content changes c1 (at array index 0) and
   * c2 (at array index 1) for a document in state S then c1 moves the document from
   * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
   * on the state S'.
   * To mirror the content of a document using change events use the following approach:
   * - start with the same initial content
   * - apply the 'textDocument/didChange' notifications in the order you receive them.
   * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
   *   you receive them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  int getContentChangesCount();
  /**
   * <pre>
   * The actual content changes. The content changes describe single state changes
   * to the document. So if there are two content changes c1 (at array index 0) and
   * c2 (at array index 1) for a document in state S then c1 moves the document from
   * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
   * on the state S'.
   * To mirror the content of a document using change events use the following approach:
   * - start with the same initial content
   * - apply the 'textDocument/didChange' notifications in the order you receive them.
   * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
   *   you receive them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  java.util.List<? extends protocol.rpc.TextDocumentContentChangeEventOrBuilder> 
      getContentChangesOrBuilderList();
  /**
   * <pre>
   * The actual content changes. The content changes describe single state changes
   * to the document. So if there are two content changes c1 (at array index 0) and
   * c2 (at array index 1) for a document in state S then c1 moves the document from
   * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
   * on the state S'.
   * To mirror the content of a document using change events use the following approach:
   * - start with the same initial content
   * - apply the 'textDocument/didChange' notifications in the order you receive them.
   * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
   *   you receive them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  protocol.rpc.TextDocumentContentChangeEventOrBuilder getContentChangesOrBuilder(
      int index);
}
