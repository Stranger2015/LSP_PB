// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

/**
 * <pre>
 * SemanticTokensClientCapabilities represents a client capabilities of
 * `textDocument/semanticTokens/&#42;` request.
 * &#64;since 3.16.0
 * </pre>
 *
 * Protobuf type {@code protocol.rpc.SemanticTokensClientCapabilities}
 */
public  final class SemanticTokensClientCapabilities extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:protocol.rpc.SemanticTokensClientCapabilities)
    SemanticTokensClientCapabilitiesOrBuilder {
  // Use SemanticTokensClientCapabilities.newBuilder() to construct.
  private SemanticTokensClientCapabilities(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SemanticTokensClientCapabilities() {
    dynamicRegistration_ = false;
    tokenTypes_ = java.util.Collections.emptyList();
    tokenModifiers_ = java.util.Collections.emptyList();
    formats_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private SemanticTokensClientCapabilities(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 8: {

            dynamicRegistration_ = input.readBool();
            break;
          }
          case 18: {
            protocol.rpc.SemanticTokensClientCapabilities.Requests.Builder subBuilder = null;
            if (requests_ != null) {
              subBuilder = requests_.toBuilder();
            }
            requests_ = input.readMessage(protocol.rpc.SemanticTokensClientCapabilities.Requests.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(requests_);
              requests_ = subBuilder.buildPartial();
            }

            break;
          }
          case 24: {
            int rawValue = input.readEnum();
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              tokenTypes_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000004;
            }
            tokenTypes_.add(rawValue);
            break;
          }
          case 26: {
            int length = input.readRawVarint32();
            int oldLimit = input.pushLimit(length);
            while(input.getBytesUntilLimit() > 0) {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                tokenTypes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              tokenTypes_.add(rawValue);
            }
            input.popLimit(oldLimit);
            break;
          }
          case 32: {
            int rawValue = input.readEnum();
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
              tokenModifiers_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000008;
            }
            tokenModifiers_.add(rawValue);
            break;
          }
          case 34: {
            int length = input.readRawVarint32();
            int oldLimit = input.pushLimit(length);
            while(input.getBytesUntilLimit() > 0) {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                tokenModifiers_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              tokenModifiers_.add(rawValue);
            }
            input.popLimit(oldLimit);
            break;
          }
          case 40: {
            int rawValue = input.readEnum();
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
              formats_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000010;
            }
            formats_.add(rawValue);
            break;
          }
          case 42: {
            int length = input.readRawVarint32();
            int oldLimit = input.pushLimit(length);
            while(input.getBytesUntilLimit() > 0) {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                formats_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              formats_.add(rawValue);
            }
            input.popLimit(oldLimit);
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        tokenTypes_ = java.util.Collections.unmodifiableList(tokenTypes_);
      }
      if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
        tokenModifiers_ = java.util.Collections.unmodifiableList(tokenModifiers_);
      }
      if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
        formats_ = java.util.Collections.unmodifiableList(formats_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokensClientCapabilities_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokensClientCapabilities_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            protocol.rpc.SemanticTokensClientCapabilities.class, protocol.rpc.SemanticTokensClientCapabilities.Builder.class);
  }

  public interface RequestsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:protocol.rpc.SemanticTokensClientCapabilities.Requests)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bool enable_range = 2;</code>
     */
    boolean getEnableRange();

    /**
     * <code>.google.protobuf.NullValue empty = 3;</code>
     */
    int getEmptyValue();
    /**
     * <code>.google.protobuf.NullValue empty = 3;</code>
     */
    com.google.protobuf.NullValue getEmpty();

    /**
     * <code>bool enable_full = 4;</code>
     */
    boolean getEnableFull();

    /**
     * <code>bool delta = 5;</code>
     */
    boolean getDelta();

    public protocol.rpc.SemanticTokensClientCapabilities.Requests.RangeCase getRangeCase();

    public protocol.rpc.SemanticTokensClientCapabilities.Requests.FullCase getFullCase();
  }
  /**
   * Protobuf type {@code protocol.rpc.SemanticTokensClientCapabilities.Requests}
   */
  public  static final class Requests extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:protocol.rpc.SemanticTokensClientCapabilities.Requests)
      RequestsOrBuilder {
    // Use Requests.newBuilder() to construct.
    private Requests(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Requests() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Requests(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 16: {
              rangeCase_ = 2;
              range_ = input.readBool();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              rangeCase_ = 3;
              range_ = rawValue;
              break;
            }
            case 32: {
              fullCase_ = 4;
              full_ = input.readBool();
              break;
            }
            case 40: {
              fullCase_ = 5;
              full_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokensClientCapabilities_Requests_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokensClientCapabilities_Requests_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol.rpc.SemanticTokensClientCapabilities.Requests.class, protocol.rpc.SemanticTokensClientCapabilities.Requests.Builder.class);
    }

    private int rangeCase_ = 0;
    private java.lang.Object range_;
    public enum RangeCase
        implements com.google.protobuf.Internal.EnumLite {
      ENABLE_RANGE(2),
      EMPTY(3),
      RANGE_NOT_SET(0);
      private final int value;
      private RangeCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RangeCase valueOf(int value) {
        return forNumber(value);
      }

      public static RangeCase forNumber(int value) {
        switch (value) {
          case 2: return ENABLE_RANGE;
          case 3: return EMPTY;
          case 0: return RANGE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public RangeCase
    getRangeCase() {
      return RangeCase.forNumber(
          rangeCase_);
    }

    private int fullCase_ = 0;
    private java.lang.Object full_;
    public enum FullCase
        implements com.google.protobuf.Internal.EnumLite {
      ENABLE_FULL(4),
      DELTA(5),
      FULL_NOT_SET(0);
      private final int value;
      private FullCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FullCase valueOf(int value) {
        return forNumber(value);
      }

      public static FullCase forNumber(int value) {
        switch (value) {
          case 4: return ENABLE_FULL;
          case 5: return DELTA;
          case 0: return FULL_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public FullCase
    getFullCase() {
      return FullCase.forNumber(
          fullCase_);
    }

    public static final int ENABLE_RANGE_FIELD_NUMBER = 2;
    /**
     * <code>bool enable_range = 2;</code>
     */
    public boolean getEnableRange() {
      if (rangeCase_ == 2) {
        return (java.lang.Boolean) range_;
      }
      return false;
    }

    public static final int EMPTY_FIELD_NUMBER = 3;
    /**
     * <code>.google.protobuf.NullValue empty = 3;</code>
     */
    public int getEmptyValue() {
      if (rangeCase_ == 3) {
        return (java.lang.Integer) range_;
      }
      return 0;
    }
    /**
     * <code>.google.protobuf.NullValue empty = 3;</code>
     */
    public com.google.protobuf.NullValue getEmpty() {
      if (rangeCase_ == 3) {
        com.google.protobuf.NullValue result = com.google.protobuf.NullValue.valueOf(
            (java.lang.Integer) range_);
        return result == null ? com.google.protobuf.NullValue.UNRECOGNIZED : result;
      }
      return com.google.protobuf.NullValue.NULL_VALUE;
    }

    public static final int ENABLE_FULL_FIELD_NUMBER = 4;
    /**
     * <code>bool enable_full = 4;</code>
     */
    public boolean getEnableFull() {
      if (fullCase_ == 4) {
        return (java.lang.Boolean) full_;
      }
      return false;
    }

    public static final int DELTA_FIELD_NUMBER = 5;
    /**
     * <code>bool delta = 5;</code>
     */
    public boolean getDelta() {
      if (fullCase_ == 5) {
        return (java.lang.Boolean) full_;
      }
      return false;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (rangeCase_ == 2) {
        output.writeBool(
            2, (boolean)((java.lang.Boolean) range_));
      }
      if (rangeCase_ == 3) {
        output.writeEnum(3, ((java.lang.Integer) range_));
      }
      if (fullCase_ == 4) {
        output.writeBool(
            4, (boolean)((java.lang.Boolean) full_));
      }
      if (fullCase_ == 5) {
        output.writeBool(
            5, (boolean)((java.lang.Boolean) full_));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (rangeCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              2, (boolean)((java.lang.Boolean) range_));
      }
      if (rangeCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, ((java.lang.Integer) range_));
      }
      if (fullCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              4, (boolean)((java.lang.Boolean) full_));
      }
      if (fullCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              5, (boolean)((java.lang.Boolean) full_));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof protocol.rpc.SemanticTokensClientCapabilities.Requests)) {
        return super.equals(obj);
      }
      protocol.rpc.SemanticTokensClientCapabilities.Requests other = (protocol.rpc.SemanticTokensClientCapabilities.Requests) obj;

      boolean result = true;
      result = result && getRangeCase().equals(
          other.getRangeCase());
      if (!result) return false;
      switch (rangeCase_) {
        case 2:
          result = result && (getEnableRange()
              == other.getEnableRange());
          break;
        case 3:
          result = result && getEmptyValue()
              == other.getEmptyValue();
          break;
        case 0:
        default:
      }
      result = result && getFullCase().equals(
          other.getFullCase());
      if (!result) return false;
      switch (fullCase_) {
        case 4:
          result = result && (getEnableFull()
              == other.getEnableFull());
          break;
        case 5:
          result = result && (getDelta()
              == other.getDelta());
          break;
        case 0:
        default:
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (rangeCase_) {
        case 2:
          hash = (37 * hash) + ENABLE_RANGE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getEnableRange());
          break;
        case 3:
          hash = (37 * hash) + EMPTY_FIELD_NUMBER;
          hash = (53 * hash) + getEmptyValue();
          break;
        case 0:
        default:
      }
      switch (fullCase_) {
        case 4:
          hash = (37 * hash) + ENABLE_FULL_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getEnableFull());
          break;
        case 5:
          hash = (37 * hash) + DELTA_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getDelta());
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static protocol.rpc.SemanticTokensClientCapabilities.Requests parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol.rpc.SemanticTokensClientCapabilities.Requests parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol.rpc.SemanticTokensClientCapabilities.Requests parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static protocol.rpc.SemanticTokensClientCapabilities.Requests parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static protocol.rpc.SemanticTokensClientCapabilities.Requests parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocol.rpc.SemanticTokensClientCapabilities.Requests parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocol.rpc.SemanticTokensClientCapabilities.Requests parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static protocol.rpc.SemanticTokensClientCapabilities.Requests parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static protocol.rpc.SemanticTokensClientCapabilities.Requests parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static protocol.rpc.SemanticTokensClientCapabilities.Requests parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(protocol.rpc.SemanticTokensClientCapabilities.Requests prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code protocol.rpc.SemanticTokensClientCapabilities.Requests}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:protocol.rpc.SemanticTokensClientCapabilities.Requests)
        protocol.rpc.SemanticTokensClientCapabilities.RequestsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokensClientCapabilities_Requests_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokensClientCapabilities_Requests_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                protocol.rpc.SemanticTokensClientCapabilities.Requests.class, protocol.rpc.SemanticTokensClientCapabilities.Requests.Builder.class);
      }

      // Construct using protocol.rpc.SemanticTokensClientCapabilities.Requests.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        rangeCase_ = 0;
        range_ = null;
        fullCase_ = 0;
        full_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokensClientCapabilities_Requests_descriptor;
      }

      public protocol.rpc.SemanticTokensClientCapabilities.Requests getDefaultInstanceForType() {
        return protocol.rpc.SemanticTokensClientCapabilities.Requests.getDefaultInstance();
      }

      public protocol.rpc.SemanticTokensClientCapabilities.Requests build() {
        protocol.rpc.SemanticTokensClientCapabilities.Requests result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public protocol.rpc.SemanticTokensClientCapabilities.Requests buildPartial() {
        protocol.rpc.SemanticTokensClientCapabilities.Requests result = new protocol.rpc.SemanticTokensClientCapabilities.Requests(this);
        if (rangeCase_ == 2) {
          result.range_ = range_;
        }
        if (rangeCase_ == 3) {
          result.range_ = range_;
        }
        if (fullCase_ == 4) {
          result.full_ = full_;
        }
        if (fullCase_ == 5) {
          result.full_ = full_;
        }
        result.rangeCase_ = rangeCase_;
        result.fullCase_ = fullCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof protocol.rpc.SemanticTokensClientCapabilities.Requests) {
          return mergeFrom((protocol.rpc.SemanticTokensClientCapabilities.Requests)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(protocol.rpc.SemanticTokensClientCapabilities.Requests other) {
        if (other == protocol.rpc.SemanticTokensClientCapabilities.Requests.getDefaultInstance()) return this;
        switch (other.getRangeCase()) {
          case ENABLE_RANGE: {
            setEnableRange(other.getEnableRange());
            break;
          }
          case EMPTY: {
            setEmptyValue(other.getEmptyValue());
            break;
          }
          case RANGE_NOT_SET: {
            break;
          }
        }
        switch (other.getFullCase()) {
          case ENABLE_FULL: {
            setEnableFull(other.getEnableFull());
            break;
          }
          case DELTA: {
            setDelta(other.getDelta());
            break;
          }
          case FULL_NOT_SET: {
            break;
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        protocol.rpc.SemanticTokensClientCapabilities.Requests parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (protocol.rpc.SemanticTokensClientCapabilities.Requests) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int rangeCase_ = 0;
      private java.lang.Object range_;
      public RangeCase
          getRangeCase() {
        return RangeCase.forNumber(
            rangeCase_);
      }

      public Builder clearRange() {
        rangeCase_ = 0;
        range_ = null;
        onChanged();
        return this;
      }

      private int fullCase_ = 0;
      private java.lang.Object full_;
      public FullCase
          getFullCase() {
        return FullCase.forNumber(
            fullCase_);
      }

      public Builder clearFull() {
        fullCase_ = 0;
        full_ = null;
        onChanged();
        return this;
      }


      /**
       * <code>bool enable_range = 2;</code>
       */
      public boolean getEnableRange() {
        if (rangeCase_ == 2) {
          return (java.lang.Boolean) range_;
        }
        return false;
      }
      /**
       * <code>bool enable_range = 2;</code>
       */
      public Builder setEnableRange(boolean value) {
        rangeCase_ = 2;
        range_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool enable_range = 2;</code>
       */
      public Builder clearEnableRange() {
        if (rangeCase_ == 2) {
          rangeCase_ = 0;
          range_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>.google.protobuf.NullValue empty = 3;</code>
       */
      public int getEmptyValue() {
        if (rangeCase_ == 3) {
          return ((java.lang.Integer) range_).intValue();
        }
        return 0;
      }
      /**
       * <code>.google.protobuf.NullValue empty = 3;</code>
       */
      public Builder setEmptyValue(int value) {
        rangeCase_ = 3;
        range_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.google.protobuf.NullValue empty = 3;</code>
       */
      public com.google.protobuf.NullValue getEmpty() {
        if (rangeCase_ == 3) {
          com.google.protobuf.NullValue result = com.google.protobuf.NullValue.valueOf(
              (java.lang.Integer) range_);
          return result == null ? com.google.protobuf.NullValue.UNRECOGNIZED : result;
        }
        return com.google.protobuf.NullValue.NULL_VALUE;
      }
      /**
       * <code>.google.protobuf.NullValue empty = 3;</code>
       */
      public Builder setEmpty(com.google.protobuf.NullValue value) {
        if (value == null) {
          throw new NullPointerException();
        }
        rangeCase_ = 3;
        range_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.google.protobuf.NullValue empty = 3;</code>
       */
      public Builder clearEmpty() {
        if (rangeCase_ == 3) {
          rangeCase_ = 0;
          range_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>bool enable_full = 4;</code>
       */
      public boolean getEnableFull() {
        if (fullCase_ == 4) {
          return (java.lang.Boolean) full_;
        }
        return false;
      }
      /**
       * <code>bool enable_full = 4;</code>
       */
      public Builder setEnableFull(boolean value) {
        fullCase_ = 4;
        full_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool enable_full = 4;</code>
       */
      public Builder clearEnableFull() {
        if (fullCase_ == 4) {
          fullCase_ = 0;
          full_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>bool delta = 5;</code>
       */
      public boolean getDelta() {
        if (fullCase_ == 5) {
          return (java.lang.Boolean) full_;
        }
        return false;
      }
      /**
       * <code>bool delta = 5;</code>
       */
      public Builder setDelta(boolean value) {
        fullCase_ = 5;
        full_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool delta = 5;</code>
       */
      public Builder clearDelta() {
        if (fullCase_ == 5) {
          fullCase_ = 0;
          full_ = null;
          onChanged();
        }
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:protocol.rpc.SemanticTokensClientCapabilities.Requests)
    }

    // @@protoc_insertion_point(class_scope:protocol.rpc.SemanticTokensClientCapabilities.Requests)
    private static final protocol.rpc.SemanticTokensClientCapabilities.Requests DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new protocol.rpc.SemanticTokensClientCapabilities.Requests();
    }

    public static protocol.rpc.SemanticTokensClientCapabilities.Requests getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Requests>
        PARSER = new com.google.protobuf.AbstractParser<Requests>() {
      public Requests parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Requests(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Requests> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Requests> getParserForType() {
      return PARSER;
    }

    public protocol.rpc.SemanticTokensClientCapabilities.Requests getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int DYNAMIC_REGISTRATION_FIELD_NUMBER = 1;
  private boolean dynamicRegistration_;
  /**
   * <pre>
   * Optional. Whether implementation supports dynamic registration. If this is set to `true`
   * the client supports the new
   * `([TextDocumentRegistrationOptions][TextDocumentRegistrationOptions] &amp;
   * [StaticRegistrationOptions][StaticRegistrationOptions])` return value for the corresponding
   * server capability as well.
   * </pre>
   *
   * <code>bool dynamic_registration = 1;</code>
   */
  public boolean getDynamicRegistration() {
    return dynamicRegistration_;
  }

  public static final int REQUESTS_FIELD_NUMBER = 2;
  private protocol.rpc.SemanticTokensClientCapabilities.Requests requests_;
  /**
   * <pre>
   * Which requests the client supports and might send to the server.
   * </pre>
   *
   * <code>.protocol.rpc.SemanticTokensClientCapabilities.Requests requests = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public boolean hasRequests() {
    return requests_ != null;
  }
  /**
   * <pre>
   * Which requests the client supports and might send to the server.
   * </pre>
   *
   * <code>.protocol.rpc.SemanticTokensClientCapabilities.Requests requests = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public protocol.rpc.SemanticTokensClientCapabilities.Requests getRequests() {
    return requests_ == null ? protocol.rpc.SemanticTokensClientCapabilities.Requests.getDefaultInstance() : requests_;
  }
  /**
   * <pre>
   * Which requests the client supports and might send to the server.
   * </pre>
   *
   * <code>.protocol.rpc.SemanticTokensClientCapabilities.Requests requests = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public protocol.rpc.SemanticTokensClientCapabilities.RequestsOrBuilder getRequestsOrBuilder() {
    return getRequests();
  }

  public static final int TOKEN_TYPES_FIELD_NUMBER = 3;
  private java.util.List<java.lang.Integer> tokenTypes_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, protocol.rpc.SemanticTokenTypes> tokenTypes_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, protocol.rpc.SemanticTokenTypes>() {
            public protocol.rpc.SemanticTokenTypes convert(java.lang.Integer from) {
              protocol.rpc.SemanticTokenTypes result = protocol.rpc.SemanticTokenTypes.valueOf(from);
              return result == null ? protocol.rpc.SemanticTokenTypes.UNRECOGNIZED : result;
            }
          };
  /**
   * <pre>
   * The token types that the client supports.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public java.util.List<protocol.rpc.SemanticTokenTypes> getTokenTypesList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, protocol.rpc.SemanticTokenTypes>(tokenTypes_, tokenTypes_converter_);
  }
  /**
   * <pre>
   * The token types that the client supports.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public int getTokenTypesCount() {
    return tokenTypes_.size();
  }
  /**
   * <pre>
   * The token types that the client supports.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public protocol.rpc.SemanticTokenTypes getTokenTypes(int index) {
    return tokenTypes_converter_.convert(tokenTypes_.get(index));
  }
  /**
   * <pre>
   * The token types that the client supports.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public java.util.List<java.lang.Integer>
  getTokenTypesValueList() {
    return tokenTypes_;
  }
  /**
   * <pre>
   * The token types that the client supports.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public int getTokenTypesValue(int index) {
    return tokenTypes_.get(index);
  }
  private int tokenTypesMemoizedSerializedSize;

  public static final int TOKEN_MODIFIERS_FIELD_NUMBER = 4;
  private java.util.List<java.lang.Integer> tokenModifiers_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, protocol.rpc.SemanticTokenModifiers> tokenModifiers_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, protocol.rpc.SemanticTokenModifiers>() {
            public protocol.rpc.SemanticTokenModifiers convert(java.lang.Integer from) {
              protocol.rpc.SemanticTokenModifiers result = protocol.rpc.SemanticTokenModifiers.valueOf(from);
              return result == null ? protocol.rpc.SemanticTokenModifiers.UNRECOGNIZED : result;
            }
          };
  /**
   * <pre>
   * The token modifiers that the client supports.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 4 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public java.util.List<protocol.rpc.SemanticTokenModifiers> getTokenModifiersList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, protocol.rpc.SemanticTokenModifiers>(tokenModifiers_, tokenModifiers_converter_);
  }
  /**
   * <pre>
   * The token modifiers that the client supports.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 4 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public int getTokenModifiersCount() {
    return tokenModifiers_.size();
  }
  /**
   * <pre>
   * The token modifiers that the client supports.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 4 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public protocol.rpc.SemanticTokenModifiers getTokenModifiers(int index) {
    return tokenModifiers_converter_.convert(tokenModifiers_.get(index));
  }
  /**
   * <pre>
   * The token modifiers that the client supports.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 4 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public java.util.List<java.lang.Integer>
  getTokenModifiersValueList() {
    return tokenModifiers_;
  }
  /**
   * <pre>
   * The token modifiers that the client supports.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 4 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public int getTokenModifiersValue(int index) {
    return tokenModifiers_.get(index);
  }
  private int tokenModifiersMemoizedSerializedSize;

  public static final int FORMATS_FIELD_NUMBER = 5;
  private java.util.List<java.lang.Integer> formats_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, protocol.rpc.TokenFormat> formats_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, protocol.rpc.TokenFormat>() {
            public protocol.rpc.TokenFormat convert(java.lang.Integer from) {
              protocol.rpc.TokenFormat result = protocol.rpc.TokenFormat.valueOf(from);
              return result == null ? protocol.rpc.TokenFormat.UNRECOGNIZED : result;
            }
          };
  /**
   * <pre>
   * The formats the clients supports.
   * </pre>
   *
   * <code>repeated .protocol.rpc.TokenFormat formats = 5 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public java.util.List<protocol.rpc.TokenFormat> getFormatsList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, protocol.rpc.TokenFormat>(formats_, formats_converter_);
  }
  /**
   * <pre>
   * The formats the clients supports.
   * </pre>
   *
   * <code>repeated .protocol.rpc.TokenFormat formats = 5 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public int getFormatsCount() {
    return formats_.size();
  }
  /**
   * <pre>
   * The formats the clients supports.
   * </pre>
   *
   * <code>repeated .protocol.rpc.TokenFormat formats = 5 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public protocol.rpc.TokenFormat getFormats(int index) {
    return formats_converter_.convert(formats_.get(index));
  }
  /**
   * <pre>
   * The formats the clients supports.
   * </pre>
   *
   * <code>repeated .protocol.rpc.TokenFormat formats = 5 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public java.util.List<java.lang.Integer>
  getFormatsValueList() {
    return formats_;
  }
  /**
   * <pre>
   * The formats the clients supports.
   * </pre>
   *
   * <code>repeated .protocol.rpc.TokenFormat formats = 5 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public int getFormatsValue(int index) {
    return formats_.get(index);
  }
  private int formatsMemoizedSerializedSize;

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (dynamicRegistration_ != false) {
      output.writeBool(1, dynamicRegistration_);
    }
    if (requests_ != null) {
      output.writeMessage(2, getRequests());
    }
    if (getTokenTypesList().size() > 0) {
      output.writeUInt32NoTag(26);
      output.writeUInt32NoTag(tokenTypesMemoizedSerializedSize);
    }
    for (int i = 0; i < tokenTypes_.size(); i++) {
      output.writeEnumNoTag(tokenTypes_.get(i));
    }
    if (getTokenModifiersList().size() > 0) {
      output.writeUInt32NoTag(34);
      output.writeUInt32NoTag(tokenModifiersMemoizedSerializedSize);
    }
    for (int i = 0; i < tokenModifiers_.size(); i++) {
      output.writeEnumNoTag(tokenModifiers_.get(i));
    }
    if (getFormatsList().size() > 0) {
      output.writeUInt32NoTag(42);
      output.writeUInt32NoTag(formatsMemoizedSerializedSize);
    }
    for (int i = 0; i < formats_.size(); i++) {
      output.writeEnumNoTag(formats_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (dynamicRegistration_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, dynamicRegistration_);
    }
    if (requests_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getRequests());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < tokenTypes_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(tokenTypes_.get(i));
      }
      size += dataSize;
      if (!getTokenTypesList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }tokenTypesMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < tokenModifiers_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(tokenModifiers_.get(i));
      }
      size += dataSize;
      if (!getTokenModifiersList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }tokenModifiersMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < formats_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(formats_.get(i));
      }
      size += dataSize;
      if (!getFormatsList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }formatsMemoizedSerializedSize = dataSize;
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof protocol.rpc.SemanticTokensClientCapabilities)) {
      return super.equals(obj);
    }
    protocol.rpc.SemanticTokensClientCapabilities other = (protocol.rpc.SemanticTokensClientCapabilities) obj;

    boolean result = true;
    result = result && (getDynamicRegistration()
        == other.getDynamicRegistration());
    result = result && (hasRequests() == other.hasRequests());
    if (hasRequests()) {
      result = result && getRequests()
          .equals(other.getRequests());
    }
    result = result && tokenTypes_.equals(other.tokenTypes_);
    result = result && tokenModifiers_.equals(other.tokenModifiers_);
    result = result && formats_.equals(other.formats_);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + DYNAMIC_REGISTRATION_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getDynamicRegistration());
    if (hasRequests()) {
      hash = (37 * hash) + REQUESTS_FIELD_NUMBER;
      hash = (53 * hash) + getRequests().hashCode();
    }
    if (getTokenTypesCount() > 0) {
      hash = (37 * hash) + TOKEN_TYPES_FIELD_NUMBER;
      hash = (53 * hash) + tokenTypes_.hashCode();
    }
    if (getTokenModifiersCount() > 0) {
      hash = (37 * hash) + TOKEN_MODIFIERS_FIELD_NUMBER;
      hash = (53 * hash) + tokenModifiers_.hashCode();
    }
    if (getFormatsCount() > 0) {
      hash = (37 * hash) + FORMATS_FIELD_NUMBER;
      hash = (53 * hash) + formats_.hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static protocol.rpc.SemanticTokensClientCapabilities parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.SemanticTokensClientCapabilities parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.SemanticTokensClientCapabilities parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.SemanticTokensClientCapabilities parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.SemanticTokensClientCapabilities parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.SemanticTokensClientCapabilities parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.SemanticTokensClientCapabilities parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static protocol.rpc.SemanticTokensClientCapabilities parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.SemanticTokensClientCapabilities parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.SemanticTokensClientCapabilities parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(protocol.rpc.SemanticTokensClientCapabilities prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * SemanticTokensClientCapabilities represents a client capabilities of
   * `textDocument/semanticTokens/&#42;` request.
   * &#64;since 3.16.0
   * </pre>
   *
   * Protobuf type {@code protocol.rpc.SemanticTokensClientCapabilities}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:protocol.rpc.SemanticTokensClientCapabilities)
      protocol.rpc.SemanticTokensClientCapabilitiesOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokensClientCapabilities_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokensClientCapabilities_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol.rpc.SemanticTokensClientCapabilities.class, protocol.rpc.SemanticTokensClientCapabilities.Builder.class);
    }

    // Construct using protocol.rpc.SemanticTokensClientCapabilities.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      dynamicRegistration_ = false;

      if (requestsBuilder_ == null) {
        requests_ = null;
      } else {
        requests_ = null;
        requestsBuilder_ = null;
      }
      tokenTypes_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      tokenModifiers_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000008);
      formats_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokensClientCapabilities_descriptor;
    }

    public protocol.rpc.SemanticTokensClientCapabilities getDefaultInstanceForType() {
      return protocol.rpc.SemanticTokensClientCapabilities.getDefaultInstance();
    }

    public protocol.rpc.SemanticTokensClientCapabilities build() {
      protocol.rpc.SemanticTokensClientCapabilities result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public protocol.rpc.SemanticTokensClientCapabilities buildPartial() {
      protocol.rpc.SemanticTokensClientCapabilities result = new protocol.rpc.SemanticTokensClientCapabilities(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.dynamicRegistration_ = dynamicRegistration_;
      if (requestsBuilder_ == null) {
        result.requests_ = requests_;
      } else {
        result.requests_ = requestsBuilder_.build();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        tokenTypes_ = java.util.Collections.unmodifiableList(tokenTypes_);
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.tokenTypes_ = tokenTypes_;
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        tokenModifiers_ = java.util.Collections.unmodifiableList(tokenModifiers_);
        bitField0_ = (bitField0_ & ~0x00000008);
      }
      result.tokenModifiers_ = tokenModifiers_;
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        formats_ = java.util.Collections.unmodifiableList(formats_);
        bitField0_ = (bitField0_ & ~0x00000010);
      }
      result.formats_ = formats_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof protocol.rpc.SemanticTokensClientCapabilities) {
        return mergeFrom((protocol.rpc.SemanticTokensClientCapabilities)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(protocol.rpc.SemanticTokensClientCapabilities other) {
      if (other == protocol.rpc.SemanticTokensClientCapabilities.getDefaultInstance()) return this;
      if (other.getDynamicRegistration() != false) {
        setDynamicRegistration(other.getDynamicRegistration());
      }
      if (other.hasRequests()) {
        mergeRequests(other.getRequests());
      }
      if (!other.tokenTypes_.isEmpty()) {
        if (tokenTypes_.isEmpty()) {
          tokenTypes_ = other.tokenTypes_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureTokenTypesIsMutable();
          tokenTypes_.addAll(other.tokenTypes_);
        }
        onChanged();
      }
      if (!other.tokenModifiers_.isEmpty()) {
        if (tokenModifiers_.isEmpty()) {
          tokenModifiers_ = other.tokenModifiers_;
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ensureTokenModifiersIsMutable();
          tokenModifiers_.addAll(other.tokenModifiers_);
        }
        onChanged();
      }
      if (!other.formats_.isEmpty()) {
        if (formats_.isEmpty()) {
          formats_ = other.formats_;
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          ensureFormatsIsMutable();
          formats_.addAll(other.formats_);
        }
        onChanged();
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      protocol.rpc.SemanticTokensClientCapabilities parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (protocol.rpc.SemanticTokensClientCapabilities) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private boolean dynamicRegistration_ ;
    /**
     * <pre>
     * Optional. Whether implementation supports dynamic registration. If this is set to `true`
     * the client supports the new
     * `([TextDocumentRegistrationOptions][TextDocumentRegistrationOptions] &amp;
     * [StaticRegistrationOptions][StaticRegistrationOptions])` return value for the corresponding
     * server capability as well.
     * </pre>
     *
     * <code>bool dynamic_registration = 1;</code>
     */
    public boolean getDynamicRegistration() {
      return dynamicRegistration_;
    }
    /**
     * <pre>
     * Optional. Whether implementation supports dynamic registration. If this is set to `true`
     * the client supports the new
     * `([TextDocumentRegistrationOptions][TextDocumentRegistrationOptions] &amp;
     * [StaticRegistrationOptions][StaticRegistrationOptions])` return value for the corresponding
     * server capability as well.
     * </pre>
     *
     * <code>bool dynamic_registration = 1;</code>
     */
    public Builder setDynamicRegistration(boolean value) {
      
      dynamicRegistration_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. Whether implementation supports dynamic registration. If this is set to `true`
     * the client supports the new
     * `([TextDocumentRegistrationOptions][TextDocumentRegistrationOptions] &amp;
     * [StaticRegistrationOptions][StaticRegistrationOptions])` return value for the corresponding
     * server capability as well.
     * </pre>
     *
     * <code>bool dynamic_registration = 1;</code>
     */
    public Builder clearDynamicRegistration() {
      
      dynamicRegistration_ = false;
      onChanged();
      return this;
    }

    private protocol.rpc.SemanticTokensClientCapabilities.Requests requests_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        protocol.rpc.SemanticTokensClientCapabilities.Requests, protocol.rpc.SemanticTokensClientCapabilities.Requests.Builder, protocol.rpc.SemanticTokensClientCapabilities.RequestsOrBuilder> requestsBuilder_;
    /**
     * <pre>
     * Which requests the client supports and might send to the server.
     * </pre>
     *
     * <code>.protocol.rpc.SemanticTokensClientCapabilities.Requests requests = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public boolean hasRequests() {
      return requestsBuilder_ != null || requests_ != null;
    }
    /**
     * <pre>
     * Which requests the client supports and might send to the server.
     * </pre>
     *
     * <code>.protocol.rpc.SemanticTokensClientCapabilities.Requests requests = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.rpc.SemanticTokensClientCapabilities.Requests getRequests() {
      if (requestsBuilder_ == null) {
        return requests_ == null ? protocol.rpc.SemanticTokensClientCapabilities.Requests.getDefaultInstance() : requests_;
      } else {
        return requestsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Which requests the client supports and might send to the server.
     * </pre>
     *
     * <code>.protocol.rpc.SemanticTokensClientCapabilities.Requests requests = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setRequests(protocol.rpc.SemanticTokensClientCapabilities.Requests value) {
      if (requestsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        requests_ = value;
        onChanged();
      } else {
        requestsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Which requests the client supports and might send to the server.
     * </pre>
     *
     * <code>.protocol.rpc.SemanticTokensClientCapabilities.Requests requests = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setRequests(
        protocol.rpc.SemanticTokensClientCapabilities.Requests.Builder builderForValue) {
      if (requestsBuilder_ == null) {
        requests_ = builderForValue.build();
        onChanged();
      } else {
        requestsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Which requests the client supports and might send to the server.
     * </pre>
     *
     * <code>.protocol.rpc.SemanticTokensClientCapabilities.Requests requests = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder mergeRequests(protocol.rpc.SemanticTokensClientCapabilities.Requests value) {
      if (requestsBuilder_ == null) {
        if (requests_ != null) {
          requests_ =
            protocol.rpc.SemanticTokensClientCapabilities.Requests.newBuilder(requests_).mergeFrom(value).buildPartial();
        } else {
          requests_ = value;
        }
        onChanged();
      } else {
        requestsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Which requests the client supports and might send to the server.
     * </pre>
     *
     * <code>.protocol.rpc.SemanticTokensClientCapabilities.Requests requests = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearRequests() {
      if (requestsBuilder_ == null) {
        requests_ = null;
        onChanged();
      } else {
        requests_ = null;
        requestsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Which requests the client supports and might send to the server.
     * </pre>
     *
     * <code>.protocol.rpc.SemanticTokensClientCapabilities.Requests requests = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.rpc.SemanticTokensClientCapabilities.Requests.Builder getRequestsBuilder() {
      
      onChanged();
      return getRequestsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Which requests the client supports and might send to the server.
     * </pre>
     *
     * <code>.protocol.rpc.SemanticTokensClientCapabilities.Requests requests = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.rpc.SemanticTokensClientCapabilities.RequestsOrBuilder getRequestsOrBuilder() {
      if (requestsBuilder_ != null) {
        return requestsBuilder_.getMessageOrBuilder();
      } else {
        return requests_ == null ?
            protocol.rpc.SemanticTokensClientCapabilities.Requests.getDefaultInstance() : requests_;
      }
    }
    /**
     * <pre>
     * Which requests the client supports and might send to the server.
     * </pre>
     *
     * <code>.protocol.rpc.SemanticTokensClientCapabilities.Requests requests = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        protocol.rpc.SemanticTokensClientCapabilities.Requests, protocol.rpc.SemanticTokensClientCapabilities.Requests.Builder, protocol.rpc.SemanticTokensClientCapabilities.RequestsOrBuilder> 
        getRequestsFieldBuilder() {
      if (requestsBuilder_ == null) {
        requestsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            protocol.rpc.SemanticTokensClientCapabilities.Requests, protocol.rpc.SemanticTokensClientCapabilities.Requests.Builder, protocol.rpc.SemanticTokensClientCapabilities.RequestsOrBuilder>(
                getRequests(),
                getParentForChildren(),
                isClean());
        requests_ = null;
      }
      return requestsBuilder_;
    }

    private java.util.List<java.lang.Integer> tokenTypes_ =
      java.util.Collections.emptyList();
    private void ensureTokenTypesIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        tokenTypes_ = new java.util.ArrayList<java.lang.Integer>(tokenTypes_);
        bitField0_ |= 0x00000004;
      }
    }
    /**
     * <pre>
     * The token types that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<protocol.rpc.SemanticTokenTypes> getTokenTypesList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, protocol.rpc.SemanticTokenTypes>(tokenTypes_, tokenTypes_converter_);
    }
    /**
     * <pre>
     * The token types that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public int getTokenTypesCount() {
      return tokenTypes_.size();
    }
    /**
     * <pre>
     * The token types that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.rpc.SemanticTokenTypes getTokenTypes(int index) {
      return tokenTypes_converter_.convert(tokenTypes_.get(index));
    }
    /**
     * <pre>
     * The token types that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setTokenTypes(
        int index, protocol.rpc.SemanticTokenTypes value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTokenTypesIsMutable();
      tokenTypes_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token types that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addTokenTypes(protocol.rpc.SemanticTokenTypes value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTokenTypesIsMutable();
      tokenTypes_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token types that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addAllTokenTypes(
        java.lang.Iterable<? extends protocol.rpc.SemanticTokenTypes> values) {
      ensureTokenTypesIsMutable();
      for (protocol.rpc.SemanticTokenTypes value : values) {
        tokenTypes_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token types that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearTokenTypes() {
      tokenTypes_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token types that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<java.lang.Integer>
    getTokenTypesValueList() {
      return java.util.Collections.unmodifiableList(tokenTypes_);
    }
    /**
     * <pre>
     * The token types that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public int getTokenTypesValue(int index) {
      return tokenTypes_.get(index);
    }
    /**
     * <pre>
     * The token types that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setTokenTypesValue(
        int index, int value) {
      ensureTokenTypesIsMutable();
      tokenTypes_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token types that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addTokenTypesValue(int value) {
      ensureTokenTypesIsMutable();
      tokenTypes_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token types that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addAllTokenTypesValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureTokenTypesIsMutable();
      for (int value : values) {
        tokenTypes_.add(value);
      }
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Integer> tokenModifiers_ =
      java.util.Collections.emptyList();
    private void ensureTokenModifiersIsMutable() {
      if (!((bitField0_ & 0x00000008) == 0x00000008)) {
        tokenModifiers_ = new java.util.ArrayList<java.lang.Integer>(tokenModifiers_);
        bitField0_ |= 0x00000008;
      }
    }
    /**
     * <pre>
     * The token modifiers that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<protocol.rpc.SemanticTokenModifiers> getTokenModifiersList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, protocol.rpc.SemanticTokenModifiers>(tokenModifiers_, tokenModifiers_converter_);
    }
    /**
     * <pre>
     * The token modifiers that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public int getTokenModifiersCount() {
      return tokenModifiers_.size();
    }
    /**
     * <pre>
     * The token modifiers that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.rpc.SemanticTokenModifiers getTokenModifiers(int index) {
      return tokenModifiers_converter_.convert(tokenModifiers_.get(index));
    }
    /**
     * <pre>
     * The token modifiers that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setTokenModifiers(
        int index, protocol.rpc.SemanticTokenModifiers value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTokenModifiersIsMutable();
      tokenModifiers_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token modifiers that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addTokenModifiers(protocol.rpc.SemanticTokenModifiers value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTokenModifiersIsMutable();
      tokenModifiers_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token modifiers that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addAllTokenModifiers(
        java.lang.Iterable<? extends protocol.rpc.SemanticTokenModifiers> values) {
      ensureTokenModifiersIsMutable();
      for (protocol.rpc.SemanticTokenModifiers value : values) {
        tokenModifiers_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token modifiers that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearTokenModifiers() {
      tokenModifiers_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token modifiers that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<java.lang.Integer>
    getTokenModifiersValueList() {
      return java.util.Collections.unmodifiableList(tokenModifiers_);
    }
    /**
     * <pre>
     * The token modifiers that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public int getTokenModifiersValue(int index) {
      return tokenModifiers_.get(index);
    }
    /**
     * <pre>
     * The token modifiers that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setTokenModifiersValue(
        int index, int value) {
      ensureTokenModifiersIsMutable();
      tokenModifiers_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token modifiers that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addTokenModifiersValue(int value) {
      ensureTokenModifiersIsMutable();
      tokenModifiers_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token modifiers that the client supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addAllTokenModifiersValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureTokenModifiersIsMutable();
      for (int value : values) {
        tokenModifiers_.add(value);
      }
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Integer> formats_ =
      java.util.Collections.emptyList();
    private void ensureFormatsIsMutable() {
      if (!((bitField0_ & 0x00000010) == 0x00000010)) {
        formats_ = new java.util.ArrayList<java.lang.Integer>(formats_);
        bitField0_ |= 0x00000010;
      }
    }
    /**
     * <pre>
     * The formats the clients supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TokenFormat formats = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<protocol.rpc.TokenFormat> getFormatsList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, protocol.rpc.TokenFormat>(formats_, formats_converter_);
    }
    /**
     * <pre>
     * The formats the clients supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TokenFormat formats = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public int getFormatsCount() {
      return formats_.size();
    }
    /**
     * <pre>
     * The formats the clients supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TokenFormat formats = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.rpc.TokenFormat getFormats(int index) {
      return formats_converter_.convert(formats_.get(index));
    }
    /**
     * <pre>
     * The formats the clients supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TokenFormat formats = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setFormats(
        int index, protocol.rpc.TokenFormat value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureFormatsIsMutable();
      formats_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The formats the clients supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TokenFormat formats = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addFormats(protocol.rpc.TokenFormat value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureFormatsIsMutable();
      formats_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The formats the clients supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TokenFormat formats = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addAllFormats(
        java.lang.Iterable<? extends protocol.rpc.TokenFormat> values) {
      ensureFormatsIsMutable();
      for (protocol.rpc.TokenFormat value : values) {
        formats_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The formats the clients supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TokenFormat formats = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearFormats() {
      formats_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The formats the clients supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TokenFormat formats = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<java.lang.Integer>
    getFormatsValueList() {
      return java.util.Collections.unmodifiableList(formats_);
    }
    /**
     * <pre>
     * The formats the clients supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TokenFormat formats = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public int getFormatsValue(int index) {
      return formats_.get(index);
    }
    /**
     * <pre>
     * The formats the clients supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TokenFormat formats = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setFormatsValue(
        int index, int value) {
      ensureFormatsIsMutable();
      formats_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The formats the clients supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TokenFormat formats = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addFormatsValue(int value) {
      ensureFormatsIsMutable();
      formats_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The formats the clients supports.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TokenFormat formats = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addAllFormatsValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureFormatsIsMutable();
      for (int value : values) {
        formats_.add(value);
      }
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:protocol.rpc.SemanticTokensClientCapabilities)
  }

  // @@protoc_insertion_point(class_scope:protocol.rpc.SemanticTokensClientCapabilities)
  private static final protocol.rpc.SemanticTokensClientCapabilities DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new protocol.rpc.SemanticTokensClientCapabilities();
  }

  public static protocol.rpc.SemanticTokensClientCapabilities getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SemanticTokensClientCapabilities>
      PARSER = new com.google.protobuf.AbstractParser<SemanticTokensClientCapabilities>() {
    public SemanticTokensClientCapabilities parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new SemanticTokensClientCapabilities(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SemanticTokensClientCapabilities> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SemanticTokensClientCapabilities> getParserForType() {
    return PARSER;
  }

  public protocol.rpc.SemanticTokensClientCapabilities getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

