// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

/**
 * <pre>
 * SemanticTokenModifiers represents a semantic token modifiers.
 * (-- api-linter: core::0192::only-leading-comments=disabled --)
 * </pre>
 *
 * Protobuf enum {@code protocol.rpc.SemanticTokenModifiers}
 */
public enum SemanticTokenModifiers
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Conventional default for enums. Do not use this.
   * </pre>
   *
   * <code>SEMANTIC_TOKEN_MODIFIERS_UNSPECIFIED = 0;</code>
   */
  SEMANTIC_TOKEN_MODIFIERS_UNSPECIFIED(0),
  /**
   * <pre>
   * 'declaration',
   * </pre>
   *
   * <code>DECLARATION = 1;</code>
   */
  DECLARATION(1),
  /**
   * <pre>
   * 'definition',
   * </pre>
   *
   * <code>DEFINITION = 2;</code>
   */
  DEFINITION(2),
  /**
   * <pre>
   *  'readonly',
   * </pre>
   *
   * <code>READONLY = 3;</code>
   */
  READONLY(3),
  /**
   * <pre>
   *  'static',
   * </pre>
   *
   * <code>STATIC = 4;</code>
   */
  STATIC(4),
  /**
   * <pre>
   *  'deprecated',
   * </pre>
   *
   * <code>DEPRECATED = 5;</code>
   */
  DEPRECATED(5),
  /**
   * <pre>
   *  'abstract',
   * </pre>
   *
   * <code>ABSTRACT = 6;</code>
   */
  ABSTRACT(6),
  /**
   * <pre>
   *  'async',
   * </pre>
   *
   * <code>ASYNC = 7;</code>
   */
  ASYNC(7),
  /**
   * <pre>
   *  'modification',
   * </pre>
   *
   * <code>MODIFICATION = 8;</code>
   */
  MODIFICATION(8),
  /**
   * <pre>
   *  'documentation',
   * </pre>
   *
   * <code>DOCUMENTATION = 9;</code>
   */
  DOCUMENTATION(9),
  /**
   * <pre>
   *  'defaultLibrary'
   * </pre>
   *
   * <code>DEFAULT_LIBRARY = 10;</code>
   */
  DEFAULT_LIBRARY(10),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Conventional default for enums. Do not use this.
   * </pre>
   *
   * <code>SEMANTIC_TOKEN_MODIFIERS_UNSPECIFIED = 0;</code>
   */
  public static final int SEMANTIC_TOKEN_MODIFIERS_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * 'declaration',
   * </pre>
   *
   * <code>DECLARATION = 1;</code>
   */
  public static final int DECLARATION_VALUE = 1;
  /**
   * <pre>
   * 'definition',
   * </pre>
   *
   * <code>DEFINITION = 2;</code>
   */
  public static final int DEFINITION_VALUE = 2;
  /**
   * <pre>
   *  'readonly',
   * </pre>
   *
   * <code>READONLY = 3;</code>
   */
  public static final int READONLY_VALUE = 3;
  /**
   * <pre>
   *  'static',
   * </pre>
   *
   * <code>STATIC = 4;</code>
   */
  public static final int STATIC_VALUE = 4;
  /**
   * <pre>
   *  'deprecated',
   * </pre>
   *
   * <code>DEPRECATED = 5;</code>
   */
  public static final int DEPRECATED_VALUE = 5;
  /**
   * <pre>
   *  'abstract',
   * </pre>
   *
   * <code>ABSTRACT = 6;</code>
   */
  public static final int ABSTRACT_VALUE = 6;
  /**
   * <pre>
   *  'async',
   * </pre>
   *
   * <code>ASYNC = 7;</code>
   */
  public static final int ASYNC_VALUE = 7;
  /**
   * <pre>
   *  'modification',
   * </pre>
   *
   * <code>MODIFICATION = 8;</code>
   */
  public static final int MODIFICATION_VALUE = 8;
  /**
   * <pre>
   *  'documentation',
   * </pre>
   *
   * <code>DOCUMENTATION = 9;</code>
   */
  public static final int DOCUMENTATION_VALUE = 9;
  /**
   * <pre>
   *  'defaultLibrary'
   * </pre>
   *
   * <code>DEFAULT_LIBRARY = 10;</code>
   */
  public static final int DEFAULT_LIBRARY_VALUE = 10;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SemanticTokenModifiers valueOf(int value) {
    return forNumber(value);
  }

  public static SemanticTokenModifiers forNumber(int value) {
    switch (value) {
      case 0: return SEMANTIC_TOKEN_MODIFIERS_UNSPECIFIED;
      case 1: return DECLARATION;
      case 2: return DEFINITION;
      case 3: return READONLY;
      case 4: return STATIC;
      case 5: return DEPRECATED;
      case 6: return ABSTRACT;
      case 7: return ASYNC;
      case 8: return MODIFICATION;
      case 9: return DOCUMENTATION;
      case 10: return DEFAULT_LIBRARY;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SemanticTokenModifiers>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SemanticTokenModifiers> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SemanticTokenModifiers>() {
          public SemanticTokenModifiers findValueByNumber(int number) {
            return SemanticTokenModifiers.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return protocol.rpc.RpcProto.getDescriptor().getEnumTypes().get(12);
  }

  private static final SemanticTokenModifiers[] VALUES = values();

  public static SemanticTokenModifiers valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SemanticTokenModifiers(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:protocol.rpc.SemanticTokenModifiers)
}

