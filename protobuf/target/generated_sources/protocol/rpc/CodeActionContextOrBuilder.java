// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

public interface CodeActionContextOrBuilder extends
    // @@protoc_insertion_point(interface_extends:protocol.rpc.CodeActionContext)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * An array of diagnostics known on the client side overlapping the range provided to the
   * `textDocument/codeAction` request. They are provided so that the server knows which
   * errors are currently presented to the user for the given range. There is no guarantee
   * that these accurately reflect the error state of the resource. The primary parameter
   * to compute code actions is the provided range.
   * </pre>
   *
   * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  java.util.List<protocol.Diagnostic> 
      getDiagnosticsList();
  /**
   * <pre>
   * An array of diagnostics known on the client side overlapping the range provided to the
   * `textDocument/codeAction` request. They are provided so that the server knows which
   * errors are currently presented to the user for the given range. There is no guarantee
   * that these accurately reflect the error state of the resource. The primary parameter
   * to compute code actions is the provided range.
   * </pre>
   *
   * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  protocol.Diagnostic getDiagnostics(int index);
  /**
   * <pre>
   * An array of diagnostics known on the client side overlapping the range provided to the
   * `textDocument/codeAction` request. They are provided so that the server knows which
   * errors are currently presented to the user for the given range. There is no guarantee
   * that these accurately reflect the error state of the resource. The primary parameter
   * to compute code actions is the provided range.
   * </pre>
   *
   * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  int getDiagnosticsCount();
  /**
   * <pre>
   * An array of diagnostics known on the client side overlapping the range provided to the
   * `textDocument/codeAction` request. They are provided so that the server knows which
   * errors are currently presented to the user for the given range. There is no guarantee
   * that these accurately reflect the error state of the resource. The primary parameter
   * to compute code actions is the provided range.
   * </pre>
   *
   * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  java.util.List<? extends protocol.DiagnosticOrBuilder> 
      getDiagnosticsOrBuilderList();
  /**
   * <pre>
   * An array of diagnostics known on the client side overlapping the range provided to the
   * `textDocument/codeAction` request. They are provided so that the server knows which
   * errors are currently presented to the user for the given range. There is no guarantee
   * that these accurately reflect the error state of the resource. The primary parameter
   * to compute code actions is the provided range.
   * </pre>
   *
   * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  protocol.DiagnosticOrBuilder getDiagnosticsOrBuilder(
      int index);

  /**
   * <pre>
   * Requested kind of actions to return.
   * Actions not of this kind are filtered out by the client before being shown. So servers
   * can omit computing them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
   */
  java.util.List<protocol.rpc.CodeActionKind> getOnlyList();
  /**
   * <pre>
   * Requested kind of actions to return.
   * Actions not of this kind are filtered out by the client before being shown. So servers
   * can omit computing them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
   */
  int getOnlyCount();
  /**
   * <pre>
   * Requested kind of actions to return.
   * Actions not of this kind are filtered out by the client before being shown. So servers
   * can omit computing them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
   */
  protocol.rpc.CodeActionKind getOnly(int index);
  /**
   * <pre>
   * Requested kind of actions to return.
   * Actions not of this kind are filtered out by the client before being shown. So servers
   * can omit computing them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
   */
  java.util.List<java.lang.Integer>
  getOnlyValueList();
  /**
   * <pre>
   * Requested kind of actions to return.
   * Actions not of this kind are filtered out by the client before being shown. So servers
   * can omit computing them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
   */
  int getOnlyValue(int index);
}
