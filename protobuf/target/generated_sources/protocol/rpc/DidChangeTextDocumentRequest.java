// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

/**
 * <pre>
 * DidChangeTextDocumentRequest is the parameters of a `textDocument/didChange` notification.
 * </pre>
 *
 * Protobuf type {@code protocol.rpc.DidChangeTextDocumentRequest}
 */
public  final class DidChangeTextDocumentRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:protocol.rpc.DidChangeTextDocumentRequest)
    DidChangeTextDocumentRequestOrBuilder {
  // Use DidChangeTextDocumentRequest.newBuilder() to construct.
  private DidChangeTextDocumentRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DidChangeTextDocumentRequest() {
    contentChanges_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private DidChangeTextDocumentRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            protocol.VersionedTextDocumentIdentifier.Builder subBuilder = null;
            if (textDocument_ != null) {
              subBuilder = textDocument_.toBuilder();
            }
            textDocument_ = input.readMessage(protocol.VersionedTextDocumentIdentifier.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(textDocument_);
              textDocument_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              contentChanges_ = new java.util.ArrayList<protocol.rpc.TextDocumentContentChangeEvent>();
              mutable_bitField0_ |= 0x00000002;
            }
            contentChanges_.add(
                input.readMessage(protocol.rpc.TextDocumentContentChangeEvent.parser(), extensionRegistry));
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        contentChanges_ = java.util.Collections.unmodifiableList(contentChanges_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_DidChangeTextDocumentRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_DidChangeTextDocumentRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            protocol.rpc.DidChangeTextDocumentRequest.class, protocol.rpc.DidChangeTextDocumentRequest.Builder.class);
  }

  private int bitField0_;
  public static final int TEXT_DOCUMENT_FIELD_NUMBER = 1;
  private protocol.VersionedTextDocumentIdentifier textDocument_;
  /**
   * <pre>
   * The document that did change. The version number points
   * to the version after all provided content changes have
   * been applied.
   * </pre>
   *
   * <code>.protocol.VersionedTextDocumentIdentifier text_document = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public boolean hasTextDocument() {
    return textDocument_ != null;
  }
  /**
   * <pre>
   * The document that did change. The version number points
   * to the version after all provided content changes have
   * been applied.
   * </pre>
   *
   * <code>.protocol.VersionedTextDocumentIdentifier text_document = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public protocol.VersionedTextDocumentIdentifier getTextDocument() {
    return textDocument_ == null ? protocol.VersionedTextDocumentIdentifier.getDefaultInstance() : textDocument_;
  }
  /**
   * <pre>
   * The document that did change. The version number points
   * to the version after all provided content changes have
   * been applied.
   * </pre>
   *
   * <code>.protocol.VersionedTextDocumentIdentifier text_document = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public protocol.VersionedTextDocumentIdentifierOrBuilder getTextDocumentOrBuilder() {
    return getTextDocument();
  }

  public static final int CONTENT_CHANGES_FIELD_NUMBER = 2;
  private java.util.List<protocol.rpc.TextDocumentContentChangeEvent> contentChanges_;
  /**
   * <pre>
   * The actual content changes. The content changes describe single state changes
   * to the document. So if there are two content changes c1 (at array index 0) and
   * c2 (at array index 1) for a document in state S then c1 moves the document from
   * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
   * on the state S'.
   * To mirror the content of a document using change events use the following approach:
   * - start with the same initial content
   * - apply the 'textDocument/didChange' notifications in the order you receive them.
   * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
   *   you receive them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public java.util.List<protocol.rpc.TextDocumentContentChangeEvent> getContentChangesList() {
    return contentChanges_;
  }
  /**
   * <pre>
   * The actual content changes. The content changes describe single state changes
   * to the document. So if there are two content changes c1 (at array index 0) and
   * c2 (at array index 1) for a document in state S then c1 moves the document from
   * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
   * on the state S'.
   * To mirror the content of a document using change events use the following approach:
   * - start with the same initial content
   * - apply the 'textDocument/didChange' notifications in the order you receive them.
   * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
   *   you receive them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public java.util.List<? extends protocol.rpc.TextDocumentContentChangeEventOrBuilder> 
      getContentChangesOrBuilderList() {
    return contentChanges_;
  }
  /**
   * <pre>
   * The actual content changes. The content changes describe single state changes
   * to the document. So if there are two content changes c1 (at array index 0) and
   * c2 (at array index 1) for a document in state S then c1 moves the document from
   * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
   * on the state S'.
   * To mirror the content of a document using change events use the following approach:
   * - start with the same initial content
   * - apply the 'textDocument/didChange' notifications in the order you receive them.
   * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
   *   you receive them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public int getContentChangesCount() {
    return contentChanges_.size();
  }
  /**
   * <pre>
   * The actual content changes. The content changes describe single state changes
   * to the document. So if there are two content changes c1 (at array index 0) and
   * c2 (at array index 1) for a document in state S then c1 moves the document from
   * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
   * on the state S'.
   * To mirror the content of a document using change events use the following approach:
   * - start with the same initial content
   * - apply the 'textDocument/didChange' notifications in the order you receive them.
   * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
   *   you receive them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public protocol.rpc.TextDocumentContentChangeEvent getContentChanges(int index) {
    return contentChanges_.get(index);
  }
  /**
   * <pre>
   * The actual content changes. The content changes describe single state changes
   * to the document. So if there are two content changes c1 (at array index 0) and
   * c2 (at array index 1) for a document in state S then c1 moves the document from
   * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
   * on the state S'.
   * To mirror the content of a document using change events use the following approach:
   * - start with the same initial content
   * - apply the 'textDocument/didChange' notifications in the order you receive them.
   * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
   *   you receive them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public protocol.rpc.TextDocumentContentChangeEventOrBuilder getContentChangesOrBuilder(
      int index) {
    return contentChanges_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (textDocument_ != null) {
      output.writeMessage(1, getTextDocument());
    }
    for (int i = 0; i < contentChanges_.size(); i++) {
      output.writeMessage(2, contentChanges_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (textDocument_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getTextDocument());
    }
    for (int i = 0; i < contentChanges_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, contentChanges_.get(i));
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof protocol.rpc.DidChangeTextDocumentRequest)) {
      return super.equals(obj);
    }
    protocol.rpc.DidChangeTextDocumentRequest other = (protocol.rpc.DidChangeTextDocumentRequest) obj;

    boolean result = true;
    result = result && (hasTextDocument() == other.hasTextDocument());
    if (hasTextDocument()) {
      result = result && getTextDocument()
          .equals(other.getTextDocument());
    }
    result = result && getContentChangesList()
        .equals(other.getContentChangesList());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasTextDocument()) {
      hash = (37 * hash) + TEXT_DOCUMENT_FIELD_NUMBER;
      hash = (53 * hash) + getTextDocument().hashCode();
    }
    if (getContentChangesCount() > 0) {
      hash = (37 * hash) + CONTENT_CHANGES_FIELD_NUMBER;
      hash = (53 * hash) + getContentChangesList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static protocol.rpc.DidChangeTextDocumentRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.DidChangeTextDocumentRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.DidChangeTextDocumentRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.DidChangeTextDocumentRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.DidChangeTextDocumentRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.DidChangeTextDocumentRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.DidChangeTextDocumentRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static protocol.rpc.DidChangeTextDocumentRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.DidChangeTextDocumentRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.DidChangeTextDocumentRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(protocol.rpc.DidChangeTextDocumentRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * DidChangeTextDocumentRequest is the parameters of a `textDocument/didChange` notification.
   * </pre>
   *
   * Protobuf type {@code protocol.rpc.DidChangeTextDocumentRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:protocol.rpc.DidChangeTextDocumentRequest)
      protocol.rpc.DidChangeTextDocumentRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_DidChangeTextDocumentRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_DidChangeTextDocumentRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol.rpc.DidChangeTextDocumentRequest.class, protocol.rpc.DidChangeTextDocumentRequest.Builder.class);
    }

    // Construct using protocol.rpc.DidChangeTextDocumentRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getContentChangesFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      if (textDocumentBuilder_ == null) {
        textDocument_ = null;
      } else {
        textDocument_ = null;
        textDocumentBuilder_ = null;
      }
      if (contentChangesBuilder_ == null) {
        contentChanges_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        contentChangesBuilder_.clear();
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_DidChangeTextDocumentRequest_descriptor;
    }

    public protocol.rpc.DidChangeTextDocumentRequest getDefaultInstanceForType() {
      return protocol.rpc.DidChangeTextDocumentRequest.getDefaultInstance();
    }

    public protocol.rpc.DidChangeTextDocumentRequest build() {
      protocol.rpc.DidChangeTextDocumentRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public protocol.rpc.DidChangeTextDocumentRequest buildPartial() {
      protocol.rpc.DidChangeTextDocumentRequest result = new protocol.rpc.DidChangeTextDocumentRequest(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (textDocumentBuilder_ == null) {
        result.textDocument_ = textDocument_;
      } else {
        result.textDocument_ = textDocumentBuilder_.build();
      }
      if (contentChangesBuilder_ == null) {
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          contentChanges_ = java.util.Collections.unmodifiableList(contentChanges_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.contentChanges_ = contentChanges_;
      } else {
        result.contentChanges_ = contentChangesBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof protocol.rpc.DidChangeTextDocumentRequest) {
        return mergeFrom((protocol.rpc.DidChangeTextDocumentRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(protocol.rpc.DidChangeTextDocumentRequest other) {
      if (other == protocol.rpc.DidChangeTextDocumentRequest.getDefaultInstance()) return this;
      if (other.hasTextDocument()) {
        mergeTextDocument(other.getTextDocument());
      }
      if (contentChangesBuilder_ == null) {
        if (!other.contentChanges_.isEmpty()) {
          if (contentChanges_.isEmpty()) {
            contentChanges_ = other.contentChanges_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureContentChangesIsMutable();
            contentChanges_.addAll(other.contentChanges_);
          }
          onChanged();
        }
      } else {
        if (!other.contentChanges_.isEmpty()) {
          if (contentChangesBuilder_.isEmpty()) {
            contentChangesBuilder_.dispose();
            contentChangesBuilder_ = null;
            contentChanges_ = other.contentChanges_;
            bitField0_ = (bitField0_ & ~0x00000002);
            contentChangesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getContentChangesFieldBuilder() : null;
          } else {
            contentChangesBuilder_.addAllMessages(other.contentChanges_);
          }
        }
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      protocol.rpc.DidChangeTextDocumentRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (protocol.rpc.DidChangeTextDocumentRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private protocol.VersionedTextDocumentIdentifier textDocument_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        protocol.VersionedTextDocumentIdentifier, protocol.VersionedTextDocumentIdentifier.Builder, protocol.VersionedTextDocumentIdentifierOrBuilder> textDocumentBuilder_;
    /**
     * <pre>
     * The document that did change. The version number points
     * to the version after all provided content changes have
     * been applied.
     * </pre>
     *
     * <code>.protocol.VersionedTextDocumentIdentifier text_document = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public boolean hasTextDocument() {
      return textDocumentBuilder_ != null || textDocument_ != null;
    }
    /**
     * <pre>
     * The document that did change. The version number points
     * to the version after all provided content changes have
     * been applied.
     * </pre>
     *
     * <code>.protocol.VersionedTextDocumentIdentifier text_document = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.VersionedTextDocumentIdentifier getTextDocument() {
      if (textDocumentBuilder_ == null) {
        return textDocument_ == null ? protocol.VersionedTextDocumentIdentifier.getDefaultInstance() : textDocument_;
      } else {
        return textDocumentBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The document that did change. The version number points
     * to the version after all provided content changes have
     * been applied.
     * </pre>
     *
     * <code>.protocol.VersionedTextDocumentIdentifier text_document = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setTextDocument(protocol.VersionedTextDocumentIdentifier value) {
      if (textDocumentBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        textDocument_ = value;
        onChanged();
      } else {
        textDocumentBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The document that did change. The version number points
     * to the version after all provided content changes have
     * been applied.
     * </pre>
     *
     * <code>.protocol.VersionedTextDocumentIdentifier text_document = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setTextDocument(
        protocol.VersionedTextDocumentIdentifier.Builder builderForValue) {
      if (textDocumentBuilder_ == null) {
        textDocument_ = builderForValue.build();
        onChanged();
      } else {
        textDocumentBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The document that did change. The version number points
     * to the version after all provided content changes have
     * been applied.
     * </pre>
     *
     * <code>.protocol.VersionedTextDocumentIdentifier text_document = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder mergeTextDocument(protocol.VersionedTextDocumentIdentifier value) {
      if (textDocumentBuilder_ == null) {
        if (textDocument_ != null) {
          textDocument_ =
            protocol.VersionedTextDocumentIdentifier.newBuilder(textDocument_).mergeFrom(value).buildPartial();
        } else {
          textDocument_ = value;
        }
        onChanged();
      } else {
        textDocumentBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The document that did change. The version number points
     * to the version after all provided content changes have
     * been applied.
     * </pre>
     *
     * <code>.protocol.VersionedTextDocumentIdentifier text_document = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearTextDocument() {
      if (textDocumentBuilder_ == null) {
        textDocument_ = null;
        onChanged();
      } else {
        textDocument_ = null;
        textDocumentBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The document that did change. The version number points
     * to the version after all provided content changes have
     * been applied.
     * </pre>
     *
     * <code>.protocol.VersionedTextDocumentIdentifier text_document = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.VersionedTextDocumentIdentifier.Builder getTextDocumentBuilder() {
      
      onChanged();
      return getTextDocumentFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The document that did change. The version number points
     * to the version after all provided content changes have
     * been applied.
     * </pre>
     *
     * <code>.protocol.VersionedTextDocumentIdentifier text_document = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.VersionedTextDocumentIdentifierOrBuilder getTextDocumentOrBuilder() {
      if (textDocumentBuilder_ != null) {
        return textDocumentBuilder_.getMessageOrBuilder();
      } else {
        return textDocument_ == null ?
            protocol.VersionedTextDocumentIdentifier.getDefaultInstance() : textDocument_;
      }
    }
    /**
     * <pre>
     * The document that did change. The version number points
     * to the version after all provided content changes have
     * been applied.
     * </pre>
     *
     * <code>.protocol.VersionedTextDocumentIdentifier text_document = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        protocol.VersionedTextDocumentIdentifier, protocol.VersionedTextDocumentIdentifier.Builder, protocol.VersionedTextDocumentIdentifierOrBuilder> 
        getTextDocumentFieldBuilder() {
      if (textDocumentBuilder_ == null) {
        textDocumentBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            protocol.VersionedTextDocumentIdentifier, protocol.VersionedTextDocumentIdentifier.Builder, protocol.VersionedTextDocumentIdentifierOrBuilder>(
                getTextDocument(),
                getParentForChildren(),
                isClean());
        textDocument_ = null;
      }
      return textDocumentBuilder_;
    }

    private java.util.List<protocol.rpc.TextDocumentContentChangeEvent> contentChanges_ =
      java.util.Collections.emptyList();
    private void ensureContentChangesIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        contentChanges_ = new java.util.ArrayList<protocol.rpc.TextDocumentContentChangeEvent>(contentChanges_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        protocol.rpc.TextDocumentContentChangeEvent, protocol.rpc.TextDocumentContentChangeEvent.Builder, protocol.rpc.TextDocumentContentChangeEventOrBuilder> contentChangesBuilder_;

    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<protocol.rpc.TextDocumentContentChangeEvent> getContentChangesList() {
      if (contentChangesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(contentChanges_);
      } else {
        return contentChangesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public int getContentChangesCount() {
      if (contentChangesBuilder_ == null) {
        return contentChanges_.size();
      } else {
        return contentChangesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.rpc.TextDocumentContentChangeEvent getContentChanges(int index) {
      if (contentChangesBuilder_ == null) {
        return contentChanges_.get(index);
      } else {
        return contentChangesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setContentChanges(
        int index, protocol.rpc.TextDocumentContentChangeEvent value) {
      if (contentChangesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureContentChangesIsMutable();
        contentChanges_.set(index, value);
        onChanged();
      } else {
        contentChangesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setContentChanges(
        int index, protocol.rpc.TextDocumentContentChangeEvent.Builder builderForValue) {
      if (contentChangesBuilder_ == null) {
        ensureContentChangesIsMutable();
        contentChanges_.set(index, builderForValue.build());
        onChanged();
      } else {
        contentChangesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addContentChanges(protocol.rpc.TextDocumentContentChangeEvent value) {
      if (contentChangesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureContentChangesIsMutable();
        contentChanges_.add(value);
        onChanged();
      } else {
        contentChangesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addContentChanges(
        int index, protocol.rpc.TextDocumentContentChangeEvent value) {
      if (contentChangesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureContentChangesIsMutable();
        contentChanges_.add(index, value);
        onChanged();
      } else {
        contentChangesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addContentChanges(
        protocol.rpc.TextDocumentContentChangeEvent.Builder builderForValue) {
      if (contentChangesBuilder_ == null) {
        ensureContentChangesIsMutable();
        contentChanges_.add(builderForValue.build());
        onChanged();
      } else {
        contentChangesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addContentChanges(
        int index, protocol.rpc.TextDocumentContentChangeEvent.Builder builderForValue) {
      if (contentChangesBuilder_ == null) {
        ensureContentChangesIsMutable();
        contentChanges_.add(index, builderForValue.build());
        onChanged();
      } else {
        contentChangesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addAllContentChanges(
        java.lang.Iterable<? extends protocol.rpc.TextDocumentContentChangeEvent> values) {
      if (contentChangesBuilder_ == null) {
        ensureContentChangesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, contentChanges_);
        onChanged();
      } else {
        contentChangesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearContentChanges() {
      if (contentChangesBuilder_ == null) {
        contentChanges_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        contentChangesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder removeContentChanges(int index) {
      if (contentChangesBuilder_ == null) {
        ensureContentChangesIsMutable();
        contentChanges_.remove(index);
        onChanged();
      } else {
        contentChangesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.rpc.TextDocumentContentChangeEvent.Builder getContentChangesBuilder(
        int index) {
      return getContentChangesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.rpc.TextDocumentContentChangeEventOrBuilder getContentChangesOrBuilder(
        int index) {
      if (contentChangesBuilder_ == null) {
        return contentChanges_.get(index);  } else {
        return contentChangesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<? extends protocol.rpc.TextDocumentContentChangeEventOrBuilder> 
         getContentChangesOrBuilderList() {
      if (contentChangesBuilder_ != null) {
        return contentChangesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(contentChanges_);
      }
    }
    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.rpc.TextDocumentContentChangeEvent.Builder addContentChangesBuilder() {
      return getContentChangesFieldBuilder().addBuilder(
          protocol.rpc.TextDocumentContentChangeEvent.getDefaultInstance());
    }
    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.rpc.TextDocumentContentChangeEvent.Builder addContentChangesBuilder(
        int index) {
      return getContentChangesFieldBuilder().addBuilder(
          index, protocol.rpc.TextDocumentContentChangeEvent.getDefaultInstance());
    }
    /**
     * <pre>
     * The actual content changes. The content changes describe single state changes
     * to the document. So if there are two content changes c1 (at array index 0) and
     * c2 (at array index 1) for a document in state S then c1 moves the document from
     * S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
     * on the state S'.
     * To mirror the content of a document using change events use the following approach:
     * - start with the same initial content
     * - apply the 'textDocument/didChange' notifications in the order you receive them.
     * - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
     *   you receive them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.TextDocumentContentChangeEvent content_changes = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<protocol.rpc.TextDocumentContentChangeEvent.Builder> 
         getContentChangesBuilderList() {
      return getContentChangesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        protocol.rpc.TextDocumentContentChangeEvent, protocol.rpc.TextDocumentContentChangeEvent.Builder, protocol.rpc.TextDocumentContentChangeEventOrBuilder> 
        getContentChangesFieldBuilder() {
      if (contentChangesBuilder_ == null) {
        contentChangesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            protocol.rpc.TextDocumentContentChangeEvent, protocol.rpc.TextDocumentContentChangeEvent.Builder, protocol.rpc.TextDocumentContentChangeEventOrBuilder>(
                contentChanges_,
                ((bitField0_ & 0x00000002) == 0x00000002),
                getParentForChildren(),
                isClean());
        contentChanges_ = null;
      }
      return contentChangesBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:protocol.rpc.DidChangeTextDocumentRequest)
  }

  // @@protoc_insertion_point(class_scope:protocol.rpc.DidChangeTextDocumentRequest)
  private static final protocol.rpc.DidChangeTextDocumentRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new protocol.rpc.DidChangeTextDocumentRequest();
  }

  public static protocol.rpc.DidChangeTextDocumentRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DidChangeTextDocumentRequest>
      PARSER = new com.google.protobuf.AbstractParser<DidChangeTextDocumentRequest>() {
    public DidChangeTextDocumentRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new DidChangeTextDocumentRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<DidChangeTextDocumentRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DidChangeTextDocumentRequest> getParserForType() {
    return PARSER;
  }

  public protocol.rpc.DidChangeTextDocumentRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

