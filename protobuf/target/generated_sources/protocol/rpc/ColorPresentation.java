// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

/**
 * <pre>
 * ColorPresentation represents a respeonse of `textDocument/colorPresentation`.
 * </pre>
 *
 * Protobuf type {@code protocol.rpc.ColorPresentation}
 */
public  final class ColorPresentation extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:protocol.rpc.ColorPresentation)
    ColorPresentationOrBuilder {
  // Use ColorPresentation.newBuilder() to construct.
  private ColorPresentation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ColorPresentation() {
    label_ = "";
    additionalTextEdits_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private ColorPresentation(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            label_ = s;
            break;
          }
          case 18: {
            protocol.TextEdit.Builder subBuilder = null;
            if (textEdit_ != null) {
              subBuilder = textEdit_.toBuilder();
            }
            textEdit_ = input.readMessage(protocol.TextEdit.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(textEdit_);
              textEdit_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              additionalTextEdits_ = new java.util.ArrayList<protocol.TextEdit>();
              mutable_bitField0_ |= 0x00000004;
            }
            additionalTextEdits_.add(
                input.readMessage(protocol.TextEdit.parser(), extensionRegistry));
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        additionalTextEdits_ = java.util.Collections.unmodifiableList(additionalTextEdits_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_ColorPresentation_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_ColorPresentation_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            protocol.rpc.ColorPresentation.class, protocol.rpc.ColorPresentation.Builder.class);
  }

  private int bitField0_;
  public static final int LABEL_FIELD_NUMBER = 1;
  private volatile java.lang.Object label_;
  /**
   * <pre>
   * The label of this color presentation. It will be shown on the color
   * picker header. By default this is also the text that is inserted when selecting
   * this color presentation.
   * </pre>
   *
   * <code>string label = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public java.lang.String getLabel() {
    java.lang.Object ref = label_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      label_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The label of this color presentation. It will be shown on the color
   * picker header. By default this is also the text that is inserted when selecting
   * this color presentation.
   * </pre>
   *
   * <code>string label = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public com.google.protobuf.ByteString
      getLabelBytes() {
    java.lang.Object ref = label_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      label_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TEXT_EDIT_FIELD_NUMBER = 2;
  private protocol.TextEdit textEdit_;
  /**
   * <pre>
   * An [edit][TextEdit] which is applied to a document when selecting
   * this presentation for the color.  When `falsy` the [label][ColorPresentation.label]
   * is used.
   * </pre>
   *
   * <code>.protocol.TextEdit text_edit = 2;</code>
   */
  public boolean hasTextEdit() {
    return textEdit_ != null;
  }
  /**
   * <pre>
   * An [edit][TextEdit] which is applied to a document when selecting
   * this presentation for the color.  When `falsy` the [label][ColorPresentation.label]
   * is used.
   * </pre>
   *
   * <code>.protocol.TextEdit text_edit = 2;</code>
   */
  public protocol.TextEdit getTextEdit() {
    return textEdit_ == null ? protocol.TextEdit.getDefaultInstance() : textEdit_;
  }
  /**
   * <pre>
   * An [edit][TextEdit] which is applied to a document when selecting
   * this presentation for the color.  When `falsy` the [label][ColorPresentation.label]
   * is used.
   * </pre>
   *
   * <code>.protocol.TextEdit text_edit = 2;</code>
   */
  public protocol.TextEditOrBuilder getTextEditOrBuilder() {
    return getTextEdit();
  }

  public static final int ADDITIONAL_TEXT_EDITS_FIELD_NUMBER = 3;
  private java.util.List<protocol.TextEdit> additionalTextEdits_;
  /**
   * <pre>
   * An optional array of additional [text edits](#TextEdit) that are applied when
   * selecting this color presentation. Edits must not overlap with the main
   * [edit][ColorPresentation.textEdit] nor with themselves.
   * </pre>
   *
   * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
   */
  public java.util.List<protocol.TextEdit> getAdditionalTextEditsList() {
    return additionalTextEdits_;
  }
  /**
   * <pre>
   * An optional array of additional [text edits](#TextEdit) that are applied when
   * selecting this color presentation. Edits must not overlap with the main
   * [edit][ColorPresentation.textEdit] nor with themselves.
   * </pre>
   *
   * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
   */
  public java.util.List<? extends protocol.TextEditOrBuilder> 
      getAdditionalTextEditsOrBuilderList() {
    return additionalTextEdits_;
  }
  /**
   * <pre>
   * An optional array of additional [text edits](#TextEdit) that are applied when
   * selecting this color presentation. Edits must not overlap with the main
   * [edit][ColorPresentation.textEdit] nor with themselves.
   * </pre>
   *
   * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
   */
  public int getAdditionalTextEditsCount() {
    return additionalTextEdits_.size();
  }
  /**
   * <pre>
   * An optional array of additional [text edits](#TextEdit) that are applied when
   * selecting this color presentation. Edits must not overlap with the main
   * [edit][ColorPresentation.textEdit] nor with themselves.
   * </pre>
   *
   * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
   */
  public protocol.TextEdit getAdditionalTextEdits(int index) {
    return additionalTextEdits_.get(index);
  }
  /**
   * <pre>
   * An optional array of additional [text edits](#TextEdit) that are applied when
   * selecting this color presentation. Edits must not overlap with the main
   * [edit][ColorPresentation.textEdit] nor with themselves.
   * </pre>
   *
   * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
   */
  public protocol.TextEditOrBuilder getAdditionalTextEditsOrBuilder(
      int index) {
    return additionalTextEdits_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getLabelBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, label_);
    }
    if (textEdit_ != null) {
      output.writeMessage(2, getTextEdit());
    }
    for (int i = 0; i < additionalTextEdits_.size(); i++) {
      output.writeMessage(3, additionalTextEdits_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getLabelBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, label_);
    }
    if (textEdit_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getTextEdit());
    }
    for (int i = 0; i < additionalTextEdits_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, additionalTextEdits_.get(i));
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof protocol.rpc.ColorPresentation)) {
      return super.equals(obj);
    }
    protocol.rpc.ColorPresentation other = (protocol.rpc.ColorPresentation) obj;

    boolean result = true;
    result = result && getLabel()
        .equals(other.getLabel());
    result = result && (hasTextEdit() == other.hasTextEdit());
    if (hasTextEdit()) {
      result = result && getTextEdit()
          .equals(other.getTextEdit());
    }
    result = result && getAdditionalTextEditsList()
        .equals(other.getAdditionalTextEditsList());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + LABEL_FIELD_NUMBER;
    hash = (53 * hash) + getLabel().hashCode();
    if (hasTextEdit()) {
      hash = (37 * hash) + TEXT_EDIT_FIELD_NUMBER;
      hash = (53 * hash) + getTextEdit().hashCode();
    }
    if (getAdditionalTextEditsCount() > 0) {
      hash = (37 * hash) + ADDITIONAL_TEXT_EDITS_FIELD_NUMBER;
      hash = (53 * hash) + getAdditionalTextEditsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static protocol.rpc.ColorPresentation parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.ColorPresentation parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.ColorPresentation parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.ColorPresentation parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.ColorPresentation parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.ColorPresentation parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.ColorPresentation parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static protocol.rpc.ColorPresentation parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.ColorPresentation parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.ColorPresentation parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(protocol.rpc.ColorPresentation prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * ColorPresentation represents a respeonse of `textDocument/colorPresentation`.
   * </pre>
   *
   * Protobuf type {@code protocol.rpc.ColorPresentation}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:protocol.rpc.ColorPresentation)
      protocol.rpc.ColorPresentationOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_ColorPresentation_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_ColorPresentation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol.rpc.ColorPresentation.class, protocol.rpc.ColorPresentation.Builder.class);
    }

    // Construct using protocol.rpc.ColorPresentation.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getAdditionalTextEditsFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      label_ = "";

      if (textEditBuilder_ == null) {
        textEdit_ = null;
      } else {
        textEdit_ = null;
        textEditBuilder_ = null;
      }
      if (additionalTextEditsBuilder_ == null) {
        additionalTextEdits_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        additionalTextEditsBuilder_.clear();
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_ColorPresentation_descriptor;
    }

    public protocol.rpc.ColorPresentation getDefaultInstanceForType() {
      return protocol.rpc.ColorPresentation.getDefaultInstance();
    }

    public protocol.rpc.ColorPresentation build() {
      protocol.rpc.ColorPresentation result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public protocol.rpc.ColorPresentation buildPartial() {
      protocol.rpc.ColorPresentation result = new protocol.rpc.ColorPresentation(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.label_ = label_;
      if (textEditBuilder_ == null) {
        result.textEdit_ = textEdit_;
      } else {
        result.textEdit_ = textEditBuilder_.build();
      }
      if (additionalTextEditsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          additionalTextEdits_ = java.util.Collections.unmodifiableList(additionalTextEdits_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.additionalTextEdits_ = additionalTextEdits_;
      } else {
        result.additionalTextEdits_ = additionalTextEditsBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof protocol.rpc.ColorPresentation) {
        return mergeFrom((protocol.rpc.ColorPresentation)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(protocol.rpc.ColorPresentation other) {
      if (other == protocol.rpc.ColorPresentation.getDefaultInstance()) return this;
      if (!other.getLabel().isEmpty()) {
        label_ = other.label_;
        onChanged();
      }
      if (other.hasTextEdit()) {
        mergeTextEdit(other.getTextEdit());
      }
      if (additionalTextEditsBuilder_ == null) {
        if (!other.additionalTextEdits_.isEmpty()) {
          if (additionalTextEdits_.isEmpty()) {
            additionalTextEdits_ = other.additionalTextEdits_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureAdditionalTextEditsIsMutable();
            additionalTextEdits_.addAll(other.additionalTextEdits_);
          }
          onChanged();
        }
      } else {
        if (!other.additionalTextEdits_.isEmpty()) {
          if (additionalTextEditsBuilder_.isEmpty()) {
            additionalTextEditsBuilder_.dispose();
            additionalTextEditsBuilder_ = null;
            additionalTextEdits_ = other.additionalTextEdits_;
            bitField0_ = (bitField0_ & ~0x00000004);
            additionalTextEditsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getAdditionalTextEditsFieldBuilder() : null;
          } else {
            additionalTextEditsBuilder_.addAllMessages(other.additionalTextEdits_);
          }
        }
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      protocol.rpc.ColorPresentation parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (protocol.rpc.ColorPresentation) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object label_ = "";
    /**
     * <pre>
     * The label of this color presentation. It will be shown on the color
     * picker header. By default this is also the text that is inserted when selecting
     * this color presentation.
     * </pre>
     *
     * <code>string label = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.lang.String getLabel() {
      java.lang.Object ref = label_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        label_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The label of this color presentation. It will be shown on the color
     * picker header. By default this is also the text that is inserted when selecting
     * this color presentation.
     * </pre>
     *
     * <code>string label = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.protobuf.ByteString
        getLabelBytes() {
      java.lang.Object ref = label_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        label_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The label of this color presentation. It will be shown on the color
     * picker header. By default this is also the text that is inserted when selecting
     * this color presentation.
     * </pre>
     *
     * <code>string label = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setLabel(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      label_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The label of this color presentation. It will be shown on the color
     * picker header. By default this is also the text that is inserted when selecting
     * this color presentation.
     * </pre>
     *
     * <code>string label = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearLabel() {
      
      label_ = getDefaultInstance().getLabel();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The label of this color presentation. It will be shown on the color
     * picker header. By default this is also the text that is inserted when selecting
     * this color presentation.
     * </pre>
     *
     * <code>string label = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setLabelBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      label_ = value;
      onChanged();
      return this;
    }

    private protocol.TextEdit textEdit_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        protocol.TextEdit, protocol.TextEdit.Builder, protocol.TextEditOrBuilder> textEditBuilder_;
    /**
     * <pre>
     * An [edit][TextEdit] which is applied to a document when selecting
     * this presentation for the color.  When `falsy` the [label][ColorPresentation.label]
     * is used.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 2;</code>
     */
    public boolean hasTextEdit() {
      return textEditBuilder_ != null || textEdit_ != null;
    }
    /**
     * <pre>
     * An [edit][TextEdit] which is applied to a document when selecting
     * this presentation for the color.  When `falsy` the [label][ColorPresentation.label]
     * is used.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 2;</code>
     */
    public protocol.TextEdit getTextEdit() {
      if (textEditBuilder_ == null) {
        return textEdit_ == null ? protocol.TextEdit.getDefaultInstance() : textEdit_;
      } else {
        return textEditBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * An [edit][TextEdit] which is applied to a document when selecting
     * this presentation for the color.  When `falsy` the [label][ColorPresentation.label]
     * is used.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 2;</code>
     */
    public Builder setTextEdit(protocol.TextEdit value) {
      if (textEditBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        textEdit_ = value;
        onChanged();
      } else {
        textEditBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * An [edit][TextEdit] which is applied to a document when selecting
     * this presentation for the color.  When `falsy` the [label][ColorPresentation.label]
     * is used.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 2;</code>
     */
    public Builder setTextEdit(
        protocol.TextEdit.Builder builderForValue) {
      if (textEditBuilder_ == null) {
        textEdit_ = builderForValue.build();
        onChanged();
      } else {
        textEditBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * An [edit][TextEdit] which is applied to a document when selecting
     * this presentation for the color.  When `falsy` the [label][ColorPresentation.label]
     * is used.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 2;</code>
     */
    public Builder mergeTextEdit(protocol.TextEdit value) {
      if (textEditBuilder_ == null) {
        if (textEdit_ != null) {
          textEdit_ =
            protocol.TextEdit.newBuilder(textEdit_).mergeFrom(value).buildPartial();
        } else {
          textEdit_ = value;
        }
        onChanged();
      } else {
        textEditBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * An [edit][TextEdit] which is applied to a document when selecting
     * this presentation for the color.  When `falsy` the [label][ColorPresentation.label]
     * is used.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 2;</code>
     */
    public Builder clearTextEdit() {
      if (textEditBuilder_ == null) {
        textEdit_ = null;
        onChanged();
      } else {
        textEdit_ = null;
        textEditBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * An [edit][TextEdit] which is applied to a document when selecting
     * this presentation for the color.  When `falsy` the [label][ColorPresentation.label]
     * is used.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 2;</code>
     */
    public protocol.TextEdit.Builder getTextEditBuilder() {
      
      onChanged();
      return getTextEditFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * An [edit][TextEdit] which is applied to a document when selecting
     * this presentation for the color.  When `falsy` the [label][ColorPresentation.label]
     * is used.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 2;</code>
     */
    public protocol.TextEditOrBuilder getTextEditOrBuilder() {
      if (textEditBuilder_ != null) {
        return textEditBuilder_.getMessageOrBuilder();
      } else {
        return textEdit_ == null ?
            protocol.TextEdit.getDefaultInstance() : textEdit_;
      }
    }
    /**
     * <pre>
     * An [edit][TextEdit] which is applied to a document when selecting
     * this presentation for the color.  When `falsy` the [label][ColorPresentation.label]
     * is used.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        protocol.TextEdit, protocol.TextEdit.Builder, protocol.TextEditOrBuilder> 
        getTextEditFieldBuilder() {
      if (textEditBuilder_ == null) {
        textEditBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            protocol.TextEdit, protocol.TextEdit.Builder, protocol.TextEditOrBuilder>(
                getTextEdit(),
                getParentForChildren(),
                isClean());
        textEdit_ = null;
      }
      return textEditBuilder_;
    }

    private java.util.List<protocol.TextEdit> additionalTextEdits_ =
      java.util.Collections.emptyList();
    private void ensureAdditionalTextEditsIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        additionalTextEdits_ = new java.util.ArrayList<protocol.TextEdit>(additionalTextEdits_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        protocol.TextEdit, protocol.TextEdit.Builder, protocol.TextEditOrBuilder> additionalTextEditsBuilder_;

    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public java.util.List<protocol.TextEdit> getAdditionalTextEditsList() {
      if (additionalTextEditsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(additionalTextEdits_);
      } else {
        return additionalTextEditsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public int getAdditionalTextEditsCount() {
      if (additionalTextEditsBuilder_ == null) {
        return additionalTextEdits_.size();
      } else {
        return additionalTextEditsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public protocol.TextEdit getAdditionalTextEdits(int index) {
      if (additionalTextEditsBuilder_ == null) {
        return additionalTextEdits_.get(index);
      } else {
        return additionalTextEditsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public Builder setAdditionalTextEdits(
        int index, protocol.TextEdit value) {
      if (additionalTextEditsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalTextEditsIsMutable();
        additionalTextEdits_.set(index, value);
        onChanged();
      } else {
        additionalTextEditsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public Builder setAdditionalTextEdits(
        int index, protocol.TextEdit.Builder builderForValue) {
      if (additionalTextEditsBuilder_ == null) {
        ensureAdditionalTextEditsIsMutable();
        additionalTextEdits_.set(index, builderForValue.build());
        onChanged();
      } else {
        additionalTextEditsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public Builder addAdditionalTextEdits(protocol.TextEdit value) {
      if (additionalTextEditsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalTextEditsIsMutable();
        additionalTextEdits_.add(value);
        onChanged();
      } else {
        additionalTextEditsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public Builder addAdditionalTextEdits(
        int index, protocol.TextEdit value) {
      if (additionalTextEditsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalTextEditsIsMutable();
        additionalTextEdits_.add(index, value);
        onChanged();
      } else {
        additionalTextEditsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public Builder addAdditionalTextEdits(
        protocol.TextEdit.Builder builderForValue) {
      if (additionalTextEditsBuilder_ == null) {
        ensureAdditionalTextEditsIsMutable();
        additionalTextEdits_.add(builderForValue.build());
        onChanged();
      } else {
        additionalTextEditsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public Builder addAdditionalTextEdits(
        int index, protocol.TextEdit.Builder builderForValue) {
      if (additionalTextEditsBuilder_ == null) {
        ensureAdditionalTextEditsIsMutable();
        additionalTextEdits_.add(index, builderForValue.build());
        onChanged();
      } else {
        additionalTextEditsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public Builder addAllAdditionalTextEdits(
        java.lang.Iterable<? extends protocol.TextEdit> values) {
      if (additionalTextEditsBuilder_ == null) {
        ensureAdditionalTextEditsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, additionalTextEdits_);
        onChanged();
      } else {
        additionalTextEditsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public Builder clearAdditionalTextEdits() {
      if (additionalTextEditsBuilder_ == null) {
        additionalTextEdits_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        additionalTextEditsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public Builder removeAdditionalTextEdits(int index) {
      if (additionalTextEditsBuilder_ == null) {
        ensureAdditionalTextEditsIsMutable();
        additionalTextEdits_.remove(index);
        onChanged();
      } else {
        additionalTextEditsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public protocol.TextEdit.Builder getAdditionalTextEditsBuilder(
        int index) {
      return getAdditionalTextEditsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public protocol.TextEditOrBuilder getAdditionalTextEditsOrBuilder(
        int index) {
      if (additionalTextEditsBuilder_ == null) {
        return additionalTextEdits_.get(index);  } else {
        return additionalTextEditsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public java.util.List<? extends protocol.TextEditOrBuilder> 
         getAdditionalTextEditsOrBuilderList() {
      if (additionalTextEditsBuilder_ != null) {
        return additionalTextEditsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(additionalTextEdits_);
      }
    }
    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public protocol.TextEdit.Builder addAdditionalTextEditsBuilder() {
      return getAdditionalTextEditsFieldBuilder().addBuilder(
          protocol.TextEdit.getDefaultInstance());
    }
    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public protocol.TextEdit.Builder addAdditionalTextEditsBuilder(
        int index) {
      return getAdditionalTextEditsFieldBuilder().addBuilder(
          index, protocol.TextEdit.getDefaultInstance());
    }
    /**
     * <pre>
     * An optional array of additional [text edits](#TextEdit) that are applied when
     * selecting this color presentation. Edits must not overlap with the main
     * [edit][ColorPresentation.textEdit] nor with themselves.
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 3;</code>
     */
    public java.util.List<protocol.TextEdit.Builder> 
         getAdditionalTextEditsBuilderList() {
      return getAdditionalTextEditsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        protocol.TextEdit, protocol.TextEdit.Builder, protocol.TextEditOrBuilder> 
        getAdditionalTextEditsFieldBuilder() {
      if (additionalTextEditsBuilder_ == null) {
        additionalTextEditsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            protocol.TextEdit, protocol.TextEdit.Builder, protocol.TextEditOrBuilder>(
                additionalTextEdits_,
                ((bitField0_ & 0x00000004) == 0x00000004),
                getParentForChildren(),
                isClean());
        additionalTextEdits_ = null;
      }
      return additionalTextEditsBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:protocol.rpc.ColorPresentation)
  }

  // @@protoc_insertion_point(class_scope:protocol.rpc.ColorPresentation)
  private static final protocol.rpc.ColorPresentation DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new protocol.rpc.ColorPresentation();
  }

  public static protocol.rpc.ColorPresentation getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ColorPresentation>
      PARSER = new com.google.protobuf.AbstractParser<ColorPresentation>() {
    public ColorPresentation parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new ColorPresentation(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ColorPresentation> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ColorPresentation> getParserForType() {
    return PARSER;
  }

  public protocol.rpc.ColorPresentation getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

