// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

/**
 * <pre>
 * TextDocumentSyncKind defines how the host (editor) should sync document changes to the language
 * server.
 * (-- api-linter: core::0126::unspecified=disabled --)
 * </pre>
 *
 * Protobuf enum {@code protocol.rpc.TextDocumentSyncKind}
 */
public enum TextDocumentSyncKind
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Documents should not be synced at all.
   * </pre>
   *
   * <code>NONE = 0;</code>
   */
  NONE(0),
  /**
   * <pre>
   * Documents are synced by always sending the full content
   * of the document.
   * </pre>
   *
   * <code>FULL = 1;</code>
   */
  FULL(1),
  /**
   * <pre>
   * Documents are synced by sending the full content on open.
   * After that only incremental updates to the document are
   * send.
   * </pre>
   *
   * <code>INCREMENTAL = 2;</code>
   */
  INCREMENTAL(2),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Documents should not be synced at all.
   * </pre>
   *
   * <code>NONE = 0;</code>
   */
  public static final int NONE_VALUE = 0;
  /**
   * <pre>
   * Documents are synced by always sending the full content
   * of the document.
   * </pre>
   *
   * <code>FULL = 1;</code>
   */
  public static final int FULL_VALUE = 1;
  /**
   * <pre>
   * Documents are synced by sending the full content on open.
   * After that only incremental updates to the document are
   * send.
   * </pre>
   *
   * <code>INCREMENTAL = 2;</code>
   */
  public static final int INCREMENTAL_VALUE = 2;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TextDocumentSyncKind valueOf(int value) {
    return forNumber(value);
  }

  public static TextDocumentSyncKind forNumber(int value) {
    switch (value) {
      case 0: return NONE;
      case 1: return FULL;
      case 2: return INCREMENTAL;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TextDocumentSyncKind>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TextDocumentSyncKind> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TextDocumentSyncKind>() {
          public TextDocumentSyncKind findValueByNumber(int number) {
            return TextDocumentSyncKind.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return protocol.rpc.RpcProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final TextDocumentSyncKind[] VALUES = values();

  public static TextDocumentSyncKind valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TextDocumentSyncKind(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:protocol.rpc.TextDocumentSyncKind)
}

