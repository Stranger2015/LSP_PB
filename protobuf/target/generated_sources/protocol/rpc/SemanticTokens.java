// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

/**
 * <pre>
 * SemanticTokens represents a list of semantic token.
 * &#64;since 3.16.0
 * </pre>
 *
 * Protobuf type {@code protocol.rpc.SemanticTokens}
 */
public  final class SemanticTokens extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:protocol.rpc.SemanticTokens)
    SemanticTokensOrBuilder {
  // Use SemanticTokens.newBuilder() to construct.
  private SemanticTokens(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SemanticTokens() {
    data_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private SemanticTokens(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            com.google.protobuf.StringValue.Builder subBuilder = null;
            if (resultId_ != null) {
              subBuilder = resultId_.toBuilder();
            }
            resultId_ = input.readMessage(com.google.protobuf.StringValue.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(resultId_);
              resultId_ = subBuilder.buildPartial();
            }

            break;
          }
          case 16: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              data_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000002;
            }
            data_.add(input.readInt32());
            break;
          }
          case 18: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
              data_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000002;
            }
            while (input.getBytesUntilLimit() > 0) {
              data_.add(input.readInt32());
            }
            input.popLimit(limit);
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        data_ = java.util.Collections.unmodifiableList(data_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokens_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokens_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            protocol.rpc.SemanticTokens.class, protocol.rpc.SemanticTokens.Builder.class);
  }

  private int bitField0_;
  public static final int RESULT_ID_FIELD_NUMBER = 1;
  private com.google.protobuf.StringValue resultId_;
  /**
   * <pre>
   * An optional result id. If provided and clients support delta updating
   * the client will include the result id in the next semantic token request.
   * A server can then instead of computing all semantic tokens again simply
   * send a delta.
   * </pre>
   *
   * <code>.google.protobuf.StringValue result_id = 1;</code>
   */
  public boolean hasResultId() {
    return resultId_ != null;
  }
  /**
   * <pre>
   * An optional result id. If provided and clients support delta updating
   * the client will include the result id in the next semantic token request.
   * A server can then instead of computing all semantic tokens again simply
   * send a delta.
   * </pre>
   *
   * <code>.google.protobuf.StringValue result_id = 1;</code>
   */
  public com.google.protobuf.StringValue getResultId() {
    return resultId_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : resultId_;
  }
  /**
   * <pre>
   * An optional result id. If provided and clients support delta updating
   * the client will include the result id in the next semantic token request.
   * A server can then instead of computing all semantic tokens again simply
   * send a delta.
   * </pre>
   *
   * <code>.google.protobuf.StringValue result_id = 1;</code>
   */
  public com.google.protobuf.StringValueOrBuilder getResultIdOrBuilder() {
    return getResultId();
  }

  public static final int DATA_FIELD_NUMBER = 2;
  private java.util.List<java.lang.Integer> data_;
  /**
   * <pre>
   * The actual tokens.
   * </pre>
   *
   * <code>repeated int32 data = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public java.util.List<java.lang.Integer>
      getDataList() {
    return data_;
  }
  /**
   * <pre>
   * The actual tokens.
   * </pre>
   *
   * <code>repeated int32 data = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public int getDataCount() {
    return data_.size();
  }
  /**
   * <pre>
   * The actual tokens.
   * </pre>
   *
   * <code>repeated int32 data = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public int getData(int index) {
    return data_.get(index);
  }
  private int dataMemoizedSerializedSize = -1;

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (resultId_ != null) {
      output.writeMessage(1, getResultId());
    }
    if (getDataList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(dataMemoizedSerializedSize);
    }
    for (int i = 0; i < data_.size(); i++) {
      output.writeInt32NoTag(data_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (resultId_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getResultId());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < data_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(data_.get(i));
      }
      size += dataSize;
      if (!getDataList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      dataMemoizedSerializedSize = dataSize;
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof protocol.rpc.SemanticTokens)) {
      return super.equals(obj);
    }
    protocol.rpc.SemanticTokens other = (protocol.rpc.SemanticTokens) obj;

    boolean result = true;
    result = result && (hasResultId() == other.hasResultId());
    if (hasResultId()) {
      result = result && getResultId()
          .equals(other.getResultId());
    }
    result = result && getDataList()
        .equals(other.getDataList());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasResultId()) {
      hash = (37 * hash) + RESULT_ID_FIELD_NUMBER;
      hash = (53 * hash) + getResultId().hashCode();
    }
    if (getDataCount() > 0) {
      hash = (37 * hash) + DATA_FIELD_NUMBER;
      hash = (53 * hash) + getDataList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static protocol.rpc.SemanticTokens parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.SemanticTokens parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.SemanticTokens parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.SemanticTokens parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.SemanticTokens parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.SemanticTokens parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.SemanticTokens parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static protocol.rpc.SemanticTokens parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.SemanticTokens parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.SemanticTokens parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(protocol.rpc.SemanticTokens prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * SemanticTokens represents a list of semantic token.
   * &#64;since 3.16.0
   * </pre>
   *
   * Protobuf type {@code protocol.rpc.SemanticTokens}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:protocol.rpc.SemanticTokens)
      protocol.rpc.SemanticTokensOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokens_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokens_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol.rpc.SemanticTokens.class, protocol.rpc.SemanticTokens.Builder.class);
    }

    // Construct using protocol.rpc.SemanticTokens.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      if (resultIdBuilder_ == null) {
        resultId_ = null;
      } else {
        resultId_ = null;
        resultIdBuilder_ = null;
      }
      data_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokens_descriptor;
    }

    public protocol.rpc.SemanticTokens getDefaultInstanceForType() {
      return protocol.rpc.SemanticTokens.getDefaultInstance();
    }

    public protocol.rpc.SemanticTokens build() {
      protocol.rpc.SemanticTokens result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public protocol.rpc.SemanticTokens buildPartial() {
      protocol.rpc.SemanticTokens result = new protocol.rpc.SemanticTokens(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (resultIdBuilder_ == null) {
        result.resultId_ = resultId_;
      } else {
        result.resultId_ = resultIdBuilder_.build();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        data_ = java.util.Collections.unmodifiableList(data_);
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.data_ = data_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof protocol.rpc.SemanticTokens) {
        return mergeFrom((protocol.rpc.SemanticTokens)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(protocol.rpc.SemanticTokens other) {
      if (other == protocol.rpc.SemanticTokens.getDefaultInstance()) return this;
      if (other.hasResultId()) {
        mergeResultId(other.getResultId());
      }
      if (!other.data_.isEmpty()) {
        if (data_.isEmpty()) {
          data_ = other.data_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureDataIsMutable();
          data_.addAll(other.data_);
        }
        onChanged();
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      protocol.rpc.SemanticTokens parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (protocol.rpc.SemanticTokens) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.StringValue resultId_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder> resultIdBuilder_;
    /**
     * <pre>
     * An optional result id. If provided and clients support delta updating
     * the client will include the result id in the next semantic token request.
     * A server can then instead of computing all semantic tokens again simply
     * send a delta.
     * </pre>
     *
     * <code>.google.protobuf.StringValue result_id = 1;</code>
     */
    public boolean hasResultId() {
      return resultIdBuilder_ != null || resultId_ != null;
    }
    /**
     * <pre>
     * An optional result id. If provided and clients support delta updating
     * the client will include the result id in the next semantic token request.
     * A server can then instead of computing all semantic tokens again simply
     * send a delta.
     * </pre>
     *
     * <code>.google.protobuf.StringValue result_id = 1;</code>
     */
    public com.google.protobuf.StringValue getResultId() {
      if (resultIdBuilder_ == null) {
        return resultId_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : resultId_;
      } else {
        return resultIdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * An optional result id. If provided and clients support delta updating
     * the client will include the result id in the next semantic token request.
     * A server can then instead of computing all semantic tokens again simply
     * send a delta.
     * </pre>
     *
     * <code>.google.protobuf.StringValue result_id = 1;</code>
     */
    public Builder setResultId(com.google.protobuf.StringValue value) {
      if (resultIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        resultId_ = value;
        onChanged();
      } else {
        resultIdBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * An optional result id. If provided and clients support delta updating
     * the client will include the result id in the next semantic token request.
     * A server can then instead of computing all semantic tokens again simply
     * send a delta.
     * </pre>
     *
     * <code>.google.protobuf.StringValue result_id = 1;</code>
     */
    public Builder setResultId(
        com.google.protobuf.StringValue.Builder builderForValue) {
      if (resultIdBuilder_ == null) {
        resultId_ = builderForValue.build();
        onChanged();
      } else {
        resultIdBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * An optional result id. If provided and clients support delta updating
     * the client will include the result id in the next semantic token request.
     * A server can then instead of computing all semantic tokens again simply
     * send a delta.
     * </pre>
     *
     * <code>.google.protobuf.StringValue result_id = 1;</code>
     */
    public Builder mergeResultId(com.google.protobuf.StringValue value) {
      if (resultIdBuilder_ == null) {
        if (resultId_ != null) {
          resultId_ =
            com.google.protobuf.StringValue.newBuilder(resultId_).mergeFrom(value).buildPartial();
        } else {
          resultId_ = value;
        }
        onChanged();
      } else {
        resultIdBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * An optional result id. If provided and clients support delta updating
     * the client will include the result id in the next semantic token request.
     * A server can then instead of computing all semantic tokens again simply
     * send a delta.
     * </pre>
     *
     * <code>.google.protobuf.StringValue result_id = 1;</code>
     */
    public Builder clearResultId() {
      if (resultIdBuilder_ == null) {
        resultId_ = null;
        onChanged();
      } else {
        resultId_ = null;
        resultIdBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * An optional result id. If provided and clients support delta updating
     * the client will include the result id in the next semantic token request.
     * A server can then instead of computing all semantic tokens again simply
     * send a delta.
     * </pre>
     *
     * <code>.google.protobuf.StringValue result_id = 1;</code>
     */
    public com.google.protobuf.StringValue.Builder getResultIdBuilder() {
      
      onChanged();
      return getResultIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * An optional result id. If provided and clients support delta updating
     * the client will include the result id in the next semantic token request.
     * A server can then instead of computing all semantic tokens again simply
     * send a delta.
     * </pre>
     *
     * <code>.google.protobuf.StringValue result_id = 1;</code>
     */
    public com.google.protobuf.StringValueOrBuilder getResultIdOrBuilder() {
      if (resultIdBuilder_ != null) {
        return resultIdBuilder_.getMessageOrBuilder();
      } else {
        return resultId_ == null ?
            com.google.protobuf.StringValue.getDefaultInstance() : resultId_;
      }
    }
    /**
     * <pre>
     * An optional result id. If provided and clients support delta updating
     * the client will include the result id in the next semantic token request.
     * A server can then instead of computing all semantic tokens again simply
     * send a delta.
     * </pre>
     *
     * <code>.google.protobuf.StringValue result_id = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder> 
        getResultIdFieldBuilder() {
      if (resultIdBuilder_ == null) {
        resultIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder>(
                getResultId(),
                getParentForChildren(),
                isClean());
        resultId_ = null;
      }
      return resultIdBuilder_;
    }

    private java.util.List<java.lang.Integer> data_ = java.util.Collections.emptyList();
    private void ensureDataIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        data_ = new java.util.ArrayList<java.lang.Integer>(data_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * The actual tokens.
     * </pre>
     *
     * <code>repeated int32 data = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<java.lang.Integer>
        getDataList() {
      return java.util.Collections.unmodifiableList(data_);
    }
    /**
     * <pre>
     * The actual tokens.
     * </pre>
     *
     * <code>repeated int32 data = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <pre>
     * The actual tokens.
     * </pre>
     *
     * <code>repeated int32 data = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public int getData(int index) {
      return data_.get(index);
    }
    /**
     * <pre>
     * The actual tokens.
     * </pre>
     *
     * <code>repeated int32 data = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setData(
        int index, int value) {
      ensureDataIsMutable();
      data_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The actual tokens.
     * </pre>
     *
     * <code>repeated int32 data = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addData(int value) {
      ensureDataIsMutable();
      data_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The actual tokens.
     * </pre>
     *
     * <code>repeated int32 data = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addAllData(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureDataIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, data_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The actual tokens.
     * </pre>
     *
     * <code>repeated int32 data = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearData() {
      data_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:protocol.rpc.SemanticTokens)
  }

  // @@protoc_insertion_point(class_scope:protocol.rpc.SemanticTokens)
  private static final protocol.rpc.SemanticTokens DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new protocol.rpc.SemanticTokens();
  }

  public static protocol.rpc.SemanticTokens getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SemanticTokens>
      PARSER = new com.google.protobuf.AbstractParser<SemanticTokens>() {
    public SemanticTokens parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new SemanticTokens(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SemanticTokens> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SemanticTokens> getParserForType() {
    return PARSER;
  }

  public protocol.rpc.SemanticTokens getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

