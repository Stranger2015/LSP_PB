// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

/**
 * <pre>
 * SymbolTag are extra annotations that tweak the rendering of a symbol.
 * &#64;since 3.15
 * </pre>
 *
 * Protobuf enum {@code protocol.rpc.SymbolTag}
 */
public enum SymbolTag
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Conventional default for enums. Do not use this.
   * </pre>
   *
   * <code>SYMBOL_TAG_UNSPECIFIED = 0;</code>
   */
  SYMBOL_TAG_UNSPECIFIED(0),
  /**
   * <pre>
   * Render a symbol as obsolete, usually using a strike-out.
   * </pre>
   *
   * <code>DEPRECATED_SYMBOL_TAG = 1;</code>
   */
  DEPRECATED_SYMBOL_TAG(1),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Conventional default for enums. Do not use this.
   * </pre>
   *
   * <code>SYMBOL_TAG_UNSPECIFIED = 0;</code>
   */
  public static final int SYMBOL_TAG_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Render a symbol as obsolete, usually using a strike-out.
   * </pre>
   *
   * <code>DEPRECATED_SYMBOL_TAG = 1;</code>
   */
  public static final int DEPRECATED_SYMBOL_TAG_VALUE = 1;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SymbolTag valueOf(int value) {
    return forNumber(value);
  }

  public static SymbolTag forNumber(int value) {
    switch (value) {
      case 0: return SYMBOL_TAG_UNSPECIFIED;
      case 1: return DEPRECATED_SYMBOL_TAG;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SymbolTag>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SymbolTag> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SymbolTag>() {
          public SymbolTag findValueByNumber(int number) {
            return SymbolTag.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return protocol.rpc.RpcProto.getDescriptor().getEnumTypes().get(8);
  }

  private static final SymbolTag[] VALUES = values();

  public static SymbolTag valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SymbolTag(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:protocol.rpc.SymbolTag)
}

