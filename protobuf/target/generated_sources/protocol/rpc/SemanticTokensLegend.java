// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

/**
 * <pre>
 * SemanticTokensLegend represents a legend of semantic tokens.
 * &#64;since 3.16.0
 * </pre>
 *
 * Protobuf type {@code protocol.rpc.SemanticTokensLegend}
 */
public  final class SemanticTokensLegend extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:protocol.rpc.SemanticTokensLegend)
    SemanticTokensLegendOrBuilder {
  // Use SemanticTokensLegend.newBuilder() to construct.
  private SemanticTokensLegend(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SemanticTokensLegend() {
    tokenTypes_ = java.util.Collections.emptyList();
    tokenModifiers_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private SemanticTokensLegend(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            int rawValue = input.readEnum();
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              tokenTypes_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000001;
            }
            tokenTypes_.add(rawValue);
            break;
          }
          case 10: {
            int length = input.readRawVarint32();
            int oldLimit = input.pushLimit(length);
            while(input.getBytesUntilLimit() > 0) {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                tokenTypes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              tokenTypes_.add(rawValue);
            }
            input.popLimit(oldLimit);
            break;
          }
          case 16: {
            int rawValue = input.readEnum();
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              tokenModifiers_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000002;
            }
            tokenModifiers_.add(rawValue);
            break;
          }
          case 18: {
            int length = input.readRawVarint32();
            int oldLimit = input.pushLimit(length);
            while(input.getBytesUntilLimit() > 0) {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                tokenModifiers_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              tokenModifiers_.add(rawValue);
            }
            input.popLimit(oldLimit);
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        tokenTypes_ = java.util.Collections.unmodifiableList(tokenTypes_);
      }
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        tokenModifiers_ = java.util.Collections.unmodifiableList(tokenModifiers_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokensLegend_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokensLegend_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            protocol.rpc.SemanticTokensLegend.class, protocol.rpc.SemanticTokensLegend.Builder.class);
  }

  public static final int TOKEN_TYPES_FIELD_NUMBER = 1;
  private java.util.List<java.lang.Integer> tokenTypes_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, protocol.rpc.SemanticTokenTypes> tokenTypes_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, protocol.rpc.SemanticTokenTypes>() {
            public protocol.rpc.SemanticTokenTypes convert(java.lang.Integer from) {
              protocol.rpc.SemanticTokenTypes result = protocol.rpc.SemanticTokenTypes.valueOf(from);
              return result == null ? protocol.rpc.SemanticTokenTypes.UNRECOGNIZED : result;
            }
          };
  /**
   * <pre>
   * The token types a server uses.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 1;</code>
   */
  public java.util.List<protocol.rpc.SemanticTokenTypes> getTokenTypesList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, protocol.rpc.SemanticTokenTypes>(tokenTypes_, tokenTypes_converter_);
  }
  /**
   * <pre>
   * The token types a server uses.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 1;</code>
   */
  public int getTokenTypesCount() {
    return tokenTypes_.size();
  }
  /**
   * <pre>
   * The token types a server uses.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 1;</code>
   */
  public protocol.rpc.SemanticTokenTypes getTokenTypes(int index) {
    return tokenTypes_converter_.convert(tokenTypes_.get(index));
  }
  /**
   * <pre>
   * The token types a server uses.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 1;</code>
   */
  public java.util.List<java.lang.Integer>
  getTokenTypesValueList() {
    return tokenTypes_;
  }
  /**
   * <pre>
   * The token types a server uses.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 1;</code>
   */
  public int getTokenTypesValue(int index) {
    return tokenTypes_.get(index);
  }
  private int tokenTypesMemoizedSerializedSize;

  public static final int TOKEN_MODIFIERS_FIELD_NUMBER = 2;
  private java.util.List<java.lang.Integer> tokenModifiers_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, protocol.rpc.SemanticTokenModifiers> tokenModifiers_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, protocol.rpc.SemanticTokenModifiers>() {
            public protocol.rpc.SemanticTokenModifiers convert(java.lang.Integer from) {
              protocol.rpc.SemanticTokenModifiers result = protocol.rpc.SemanticTokenModifiers.valueOf(from);
              return result == null ? protocol.rpc.SemanticTokenModifiers.UNRECOGNIZED : result;
            }
          };
  /**
   * <pre>
   * The token modifiers a server uses.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 2;</code>
   */
  public java.util.List<protocol.rpc.SemanticTokenModifiers> getTokenModifiersList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, protocol.rpc.SemanticTokenModifiers>(tokenModifiers_, tokenModifiers_converter_);
  }
  /**
   * <pre>
   * The token modifiers a server uses.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 2;</code>
   */
  public int getTokenModifiersCount() {
    return tokenModifiers_.size();
  }
  /**
   * <pre>
   * The token modifiers a server uses.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 2;</code>
   */
  public protocol.rpc.SemanticTokenModifiers getTokenModifiers(int index) {
    return tokenModifiers_converter_.convert(tokenModifiers_.get(index));
  }
  /**
   * <pre>
   * The token modifiers a server uses.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 2;</code>
   */
  public java.util.List<java.lang.Integer>
  getTokenModifiersValueList() {
    return tokenModifiers_;
  }
  /**
   * <pre>
   * The token modifiers a server uses.
   * </pre>
   *
   * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 2;</code>
   */
  public int getTokenModifiersValue(int index) {
    return tokenModifiers_.get(index);
  }
  private int tokenModifiersMemoizedSerializedSize;

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (getTokenTypesList().size() > 0) {
      output.writeUInt32NoTag(10);
      output.writeUInt32NoTag(tokenTypesMemoizedSerializedSize);
    }
    for (int i = 0; i < tokenTypes_.size(); i++) {
      output.writeEnumNoTag(tokenTypes_.get(i));
    }
    if (getTokenModifiersList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(tokenModifiersMemoizedSerializedSize);
    }
    for (int i = 0; i < tokenModifiers_.size(); i++) {
      output.writeEnumNoTag(tokenModifiers_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < tokenTypes_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(tokenTypes_.get(i));
      }
      size += dataSize;
      if (!getTokenTypesList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }tokenTypesMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < tokenModifiers_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(tokenModifiers_.get(i));
      }
      size += dataSize;
      if (!getTokenModifiersList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }tokenModifiersMemoizedSerializedSize = dataSize;
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof protocol.rpc.SemanticTokensLegend)) {
      return super.equals(obj);
    }
    protocol.rpc.SemanticTokensLegend other = (protocol.rpc.SemanticTokensLegend) obj;

    boolean result = true;
    result = result && tokenTypes_.equals(other.tokenTypes_);
    result = result && tokenModifiers_.equals(other.tokenModifiers_);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getTokenTypesCount() > 0) {
      hash = (37 * hash) + TOKEN_TYPES_FIELD_NUMBER;
      hash = (53 * hash) + tokenTypes_.hashCode();
    }
    if (getTokenModifiersCount() > 0) {
      hash = (37 * hash) + TOKEN_MODIFIERS_FIELD_NUMBER;
      hash = (53 * hash) + tokenModifiers_.hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static protocol.rpc.SemanticTokensLegend parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.SemanticTokensLegend parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.SemanticTokensLegend parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.SemanticTokensLegend parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.SemanticTokensLegend parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.SemanticTokensLegend parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.SemanticTokensLegend parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static protocol.rpc.SemanticTokensLegend parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.SemanticTokensLegend parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.SemanticTokensLegend parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(protocol.rpc.SemanticTokensLegend prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * SemanticTokensLegend represents a legend of semantic tokens.
   * &#64;since 3.16.0
   * </pre>
   *
   * Protobuf type {@code protocol.rpc.SemanticTokensLegend}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:protocol.rpc.SemanticTokensLegend)
      protocol.rpc.SemanticTokensLegendOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokensLegend_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokensLegend_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol.rpc.SemanticTokensLegend.class, protocol.rpc.SemanticTokensLegend.Builder.class);
    }

    // Construct using protocol.rpc.SemanticTokensLegend.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      tokenTypes_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      tokenModifiers_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_SemanticTokensLegend_descriptor;
    }

    public protocol.rpc.SemanticTokensLegend getDefaultInstanceForType() {
      return protocol.rpc.SemanticTokensLegend.getDefaultInstance();
    }

    public protocol.rpc.SemanticTokensLegend build() {
      protocol.rpc.SemanticTokensLegend result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public protocol.rpc.SemanticTokensLegend buildPartial() {
      protocol.rpc.SemanticTokensLegend result = new protocol.rpc.SemanticTokensLegend(this);
      int from_bitField0_ = bitField0_;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        tokenTypes_ = java.util.Collections.unmodifiableList(tokenTypes_);
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.tokenTypes_ = tokenTypes_;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        tokenModifiers_ = java.util.Collections.unmodifiableList(tokenModifiers_);
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.tokenModifiers_ = tokenModifiers_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof protocol.rpc.SemanticTokensLegend) {
        return mergeFrom((protocol.rpc.SemanticTokensLegend)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(protocol.rpc.SemanticTokensLegend other) {
      if (other == protocol.rpc.SemanticTokensLegend.getDefaultInstance()) return this;
      if (!other.tokenTypes_.isEmpty()) {
        if (tokenTypes_.isEmpty()) {
          tokenTypes_ = other.tokenTypes_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureTokenTypesIsMutable();
          tokenTypes_.addAll(other.tokenTypes_);
        }
        onChanged();
      }
      if (!other.tokenModifiers_.isEmpty()) {
        if (tokenModifiers_.isEmpty()) {
          tokenModifiers_ = other.tokenModifiers_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureTokenModifiersIsMutable();
          tokenModifiers_.addAll(other.tokenModifiers_);
        }
        onChanged();
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      protocol.rpc.SemanticTokensLegend parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (protocol.rpc.SemanticTokensLegend) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<java.lang.Integer> tokenTypes_ =
      java.util.Collections.emptyList();
    private void ensureTokenTypesIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        tokenTypes_ = new java.util.ArrayList<java.lang.Integer>(tokenTypes_);
        bitField0_ |= 0x00000001;
      }
    }
    /**
     * <pre>
     * The token types a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 1;</code>
     */
    public java.util.List<protocol.rpc.SemanticTokenTypes> getTokenTypesList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, protocol.rpc.SemanticTokenTypes>(tokenTypes_, tokenTypes_converter_);
    }
    /**
     * <pre>
     * The token types a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 1;</code>
     */
    public int getTokenTypesCount() {
      return tokenTypes_.size();
    }
    /**
     * <pre>
     * The token types a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 1;</code>
     */
    public protocol.rpc.SemanticTokenTypes getTokenTypes(int index) {
      return tokenTypes_converter_.convert(tokenTypes_.get(index));
    }
    /**
     * <pre>
     * The token types a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 1;</code>
     */
    public Builder setTokenTypes(
        int index, protocol.rpc.SemanticTokenTypes value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTokenTypesIsMutable();
      tokenTypes_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token types a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 1;</code>
     */
    public Builder addTokenTypes(protocol.rpc.SemanticTokenTypes value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTokenTypesIsMutable();
      tokenTypes_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token types a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 1;</code>
     */
    public Builder addAllTokenTypes(
        java.lang.Iterable<? extends protocol.rpc.SemanticTokenTypes> values) {
      ensureTokenTypesIsMutable();
      for (protocol.rpc.SemanticTokenTypes value : values) {
        tokenTypes_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token types a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 1;</code>
     */
    public Builder clearTokenTypes() {
      tokenTypes_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token types a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 1;</code>
     */
    public java.util.List<java.lang.Integer>
    getTokenTypesValueList() {
      return java.util.Collections.unmodifiableList(tokenTypes_);
    }
    /**
     * <pre>
     * The token types a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 1;</code>
     */
    public int getTokenTypesValue(int index) {
      return tokenTypes_.get(index);
    }
    /**
     * <pre>
     * The token types a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 1;</code>
     */
    public Builder setTokenTypesValue(
        int index, int value) {
      ensureTokenTypesIsMutable();
      tokenTypes_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token types a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 1;</code>
     */
    public Builder addTokenTypesValue(int value) {
      ensureTokenTypesIsMutable();
      tokenTypes_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token types a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenTypes token_types = 1;</code>
     */
    public Builder addAllTokenTypesValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureTokenTypesIsMutable();
      for (int value : values) {
        tokenTypes_.add(value);
      }
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Integer> tokenModifiers_ =
      java.util.Collections.emptyList();
    private void ensureTokenModifiersIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        tokenModifiers_ = new java.util.ArrayList<java.lang.Integer>(tokenModifiers_);
        bitField0_ |= 0x00000002;
      }
    }
    /**
     * <pre>
     * The token modifiers a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 2;</code>
     */
    public java.util.List<protocol.rpc.SemanticTokenModifiers> getTokenModifiersList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, protocol.rpc.SemanticTokenModifiers>(tokenModifiers_, tokenModifiers_converter_);
    }
    /**
     * <pre>
     * The token modifiers a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 2;</code>
     */
    public int getTokenModifiersCount() {
      return tokenModifiers_.size();
    }
    /**
     * <pre>
     * The token modifiers a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 2;</code>
     */
    public protocol.rpc.SemanticTokenModifiers getTokenModifiers(int index) {
      return tokenModifiers_converter_.convert(tokenModifiers_.get(index));
    }
    /**
     * <pre>
     * The token modifiers a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 2;</code>
     */
    public Builder setTokenModifiers(
        int index, protocol.rpc.SemanticTokenModifiers value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTokenModifiersIsMutable();
      tokenModifiers_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token modifiers a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 2;</code>
     */
    public Builder addTokenModifiers(protocol.rpc.SemanticTokenModifiers value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTokenModifiersIsMutable();
      tokenModifiers_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token modifiers a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 2;</code>
     */
    public Builder addAllTokenModifiers(
        java.lang.Iterable<? extends protocol.rpc.SemanticTokenModifiers> values) {
      ensureTokenModifiersIsMutable();
      for (protocol.rpc.SemanticTokenModifiers value : values) {
        tokenModifiers_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token modifiers a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 2;</code>
     */
    public Builder clearTokenModifiers() {
      tokenModifiers_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token modifiers a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 2;</code>
     */
    public java.util.List<java.lang.Integer>
    getTokenModifiersValueList() {
      return java.util.Collections.unmodifiableList(tokenModifiers_);
    }
    /**
     * <pre>
     * The token modifiers a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 2;</code>
     */
    public int getTokenModifiersValue(int index) {
      return tokenModifiers_.get(index);
    }
    /**
     * <pre>
     * The token modifiers a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 2;</code>
     */
    public Builder setTokenModifiersValue(
        int index, int value) {
      ensureTokenModifiersIsMutable();
      tokenModifiers_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token modifiers a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 2;</code>
     */
    public Builder addTokenModifiersValue(int value) {
      ensureTokenModifiersIsMutable();
      tokenModifiers_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token modifiers a server uses.
     * </pre>
     *
     * <code>repeated .protocol.rpc.SemanticTokenModifiers token_modifiers = 2;</code>
     */
    public Builder addAllTokenModifiersValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureTokenModifiersIsMutable();
      for (int value : values) {
        tokenModifiers_.add(value);
      }
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:protocol.rpc.SemanticTokensLegend)
  }

  // @@protoc_insertion_point(class_scope:protocol.rpc.SemanticTokensLegend)
  private static final protocol.rpc.SemanticTokensLegend DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new protocol.rpc.SemanticTokensLegend();
  }

  public static protocol.rpc.SemanticTokensLegend getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SemanticTokensLegend>
      PARSER = new com.google.protobuf.AbstractParser<SemanticTokensLegend>() {
    public SemanticTokensLegend parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new SemanticTokensLegend(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SemanticTokensLegend> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SemanticTokensLegend> getParserForType() {
    return PARSER;
  }

  public protocol.rpc.SemanticTokensLegend getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

