// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

/**
 * <pre>
 * CompletionItem is the completion items.
 * </pre>
 *
 * Protobuf type {@code protocol.rpc.CompletionItem}
 */
public  final class CompletionItem extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:protocol.rpc.CompletionItem)
    CompletionItemOrBuilder {
  // Use CompletionItem.newBuilder() to construct.
  private CompletionItem(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CompletionItem() {
    label_ = "";
    kind_ = 0;
    tags_ = java.util.Collections.emptyList();
    deprecated_ = false;
    preselect_ = false;
    insertTextFormat_ = 0;
    additionalTextEdits_ = java.util.Collections.emptyList();
    commitCharacters_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private CompletionItem(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            label_ = s;
            break;
          }
          case 16: {
            int rawValue = input.readEnum();

            kind_ = rawValue;
            break;
          }
          case 24: {
            int rawValue = input.readEnum();
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              tags_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000004;
            }
            tags_.add(rawValue);
            break;
          }
          case 26: {
            int length = input.readRawVarint32();
            int oldLimit = input.pushLimit(length);
            while(input.getBytesUntilLimit() > 0) {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                tags_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              tags_.add(rawValue);
            }
            input.popLimit(oldLimit);
            break;
          }
          case 34: {
            com.google.protobuf.StringValue.Builder subBuilder = null;
            if (detail_ != null) {
              subBuilder = detail_.toBuilder();
            }
            detail_ = input.readMessage(com.google.protobuf.StringValue.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(detail_);
              detail_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            protocol.MarkupContent.Builder subBuilder = null;
            if (documentationCase_ == 5) {
              subBuilder = ((protocol.MarkupContent) documentation_).toBuilder();
            }
            documentation_ =
                input.readMessage(protocol.MarkupContent.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((protocol.MarkupContent) documentation_);
              documentation_ = subBuilder.buildPartial();
            }
            documentationCase_ = 5;
            break;
          }
          case 50: {
            java.lang.String s = input.readStringRequireUtf8();
            documentationCase_ = 6;
            documentation_ = s;
            break;
          }
          case 56: {

            deprecated_ = input.readBool();
            break;
          }
          case 64: {

            preselect_ = input.readBool();
            break;
          }
          case 74: {
            com.google.protobuf.StringValue.Builder subBuilder = null;
            if (sortText_ != null) {
              subBuilder = sortText_.toBuilder();
            }
            sortText_ = input.readMessage(com.google.protobuf.StringValue.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(sortText_);
              sortText_ = subBuilder.buildPartial();
            }

            break;
          }
          case 82: {
            com.google.protobuf.StringValue.Builder subBuilder = null;
            if (filterText_ != null) {
              subBuilder = filterText_.toBuilder();
            }
            filterText_ = input.readMessage(com.google.protobuf.StringValue.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(filterText_);
              filterText_ = subBuilder.buildPartial();
            }

            break;
          }
          case 90: {
            com.google.protobuf.StringValue.Builder subBuilder = null;
            if (insertText_ != null) {
              subBuilder = insertText_.toBuilder();
            }
            insertText_ = input.readMessage(com.google.protobuf.StringValue.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(insertText_);
              insertText_ = subBuilder.buildPartial();
            }

            break;
          }
          case 96: {
            int rawValue = input.readEnum();

            insertTextFormat_ = rawValue;
            break;
          }
          case 106: {
            protocol.TextEdit.Builder subBuilder = null;
            if (textEdit_ != null) {
              subBuilder = textEdit_.toBuilder();
            }
            textEdit_ = input.readMessage(protocol.TextEdit.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(textEdit_);
              textEdit_ = subBuilder.buildPartial();
            }

            break;
          }
          case 114: {
            if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
              additionalTextEdits_ = new java.util.ArrayList<protocol.TextEdit>();
              mutable_bitField0_ |= 0x00002000;
            }
            additionalTextEdits_.add(
                input.readMessage(protocol.TextEdit.parser(), extensionRegistry));
            break;
          }
          case 122: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
              commitCharacters_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00004000;
            }
            commitCharacters_.add(s);
            break;
          }
          case 130: {
            protocol.Command.Builder subBuilder = null;
            if (command_ != null) {
              subBuilder = command_.toBuilder();
            }
            command_ = input.readMessage(protocol.Command.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(command_);
              command_ = subBuilder.buildPartial();
            }

            break;
          }
          case 138: {
            com.google.protobuf.Any.Builder subBuilder = null;
            if (data_ != null) {
              subBuilder = data_.toBuilder();
            }
            data_ = input.readMessage(com.google.protobuf.Any.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(data_);
              data_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        tags_ = java.util.Collections.unmodifiableList(tags_);
      }
      if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
        additionalTextEdits_ = java.util.Collections.unmodifiableList(additionalTextEdits_);
      }
      if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
        commitCharacters_ = commitCharacters_.getUnmodifiableView();
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_CompletionItem_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_CompletionItem_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            protocol.rpc.CompletionItem.class, protocol.rpc.CompletionItem.Builder.class);
  }

  private int bitField0_;
  private int documentationCase_ = 0;
  private java.lang.Object documentation_;
  public enum DocumentationCase
      implements com.google.protobuf.Internal.EnumLite {
    MARKUP_CONTENT(5),
    CONTENT(6),
    DOCUMENTATION_NOT_SET(0);
    private final int value;
    private DocumentationCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DocumentationCase valueOf(int value) {
      return forNumber(value);
    }

    public static DocumentationCase forNumber(int value) {
      switch (value) {
        case 5: return MARKUP_CONTENT;
        case 6: return CONTENT;
        case 0: return DOCUMENTATION_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public DocumentationCase
  getDocumentationCase() {
    return DocumentationCase.forNumber(
        documentationCase_);
  }

  public static final int LABEL_FIELD_NUMBER = 1;
  private volatile java.lang.Object label_;
  /**
   * <pre>
   * The label of this completion item. By default
   * also the text that is inserted when selecting
   * this completion.
   * </pre>
   *
   * <code>string label = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public java.lang.String getLabel() {
    java.lang.Object ref = label_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      label_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The label of this completion item. By default
   * also the text that is inserted when selecting
   * this completion.
   * </pre>
   *
   * <code>string label = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public com.google.protobuf.ByteString
      getLabelBytes() {
    java.lang.Object ref = label_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      label_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int KIND_FIELD_NUMBER = 2;
  private int kind_;
  /**
   * <pre>
   * The kind of this completion item. Based of the kind
   * an icon is chosen by the editor. The standardized set
   * of available values is defined in `CompletionItemKind`.
   * </pre>
   *
   * <code>.protocol.rpc.CompletionItemKind kind = 2;</code>
   */
  public int getKindValue() {
    return kind_;
  }
  /**
   * <pre>
   * The kind of this completion item. Based of the kind
   * an icon is chosen by the editor. The standardized set
   * of available values is defined in `CompletionItemKind`.
   * </pre>
   *
   * <code>.protocol.rpc.CompletionItemKind kind = 2;</code>
   */
  public protocol.rpc.CompletionItemKind getKind() {
    protocol.rpc.CompletionItemKind result = protocol.rpc.CompletionItemKind.valueOf(kind_);
    return result == null ? protocol.rpc.CompletionItemKind.UNRECOGNIZED : result;
  }

  public static final int TAGS_FIELD_NUMBER = 3;
  private java.util.List<java.lang.Integer> tags_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, protocol.rpc.CompletionItemTag> tags_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, protocol.rpc.CompletionItemTag>() {
            public protocol.rpc.CompletionItemTag convert(java.lang.Integer from) {
              protocol.rpc.CompletionItemTag result = protocol.rpc.CompletionItemTag.valueOf(from);
              return result == null ? protocol.rpc.CompletionItemTag.UNRECOGNIZED : result;
            }
          };
  /**
   * <pre>
   * Tags for this completion item.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
   */
  public java.util.List<protocol.rpc.CompletionItemTag> getTagsList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, protocol.rpc.CompletionItemTag>(tags_, tags_converter_);
  }
  /**
   * <pre>
   * Tags for this completion item.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
   */
  public int getTagsCount() {
    return tags_.size();
  }
  /**
   * <pre>
   * Tags for this completion item.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
   */
  public protocol.rpc.CompletionItemTag getTags(int index) {
    return tags_converter_.convert(tags_.get(index));
  }
  /**
   * <pre>
   * Tags for this completion item.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
   */
  public java.util.List<java.lang.Integer>
  getTagsValueList() {
    return tags_;
  }
  /**
   * <pre>
   * Tags for this completion item.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
   */
  public int getTagsValue(int index) {
    return tags_.get(index);
  }
  private int tagsMemoizedSerializedSize;

  public static final int DETAIL_FIELD_NUMBER = 4;
  private com.google.protobuf.StringValue detail_;
  /**
   * <pre>
   * A human-readable string with additional information
   * about this item, like type or symbol information.
   * </pre>
   *
   * <code>.google.protobuf.StringValue detail = 4;</code>
   */
  public boolean hasDetail() {
    return detail_ != null;
  }
  /**
   * <pre>
   * A human-readable string with additional information
   * about this item, like type or symbol information.
   * </pre>
   *
   * <code>.google.protobuf.StringValue detail = 4;</code>
   */
  public com.google.protobuf.StringValue getDetail() {
    return detail_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : detail_;
  }
  /**
   * <pre>
   * A human-readable string with additional information
   * about this item, like type or symbol information.
   * </pre>
   *
   * <code>.google.protobuf.StringValue detail = 4;</code>
   */
  public com.google.protobuf.StringValueOrBuilder getDetailOrBuilder() {
    return getDetail();
  }

  public static final int MARKUP_CONTENT_FIELD_NUMBER = 5;
  /**
   * <code>.protocol.MarkupContent markup_content = 5;</code>
   */
  public protocol.MarkupContent getMarkupContent() {
    if (documentationCase_ == 5) {
       return (protocol.MarkupContent) documentation_;
    }
    return protocol.MarkupContent.getDefaultInstance();
  }
  /**
   * <code>.protocol.MarkupContent markup_content = 5;</code>
   */
  public protocol.MarkupContentOrBuilder getMarkupContentOrBuilder() {
    if (documentationCase_ == 5) {
       return (protocol.MarkupContent) documentation_;
    }
    return protocol.MarkupContent.getDefaultInstance();
  }

  public static final int CONTENT_FIELD_NUMBER = 6;
  /**
   * <code>string content = 6;</code>
   */
  public java.lang.String getContent() {
    java.lang.Object ref = "";
    if (documentationCase_ == 6) {
      ref = documentation_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (documentationCase_ == 6) {
        documentation_ = s;
      }
      return s;
    }
  }
  /**
   * <code>string content = 6;</code>
   */
  public com.google.protobuf.ByteString
      getContentBytes() {
    java.lang.Object ref = "";
    if (documentationCase_ == 6) {
      ref = documentation_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (documentationCase_ == 6) {
        documentation_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DEPRECATED_FIELD_NUMBER = 7;
  private boolean deprecated_;
  /**
   * <pre>
   * Indicates if this item is deprecated.
   * Use tags instead if supported.
   * </pre>
   *
   * <code>bool deprecated = 7 [deprecated = true];</code>
   */
  @java.lang.Deprecated public boolean getDeprecated() {
    return deprecated_;
  }

  public static final int PRESELECT_FIELD_NUMBER = 8;
  private boolean preselect_;
  /**
   * <pre>
   * Optional. Select this item when showing.
   * *Note* that only one completion item can be selected and that the
   * tool / client decides which item that is. The rule is that the *first*
   * item of those that match best is selected.
   * </pre>
   *
   * <code>bool preselect = 8;</code>
   */
  public boolean getPreselect() {
    return preselect_;
  }

  public static final int SORT_TEXT_FIELD_NUMBER = 9;
  private com.google.protobuf.StringValue sortText_;
  /**
   * <pre>
   * A string that should be used when comparing this item
   * with other items. When `falsy` the label is used.
   * </pre>
   *
   * <code>.google.protobuf.StringValue sort_text = 9;</code>
   */
  public boolean hasSortText() {
    return sortText_ != null;
  }
  /**
   * <pre>
   * A string that should be used when comparing this item
   * with other items. When `falsy` the label is used.
   * </pre>
   *
   * <code>.google.protobuf.StringValue sort_text = 9;</code>
   */
  public com.google.protobuf.StringValue getSortText() {
    return sortText_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : sortText_;
  }
  /**
   * <pre>
   * A string that should be used when comparing this item
   * with other items. When `falsy` the label is used.
   * </pre>
   *
   * <code>.google.protobuf.StringValue sort_text = 9;</code>
   */
  public com.google.protobuf.StringValueOrBuilder getSortTextOrBuilder() {
    return getSortText();
  }

  public static final int FILTER_TEXT_FIELD_NUMBER = 10;
  private com.google.protobuf.StringValue filterText_;
  /**
   * <pre>
   * A string that should be used when filtering a set of
   * completion items. When `falsy` the label is used.
   * </pre>
   *
   * <code>.google.protobuf.StringValue filter_text = 10;</code>
   */
  public boolean hasFilterText() {
    return filterText_ != null;
  }
  /**
   * <pre>
   * A string that should be used when filtering a set of
   * completion items. When `falsy` the label is used.
   * </pre>
   *
   * <code>.google.protobuf.StringValue filter_text = 10;</code>
   */
  public com.google.protobuf.StringValue getFilterText() {
    return filterText_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : filterText_;
  }
  /**
   * <pre>
   * A string that should be used when filtering a set of
   * completion items. When `falsy` the label is used.
   * </pre>
   *
   * <code>.google.protobuf.StringValue filter_text = 10;</code>
   */
  public com.google.protobuf.StringValueOrBuilder getFilterTextOrBuilder() {
    return getFilterText();
  }

  public static final int INSERT_TEXT_FIELD_NUMBER = 11;
  private com.google.protobuf.StringValue insertText_;
  /**
   * <pre>
   * A string that should be inserted into a document when selecting
   * this completion. When `falsy` the label is used.
   * The `insertText` is subject to interpretation by the client side.
   * Some tools might not take the string literally. For example
   * VS Code when code complete is requested in this example `con&lt;cursor position&gt;`
   * and a completion item with an `insertText` of `console` is provided it
   * will only insert `sole`. Therefore it is recommended to use `textEdit` instead
   * since it avoids additional client side interpretation.
   * </pre>
   *
   * <code>.google.protobuf.StringValue insert_text = 11;</code>
   */
  public boolean hasInsertText() {
    return insertText_ != null;
  }
  /**
   * <pre>
   * A string that should be inserted into a document when selecting
   * this completion. When `falsy` the label is used.
   * The `insertText` is subject to interpretation by the client side.
   * Some tools might not take the string literally. For example
   * VS Code when code complete is requested in this example `con&lt;cursor position&gt;`
   * and a completion item with an `insertText` of `console` is provided it
   * will only insert `sole`. Therefore it is recommended to use `textEdit` instead
   * since it avoids additional client side interpretation.
   * </pre>
   *
   * <code>.google.protobuf.StringValue insert_text = 11;</code>
   */
  public com.google.protobuf.StringValue getInsertText() {
    return insertText_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : insertText_;
  }
  /**
   * <pre>
   * A string that should be inserted into a document when selecting
   * this completion. When `falsy` the label is used.
   * The `insertText` is subject to interpretation by the client side.
   * Some tools might not take the string literally. For example
   * VS Code when code complete is requested in this example `con&lt;cursor position&gt;`
   * and a completion item with an `insertText` of `console` is provided it
   * will only insert `sole`. Therefore it is recommended to use `textEdit` instead
   * since it avoids additional client side interpretation.
   * </pre>
   *
   * <code>.google.protobuf.StringValue insert_text = 11;</code>
   */
  public com.google.protobuf.StringValueOrBuilder getInsertTextOrBuilder() {
    return getInsertText();
  }

  public static final int INSERT_TEXT_FORMAT_FIELD_NUMBER = 12;
  private int insertTextFormat_;
  /**
   * <pre>
   * The format of the insert text. The format applies to both the `insertText` property
   * and the `newText` property of a provided `textEdit`. If omitted defaults to
   * `InsertTextFormat.PlainText`.
   * </pre>
   *
   * <code>.protocol.rpc.InsertTextFormat insert_text_format = 12;</code>
   */
  public int getInsertTextFormatValue() {
    return insertTextFormat_;
  }
  /**
   * <pre>
   * The format of the insert text. The format applies to both the `insertText` property
   * and the `newText` property of a provided `textEdit`. If omitted defaults to
   * `InsertTextFormat.PlainText`.
   * </pre>
   *
   * <code>.protocol.rpc.InsertTextFormat insert_text_format = 12;</code>
   */
  public protocol.rpc.InsertTextFormat getInsertTextFormat() {
    protocol.rpc.InsertTextFormat result = protocol.rpc.InsertTextFormat.valueOf(insertTextFormat_);
    return result == null ? protocol.rpc.InsertTextFormat.UNRECOGNIZED : result;
  }

  public static final int TEXT_EDIT_FIELD_NUMBER = 13;
  private protocol.TextEdit textEdit_;
  /**
   * <pre>
   * An edit which is applied to a document when selecting this completion. When an edit is provided
   * the value of `insertText` is ignored.
   * NOTE: The range of the edit must be a single line range and it must contain the position at
   * which completion has been requested.
   * </pre>
   *
   * <code>.protocol.TextEdit text_edit = 13;</code>
   */
  public boolean hasTextEdit() {
    return textEdit_ != null;
  }
  /**
   * <pre>
   * An edit which is applied to a document when selecting this completion. When an edit is provided
   * the value of `insertText` is ignored.
   * NOTE: The range of the edit must be a single line range and it must contain the position at
   * which completion has been requested.
   * </pre>
   *
   * <code>.protocol.TextEdit text_edit = 13;</code>
   */
  public protocol.TextEdit getTextEdit() {
    return textEdit_ == null ? protocol.TextEdit.getDefaultInstance() : textEdit_;
  }
  /**
   * <pre>
   * An edit which is applied to a document when selecting this completion. When an edit is provided
   * the value of `insertText` is ignored.
   * NOTE: The range of the edit must be a single line range and it must contain the position at
   * which completion has been requested.
   * </pre>
   *
   * <code>.protocol.TextEdit text_edit = 13;</code>
   */
  public protocol.TextEditOrBuilder getTextEditOrBuilder() {
    return getTextEdit();
  }

  public static final int ADDITIONAL_TEXT_EDITS_FIELD_NUMBER = 14;
  private java.util.List<protocol.TextEdit> additionalTextEdits_;
  /**
   * <pre>
   * An optional array of additional text edits that are applied when
   * selecting this completion. Edits must not overlap (including the same insert position)
   * with the main edit nor with themselves.
   * Additional text edits should be used to change text unrelated to the current cursor position
   * (for example adding an import statement at the top of the file if the completion item will
   * insert an unqualified type).
   * </pre>
   *
   * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
   */
  public java.util.List<protocol.TextEdit> getAdditionalTextEditsList() {
    return additionalTextEdits_;
  }
  /**
   * <pre>
   * An optional array of additional text edits that are applied when
   * selecting this completion. Edits must not overlap (including the same insert position)
   * with the main edit nor with themselves.
   * Additional text edits should be used to change text unrelated to the current cursor position
   * (for example adding an import statement at the top of the file if the completion item will
   * insert an unqualified type).
   * </pre>
   *
   * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
   */
  public java.util.List<? extends protocol.TextEditOrBuilder> 
      getAdditionalTextEditsOrBuilderList() {
    return additionalTextEdits_;
  }
  /**
   * <pre>
   * An optional array of additional text edits that are applied when
   * selecting this completion. Edits must not overlap (including the same insert position)
   * with the main edit nor with themselves.
   * Additional text edits should be used to change text unrelated to the current cursor position
   * (for example adding an import statement at the top of the file if the completion item will
   * insert an unqualified type).
   * </pre>
   *
   * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
   */
  public int getAdditionalTextEditsCount() {
    return additionalTextEdits_.size();
  }
  /**
   * <pre>
   * An optional array of additional text edits that are applied when
   * selecting this completion. Edits must not overlap (including the same insert position)
   * with the main edit nor with themselves.
   * Additional text edits should be used to change text unrelated to the current cursor position
   * (for example adding an import statement at the top of the file if the completion item will
   * insert an unqualified type).
   * </pre>
   *
   * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
   */
  public protocol.TextEdit getAdditionalTextEdits(int index) {
    return additionalTextEdits_.get(index);
  }
  /**
   * <pre>
   * An optional array of additional text edits that are applied when
   * selecting this completion. Edits must not overlap (including the same insert position)
   * with the main edit nor with themselves.
   * Additional text edits should be used to change text unrelated to the current cursor position
   * (for example adding an import statement at the top of the file if the completion item will
   * insert an unqualified type).
   * </pre>
   *
   * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
   */
  public protocol.TextEditOrBuilder getAdditionalTextEditsOrBuilder(
      int index) {
    return additionalTextEdits_.get(index);
  }

  public static final int COMMIT_CHARACTERS_FIELD_NUMBER = 15;
  private com.google.protobuf.LazyStringList commitCharacters_;
  /**
   * <pre>
   * An optional set of characters that when pressed while this completion is active will accept it
   * first and then type that character. *Note* that all commit characters should have `length=1`
   * and that superfluous characters will be ignored.
   * </pre>
   *
   * <code>repeated string commit_characters = 15;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getCommitCharactersList() {
    return commitCharacters_;
  }
  /**
   * <pre>
   * An optional set of characters that when pressed while this completion is active will accept it
   * first and then type that character. *Note* that all commit characters should have `length=1`
   * and that superfluous characters will be ignored.
   * </pre>
   *
   * <code>repeated string commit_characters = 15;</code>
   */
  public int getCommitCharactersCount() {
    return commitCharacters_.size();
  }
  /**
   * <pre>
   * An optional set of characters that when pressed while this completion is active will accept it
   * first and then type that character. *Note* that all commit characters should have `length=1`
   * and that superfluous characters will be ignored.
   * </pre>
   *
   * <code>repeated string commit_characters = 15;</code>
   */
  public java.lang.String getCommitCharacters(int index) {
    return commitCharacters_.get(index);
  }
  /**
   * <pre>
   * An optional set of characters that when pressed while this completion is active will accept it
   * first and then type that character. *Note* that all commit characters should have `length=1`
   * and that superfluous characters will be ignored.
   * </pre>
   *
   * <code>repeated string commit_characters = 15;</code>
   */
  public com.google.protobuf.ByteString
      getCommitCharactersBytes(int index) {
    return commitCharacters_.getByteString(index);
  }

  public static final int COMMAND_FIELD_NUMBER = 16;
  private protocol.Command command_;
  /**
   * <pre>
   * Optional. An optional command that is executed *after* inserting this completion. *Note* that
   * additional modifications to the current document should be described with the
   * additionalTextEdits-property.
   * </pre>
   *
   * <code>.protocol.Command command = 16;</code>
   */
  public boolean hasCommand() {
    return command_ != null;
  }
  /**
   * <pre>
   * Optional. An optional command that is executed *after* inserting this completion. *Note* that
   * additional modifications to the current document should be described with the
   * additionalTextEdits-property.
   * </pre>
   *
   * <code>.protocol.Command command = 16;</code>
   */
  public protocol.Command getCommand() {
    return command_ == null ? protocol.Command.getDefaultInstance() : command_;
  }
  /**
   * <pre>
   * Optional. An optional command that is executed *after* inserting this completion. *Note* that
   * additional modifications to the current document should be described with the
   * additionalTextEdits-property.
   * </pre>
   *
   * <code>.protocol.Command command = 16;</code>
   */
  public protocol.CommandOrBuilder getCommandOrBuilder() {
    return getCommand();
  }

  public static final int DATA_FIELD_NUMBER = 17;
  private com.google.protobuf.Any data_;
  /**
   * <pre>
   * A data entry field that is preserved on a completion item between
   * a completion and a completion resolve request.
   * </pre>
   *
   * <code>.google.protobuf.Any data = 17;</code>
   */
  public boolean hasData() {
    return data_ != null;
  }
  /**
   * <pre>
   * A data entry field that is preserved on a completion item between
   * a completion and a completion resolve request.
   * </pre>
   *
   * <code>.google.protobuf.Any data = 17;</code>
   */
  public com.google.protobuf.Any getData() {
    return data_ == null ? com.google.protobuf.Any.getDefaultInstance() : data_;
  }
  /**
   * <pre>
   * A data entry field that is preserved on a completion item between
   * a completion and a completion resolve request.
   * </pre>
   *
   * <code>.google.protobuf.Any data = 17;</code>
   */
  public com.google.protobuf.AnyOrBuilder getDataOrBuilder() {
    return getData();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (!getLabelBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, label_);
    }
    if (kind_ != protocol.rpc.CompletionItemKind.COMPLETION_ITEM_KIND_UNSPECIFIED.getNumber()) {
      output.writeEnum(2, kind_);
    }
    if (getTagsList().size() > 0) {
      output.writeUInt32NoTag(26);
      output.writeUInt32NoTag(tagsMemoizedSerializedSize);
    }
    for (int i = 0; i < tags_.size(); i++) {
      output.writeEnumNoTag(tags_.get(i));
    }
    if (detail_ != null) {
      output.writeMessage(4, getDetail());
    }
    if (documentationCase_ == 5) {
      output.writeMessage(5, (protocol.MarkupContent) documentation_);
    }
    if (documentationCase_ == 6) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, documentation_);
    }
    if (deprecated_ != false) {
      output.writeBool(7, deprecated_);
    }
    if (preselect_ != false) {
      output.writeBool(8, preselect_);
    }
    if (sortText_ != null) {
      output.writeMessage(9, getSortText());
    }
    if (filterText_ != null) {
      output.writeMessage(10, getFilterText());
    }
    if (insertText_ != null) {
      output.writeMessage(11, getInsertText());
    }
    if (insertTextFormat_ != protocol.rpc.InsertTextFormat.INSERT_TEXT_FORMAT_UNSPECIFIED.getNumber()) {
      output.writeEnum(12, insertTextFormat_);
    }
    if (textEdit_ != null) {
      output.writeMessage(13, getTextEdit());
    }
    for (int i = 0; i < additionalTextEdits_.size(); i++) {
      output.writeMessage(14, additionalTextEdits_.get(i));
    }
    for (int i = 0; i < commitCharacters_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 15, commitCharacters_.getRaw(i));
    }
    if (command_ != null) {
      output.writeMessage(16, getCommand());
    }
    if (data_ != null) {
      output.writeMessage(17, getData());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getLabelBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, label_);
    }
    if (kind_ != protocol.rpc.CompletionItemKind.COMPLETION_ITEM_KIND_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, kind_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < tags_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(tags_.get(i));
      }
      size += dataSize;
      if (!getTagsList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }tagsMemoizedSerializedSize = dataSize;
    }
    if (detail_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getDetail());
    }
    if (documentationCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (protocol.MarkupContent) documentation_);
    }
    if (documentationCase_ == 6) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, documentation_);
    }
    if (deprecated_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, deprecated_);
    }
    if (preselect_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, preselect_);
    }
    if (sortText_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getSortText());
    }
    if (filterText_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getFilterText());
    }
    if (insertText_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getInsertText());
    }
    if (insertTextFormat_ != protocol.rpc.InsertTextFormat.INSERT_TEXT_FORMAT_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(12, insertTextFormat_);
    }
    if (textEdit_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, getTextEdit());
    }
    for (int i = 0; i < additionalTextEdits_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, additionalTextEdits_.get(i));
    }
    {
      int dataSize = 0;
      for (int i = 0; i < commitCharacters_.size(); i++) {
        dataSize += computeStringSizeNoTag(commitCharacters_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getCommitCharactersList().size();
    }
    if (command_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, getCommand());
    }
    if (data_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(17, getData());
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof protocol.rpc.CompletionItem)) {
      return super.equals(obj);
    }
    protocol.rpc.CompletionItem other = (protocol.rpc.CompletionItem) obj;

    boolean result = true;
    result = result && getLabel()
        .equals(other.getLabel());
    result = result && kind_ == other.kind_;
    result = result && tags_.equals(other.tags_);
    result = result && (hasDetail() == other.hasDetail());
    if (hasDetail()) {
      result = result && getDetail()
          .equals(other.getDetail());
    }
    result = result && (getDeprecated()
        == other.getDeprecated());
    result = result && (getPreselect()
        == other.getPreselect());
    result = result && (hasSortText() == other.hasSortText());
    if (hasSortText()) {
      result = result && getSortText()
          .equals(other.getSortText());
    }
    result = result && (hasFilterText() == other.hasFilterText());
    if (hasFilterText()) {
      result = result && getFilterText()
          .equals(other.getFilterText());
    }
    result = result && (hasInsertText() == other.hasInsertText());
    if (hasInsertText()) {
      result = result && getInsertText()
          .equals(other.getInsertText());
    }
    result = result && insertTextFormat_ == other.insertTextFormat_;
    result = result && (hasTextEdit() == other.hasTextEdit());
    if (hasTextEdit()) {
      result = result && getTextEdit()
          .equals(other.getTextEdit());
    }
    result = result && getAdditionalTextEditsList()
        .equals(other.getAdditionalTextEditsList());
    result = result && getCommitCharactersList()
        .equals(other.getCommitCharactersList());
    result = result && (hasCommand() == other.hasCommand());
    if (hasCommand()) {
      result = result && getCommand()
          .equals(other.getCommand());
    }
    result = result && (hasData() == other.hasData());
    if (hasData()) {
      result = result && getData()
          .equals(other.getData());
    }
    result = result && getDocumentationCase().equals(
        other.getDocumentationCase());
    if (!result) return false;
    switch (documentationCase_) {
      case 5:
        result = result && getMarkupContent()
            .equals(other.getMarkupContent());
        break;
      case 6:
        result = result && getContent()
            .equals(other.getContent());
        break;
      case 0:
      default:
    }
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + LABEL_FIELD_NUMBER;
    hash = (53 * hash) + getLabel().hashCode();
    hash = (37 * hash) + KIND_FIELD_NUMBER;
    hash = (53 * hash) + kind_;
    if (getTagsCount() > 0) {
      hash = (37 * hash) + TAGS_FIELD_NUMBER;
      hash = (53 * hash) + tags_.hashCode();
    }
    if (hasDetail()) {
      hash = (37 * hash) + DETAIL_FIELD_NUMBER;
      hash = (53 * hash) + getDetail().hashCode();
    }
    hash = (37 * hash) + DEPRECATED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getDeprecated());
    hash = (37 * hash) + PRESELECT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getPreselect());
    if (hasSortText()) {
      hash = (37 * hash) + SORT_TEXT_FIELD_NUMBER;
      hash = (53 * hash) + getSortText().hashCode();
    }
    if (hasFilterText()) {
      hash = (37 * hash) + FILTER_TEXT_FIELD_NUMBER;
      hash = (53 * hash) + getFilterText().hashCode();
    }
    if (hasInsertText()) {
      hash = (37 * hash) + INSERT_TEXT_FIELD_NUMBER;
      hash = (53 * hash) + getInsertText().hashCode();
    }
    hash = (37 * hash) + INSERT_TEXT_FORMAT_FIELD_NUMBER;
    hash = (53 * hash) + insertTextFormat_;
    if (hasTextEdit()) {
      hash = (37 * hash) + TEXT_EDIT_FIELD_NUMBER;
      hash = (53 * hash) + getTextEdit().hashCode();
    }
    if (getAdditionalTextEditsCount() > 0) {
      hash = (37 * hash) + ADDITIONAL_TEXT_EDITS_FIELD_NUMBER;
      hash = (53 * hash) + getAdditionalTextEditsList().hashCode();
    }
    if (getCommitCharactersCount() > 0) {
      hash = (37 * hash) + COMMIT_CHARACTERS_FIELD_NUMBER;
      hash = (53 * hash) + getCommitCharactersList().hashCode();
    }
    if (hasCommand()) {
      hash = (37 * hash) + COMMAND_FIELD_NUMBER;
      hash = (53 * hash) + getCommand().hashCode();
    }
    if (hasData()) {
      hash = (37 * hash) + DATA_FIELD_NUMBER;
      hash = (53 * hash) + getData().hashCode();
    }
    switch (documentationCase_) {
      case 5:
        hash = (37 * hash) + MARKUP_CONTENT_FIELD_NUMBER;
        hash = (53 * hash) + getMarkupContent().hashCode();
        break;
      case 6:
        hash = (37 * hash) + CONTENT_FIELD_NUMBER;
        hash = (53 * hash) + getContent().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static protocol.rpc.CompletionItem parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.CompletionItem parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.CompletionItem parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.CompletionItem parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.CompletionItem parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.CompletionItem parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.CompletionItem parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static protocol.rpc.CompletionItem parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.CompletionItem parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.CompletionItem parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(protocol.rpc.CompletionItem prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * CompletionItem is the completion items.
   * </pre>
   *
   * Protobuf type {@code protocol.rpc.CompletionItem}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:protocol.rpc.CompletionItem)
      protocol.rpc.CompletionItemOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_CompletionItem_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_CompletionItem_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol.rpc.CompletionItem.class, protocol.rpc.CompletionItem.Builder.class);
    }

    // Construct using protocol.rpc.CompletionItem.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getAdditionalTextEditsFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      label_ = "";

      kind_ = 0;

      tags_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      if (detailBuilder_ == null) {
        detail_ = null;
      } else {
        detail_ = null;
        detailBuilder_ = null;
      }
      deprecated_ = false;

      preselect_ = false;

      if (sortTextBuilder_ == null) {
        sortText_ = null;
      } else {
        sortText_ = null;
        sortTextBuilder_ = null;
      }
      if (filterTextBuilder_ == null) {
        filterText_ = null;
      } else {
        filterText_ = null;
        filterTextBuilder_ = null;
      }
      if (insertTextBuilder_ == null) {
        insertText_ = null;
      } else {
        insertText_ = null;
        insertTextBuilder_ = null;
      }
      insertTextFormat_ = 0;

      if (textEditBuilder_ == null) {
        textEdit_ = null;
      } else {
        textEdit_ = null;
        textEditBuilder_ = null;
      }
      if (additionalTextEditsBuilder_ == null) {
        additionalTextEdits_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
      } else {
        additionalTextEditsBuilder_.clear();
      }
      commitCharacters_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00004000);
      if (commandBuilder_ == null) {
        command_ = null;
      } else {
        command_ = null;
        commandBuilder_ = null;
      }
      if (dataBuilder_ == null) {
        data_ = null;
      } else {
        data_ = null;
        dataBuilder_ = null;
      }
      documentationCase_ = 0;
      documentation_ = null;
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_CompletionItem_descriptor;
    }

    public protocol.rpc.CompletionItem getDefaultInstanceForType() {
      return protocol.rpc.CompletionItem.getDefaultInstance();
    }

    public protocol.rpc.CompletionItem build() {
      protocol.rpc.CompletionItem result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public protocol.rpc.CompletionItem buildPartial() {
      protocol.rpc.CompletionItem result = new protocol.rpc.CompletionItem(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.label_ = label_;
      result.kind_ = kind_;
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        tags_ = java.util.Collections.unmodifiableList(tags_);
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.tags_ = tags_;
      if (detailBuilder_ == null) {
        result.detail_ = detail_;
      } else {
        result.detail_ = detailBuilder_.build();
      }
      if (documentationCase_ == 5) {
        if (markupContentBuilder_ == null) {
          result.documentation_ = documentation_;
        } else {
          result.documentation_ = markupContentBuilder_.build();
        }
      }
      if (documentationCase_ == 6) {
        result.documentation_ = documentation_;
      }
      result.deprecated_ = deprecated_;
      result.preselect_ = preselect_;
      if (sortTextBuilder_ == null) {
        result.sortText_ = sortText_;
      } else {
        result.sortText_ = sortTextBuilder_.build();
      }
      if (filterTextBuilder_ == null) {
        result.filterText_ = filterText_;
      } else {
        result.filterText_ = filterTextBuilder_.build();
      }
      if (insertTextBuilder_ == null) {
        result.insertText_ = insertText_;
      } else {
        result.insertText_ = insertTextBuilder_.build();
      }
      result.insertTextFormat_ = insertTextFormat_;
      if (textEditBuilder_ == null) {
        result.textEdit_ = textEdit_;
      } else {
        result.textEdit_ = textEditBuilder_.build();
      }
      if (additionalTextEditsBuilder_ == null) {
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          additionalTextEdits_ = java.util.Collections.unmodifiableList(additionalTextEdits_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.additionalTextEdits_ = additionalTextEdits_;
      } else {
        result.additionalTextEdits_ = additionalTextEditsBuilder_.build();
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        commitCharacters_ = commitCharacters_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00004000);
      }
      result.commitCharacters_ = commitCharacters_;
      if (commandBuilder_ == null) {
        result.command_ = command_;
      } else {
        result.command_ = commandBuilder_.build();
      }
      if (dataBuilder_ == null) {
        result.data_ = data_;
      } else {
        result.data_ = dataBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      result.documentationCase_ = documentationCase_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof protocol.rpc.CompletionItem) {
        return mergeFrom((protocol.rpc.CompletionItem)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(protocol.rpc.CompletionItem other) {
      if (other == protocol.rpc.CompletionItem.getDefaultInstance()) return this;
      if (!other.getLabel().isEmpty()) {
        label_ = other.label_;
        onChanged();
      }
      if (other.kind_ != 0) {
        setKindValue(other.getKindValue());
      }
      if (!other.tags_.isEmpty()) {
        if (tags_.isEmpty()) {
          tags_ = other.tags_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureTagsIsMutable();
          tags_.addAll(other.tags_);
        }
        onChanged();
      }
      if (other.hasDetail()) {
        mergeDetail(other.getDetail());
      }
      if (other.getDeprecated() != false) {
        setDeprecated(other.getDeprecated());
      }
      if (other.getPreselect() != false) {
        setPreselect(other.getPreselect());
      }
      if (other.hasSortText()) {
        mergeSortText(other.getSortText());
      }
      if (other.hasFilterText()) {
        mergeFilterText(other.getFilterText());
      }
      if (other.hasInsertText()) {
        mergeInsertText(other.getInsertText());
      }
      if (other.insertTextFormat_ != 0) {
        setInsertTextFormatValue(other.getInsertTextFormatValue());
      }
      if (other.hasTextEdit()) {
        mergeTextEdit(other.getTextEdit());
      }
      if (additionalTextEditsBuilder_ == null) {
        if (!other.additionalTextEdits_.isEmpty()) {
          if (additionalTextEdits_.isEmpty()) {
            additionalTextEdits_ = other.additionalTextEdits_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureAdditionalTextEditsIsMutable();
            additionalTextEdits_.addAll(other.additionalTextEdits_);
          }
          onChanged();
        }
      } else {
        if (!other.additionalTextEdits_.isEmpty()) {
          if (additionalTextEditsBuilder_.isEmpty()) {
            additionalTextEditsBuilder_.dispose();
            additionalTextEditsBuilder_ = null;
            additionalTextEdits_ = other.additionalTextEdits_;
            bitField0_ = (bitField0_ & ~0x00002000);
            additionalTextEditsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getAdditionalTextEditsFieldBuilder() : null;
          } else {
            additionalTextEditsBuilder_.addAllMessages(other.additionalTextEdits_);
          }
        }
      }
      if (!other.commitCharacters_.isEmpty()) {
        if (commitCharacters_.isEmpty()) {
          commitCharacters_ = other.commitCharacters_;
          bitField0_ = (bitField0_ & ~0x00004000);
        } else {
          ensureCommitCharactersIsMutable();
          commitCharacters_.addAll(other.commitCharacters_);
        }
        onChanged();
      }
      if (other.hasCommand()) {
        mergeCommand(other.getCommand());
      }
      if (other.hasData()) {
        mergeData(other.getData());
      }
      switch (other.getDocumentationCase()) {
        case MARKUP_CONTENT: {
          mergeMarkupContent(other.getMarkupContent());
          break;
        }
        case CONTENT: {
          documentationCase_ = 6;
          documentation_ = other.documentation_;
          onChanged();
          break;
        }
        case DOCUMENTATION_NOT_SET: {
          break;
        }
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      protocol.rpc.CompletionItem parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (protocol.rpc.CompletionItem) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int documentationCase_ = 0;
    private java.lang.Object documentation_;
    public DocumentationCase
        getDocumentationCase() {
      return DocumentationCase.forNumber(
          documentationCase_);
    }

    public Builder clearDocumentation() {
      documentationCase_ = 0;
      documentation_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private java.lang.Object label_ = "";
    /**
     * <pre>
     * The label of this completion item. By default
     * also the text that is inserted when selecting
     * this completion.
     * </pre>
     *
     * <code>string label = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.lang.String getLabel() {
      java.lang.Object ref = label_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        label_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The label of this completion item. By default
     * also the text that is inserted when selecting
     * this completion.
     * </pre>
     *
     * <code>string label = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.protobuf.ByteString
        getLabelBytes() {
      java.lang.Object ref = label_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        label_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The label of this completion item. By default
     * also the text that is inserted when selecting
     * this completion.
     * </pre>
     *
     * <code>string label = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setLabel(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      label_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The label of this completion item. By default
     * also the text that is inserted when selecting
     * this completion.
     * </pre>
     *
     * <code>string label = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearLabel() {
      
      label_ = getDefaultInstance().getLabel();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The label of this completion item. By default
     * also the text that is inserted when selecting
     * this completion.
     * </pre>
     *
     * <code>string label = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setLabelBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      label_ = value;
      onChanged();
      return this;
    }

    private int kind_ = 0;
    /**
     * <pre>
     * The kind of this completion item. Based of the kind
     * an icon is chosen by the editor. The standardized set
     * of available values is defined in `CompletionItemKind`.
     * </pre>
     *
     * <code>.protocol.rpc.CompletionItemKind kind = 2;</code>
     */
    public int getKindValue() {
      return kind_;
    }
    /**
     * <pre>
     * The kind of this completion item. Based of the kind
     * an icon is chosen by the editor. The standardized set
     * of available values is defined in `CompletionItemKind`.
     * </pre>
     *
     * <code>.protocol.rpc.CompletionItemKind kind = 2;</code>
     */
    public Builder setKindValue(int value) {
      kind_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The kind of this completion item. Based of the kind
     * an icon is chosen by the editor. The standardized set
     * of available values is defined in `CompletionItemKind`.
     * </pre>
     *
     * <code>.protocol.rpc.CompletionItemKind kind = 2;</code>
     */
    public protocol.rpc.CompletionItemKind getKind() {
      protocol.rpc.CompletionItemKind result = protocol.rpc.CompletionItemKind.valueOf(kind_);
      return result == null ? protocol.rpc.CompletionItemKind.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The kind of this completion item. Based of the kind
     * an icon is chosen by the editor. The standardized set
     * of available values is defined in `CompletionItemKind`.
     * </pre>
     *
     * <code>.protocol.rpc.CompletionItemKind kind = 2;</code>
     */
    public Builder setKind(protocol.rpc.CompletionItemKind value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      kind_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The kind of this completion item. Based of the kind
     * an icon is chosen by the editor. The standardized set
     * of available values is defined in `CompletionItemKind`.
     * </pre>
     *
     * <code>.protocol.rpc.CompletionItemKind kind = 2;</code>
     */
    public Builder clearKind() {
      
      kind_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Integer> tags_ =
      java.util.Collections.emptyList();
    private void ensureTagsIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        tags_ = new java.util.ArrayList<java.lang.Integer>(tags_);
        bitField0_ |= 0x00000004;
      }
    }
    /**
     * <pre>
     * Tags for this completion item.
     * &#64;since 3.15.0
     * </pre>
     *
     * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
     */
    public java.util.List<protocol.rpc.CompletionItemTag> getTagsList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, protocol.rpc.CompletionItemTag>(tags_, tags_converter_);
    }
    /**
     * <pre>
     * Tags for this completion item.
     * &#64;since 3.15.0
     * </pre>
     *
     * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
     */
    public int getTagsCount() {
      return tags_.size();
    }
    /**
     * <pre>
     * Tags for this completion item.
     * &#64;since 3.15.0
     * </pre>
     *
     * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
     */
    public protocol.rpc.CompletionItemTag getTags(int index) {
      return tags_converter_.convert(tags_.get(index));
    }
    /**
     * <pre>
     * Tags for this completion item.
     * &#64;since 3.15.0
     * </pre>
     *
     * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
     */
    public Builder setTags(
        int index, protocol.rpc.CompletionItemTag value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTagsIsMutable();
      tags_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Tags for this completion item.
     * &#64;since 3.15.0
     * </pre>
     *
     * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
     */
    public Builder addTags(protocol.rpc.CompletionItemTag value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTagsIsMutable();
      tags_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Tags for this completion item.
     * &#64;since 3.15.0
     * </pre>
     *
     * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
     */
    public Builder addAllTags(
        java.lang.Iterable<? extends protocol.rpc.CompletionItemTag> values) {
      ensureTagsIsMutable();
      for (protocol.rpc.CompletionItemTag value : values) {
        tags_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Tags for this completion item.
     * &#64;since 3.15.0
     * </pre>
     *
     * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
     */
    public Builder clearTags() {
      tags_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Tags for this completion item.
     * &#64;since 3.15.0
     * </pre>
     *
     * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
     */
    public java.util.List<java.lang.Integer>
    getTagsValueList() {
      return java.util.Collections.unmodifiableList(tags_);
    }
    /**
     * <pre>
     * Tags for this completion item.
     * &#64;since 3.15.0
     * </pre>
     *
     * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
     */
    public int getTagsValue(int index) {
      return tags_.get(index);
    }
    /**
     * <pre>
     * Tags for this completion item.
     * &#64;since 3.15.0
     * </pre>
     *
     * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
     */
    public Builder setTagsValue(
        int index, int value) {
      ensureTagsIsMutable();
      tags_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Tags for this completion item.
     * &#64;since 3.15.0
     * </pre>
     *
     * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
     */
    public Builder addTagsValue(int value) {
      ensureTagsIsMutable();
      tags_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Tags for this completion item.
     * &#64;since 3.15.0
     * </pre>
     *
     * <code>repeated .protocol.rpc.CompletionItemTag tags = 3;</code>
     */
    public Builder addAllTagsValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureTagsIsMutable();
      for (int value : values) {
        tags_.add(value);
      }
      onChanged();
      return this;
    }

    private com.google.protobuf.StringValue detail_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder> detailBuilder_;
    /**
     * <pre>
     * A human-readable string with additional information
     * about this item, like type or symbol information.
     * </pre>
     *
     * <code>.google.protobuf.StringValue detail = 4;</code>
     */
    public boolean hasDetail() {
      return detailBuilder_ != null || detail_ != null;
    }
    /**
     * <pre>
     * A human-readable string with additional information
     * about this item, like type or symbol information.
     * </pre>
     *
     * <code>.google.protobuf.StringValue detail = 4;</code>
     */
    public com.google.protobuf.StringValue getDetail() {
      if (detailBuilder_ == null) {
        return detail_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : detail_;
      } else {
        return detailBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * A human-readable string with additional information
     * about this item, like type or symbol information.
     * </pre>
     *
     * <code>.google.protobuf.StringValue detail = 4;</code>
     */
    public Builder setDetail(com.google.protobuf.StringValue value) {
      if (detailBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        detail_ = value;
        onChanged();
      } else {
        detailBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * A human-readable string with additional information
     * about this item, like type or symbol information.
     * </pre>
     *
     * <code>.google.protobuf.StringValue detail = 4;</code>
     */
    public Builder setDetail(
        com.google.protobuf.StringValue.Builder builderForValue) {
      if (detailBuilder_ == null) {
        detail_ = builderForValue.build();
        onChanged();
      } else {
        detailBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * A human-readable string with additional information
     * about this item, like type or symbol information.
     * </pre>
     *
     * <code>.google.protobuf.StringValue detail = 4;</code>
     */
    public Builder mergeDetail(com.google.protobuf.StringValue value) {
      if (detailBuilder_ == null) {
        if (detail_ != null) {
          detail_ =
            com.google.protobuf.StringValue.newBuilder(detail_).mergeFrom(value).buildPartial();
        } else {
          detail_ = value;
        }
        onChanged();
      } else {
        detailBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * A human-readable string with additional information
     * about this item, like type or symbol information.
     * </pre>
     *
     * <code>.google.protobuf.StringValue detail = 4;</code>
     */
    public Builder clearDetail() {
      if (detailBuilder_ == null) {
        detail_ = null;
        onChanged();
      } else {
        detail_ = null;
        detailBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * A human-readable string with additional information
     * about this item, like type or symbol information.
     * </pre>
     *
     * <code>.google.protobuf.StringValue detail = 4;</code>
     */
    public com.google.protobuf.StringValue.Builder getDetailBuilder() {
      
      onChanged();
      return getDetailFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A human-readable string with additional information
     * about this item, like type or symbol information.
     * </pre>
     *
     * <code>.google.protobuf.StringValue detail = 4;</code>
     */
    public com.google.protobuf.StringValueOrBuilder getDetailOrBuilder() {
      if (detailBuilder_ != null) {
        return detailBuilder_.getMessageOrBuilder();
      } else {
        return detail_ == null ?
            com.google.protobuf.StringValue.getDefaultInstance() : detail_;
      }
    }
    /**
     * <pre>
     * A human-readable string with additional information
     * about this item, like type or symbol information.
     * </pre>
     *
     * <code>.google.protobuf.StringValue detail = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder> 
        getDetailFieldBuilder() {
      if (detailBuilder_ == null) {
        detailBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder>(
                getDetail(),
                getParentForChildren(),
                isClean());
        detail_ = null;
      }
      return detailBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        protocol.MarkupContent, protocol.MarkupContent.Builder, protocol.MarkupContentOrBuilder> markupContentBuilder_;
    /**
     * <code>.protocol.MarkupContent markup_content = 5;</code>
     */
    public protocol.MarkupContent getMarkupContent() {
      if (markupContentBuilder_ == null) {
        if (documentationCase_ == 5) {
          return (protocol.MarkupContent) documentation_;
        }
        return protocol.MarkupContent.getDefaultInstance();
      } else {
        if (documentationCase_ == 5) {
          return markupContentBuilder_.getMessage();
        }
        return protocol.MarkupContent.getDefaultInstance();
      }
    }
    /**
     * <code>.protocol.MarkupContent markup_content = 5;</code>
     */
    public Builder setMarkupContent(protocol.MarkupContent value) {
      if (markupContentBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        documentation_ = value;
        onChanged();
      } else {
        markupContentBuilder_.setMessage(value);
      }
      documentationCase_ = 5;
      return this;
    }
    /**
     * <code>.protocol.MarkupContent markup_content = 5;</code>
     */
    public Builder setMarkupContent(
        protocol.MarkupContent.Builder builderForValue) {
      if (markupContentBuilder_ == null) {
        documentation_ = builderForValue.build();
        onChanged();
      } else {
        markupContentBuilder_.setMessage(builderForValue.build());
      }
      documentationCase_ = 5;
      return this;
    }
    /**
     * <code>.protocol.MarkupContent markup_content = 5;</code>
     */
    public Builder mergeMarkupContent(protocol.MarkupContent value) {
      if (markupContentBuilder_ == null) {
        if (documentationCase_ == 5 &&
            documentation_ != protocol.MarkupContent.getDefaultInstance()) {
          documentation_ = protocol.MarkupContent.newBuilder((protocol.MarkupContent) documentation_)
              .mergeFrom(value).buildPartial();
        } else {
          documentation_ = value;
        }
        onChanged();
      } else {
        if (documentationCase_ == 5) {
          markupContentBuilder_.mergeFrom(value);
        }
        markupContentBuilder_.setMessage(value);
      }
      documentationCase_ = 5;
      return this;
    }
    /**
     * <code>.protocol.MarkupContent markup_content = 5;</code>
     */
    public Builder clearMarkupContent() {
      if (markupContentBuilder_ == null) {
        if (documentationCase_ == 5) {
          documentationCase_ = 0;
          documentation_ = null;
          onChanged();
        }
      } else {
        if (documentationCase_ == 5) {
          documentationCase_ = 0;
          documentation_ = null;
        }
        markupContentBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.protocol.MarkupContent markup_content = 5;</code>
     */
    public protocol.MarkupContent.Builder getMarkupContentBuilder() {
      return getMarkupContentFieldBuilder().getBuilder();
    }
    /**
     * <code>.protocol.MarkupContent markup_content = 5;</code>
     */
    public protocol.MarkupContentOrBuilder getMarkupContentOrBuilder() {
      if ((documentationCase_ == 5) && (markupContentBuilder_ != null)) {
        return markupContentBuilder_.getMessageOrBuilder();
      } else {
        if (documentationCase_ == 5) {
          return (protocol.MarkupContent) documentation_;
        }
        return protocol.MarkupContent.getDefaultInstance();
      }
    }
    /**
     * <code>.protocol.MarkupContent markup_content = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        protocol.MarkupContent, protocol.MarkupContent.Builder, protocol.MarkupContentOrBuilder> 
        getMarkupContentFieldBuilder() {
      if (markupContentBuilder_ == null) {
        if (!(documentationCase_ == 5)) {
          documentation_ = protocol.MarkupContent.getDefaultInstance();
        }
        markupContentBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            protocol.MarkupContent, protocol.MarkupContent.Builder, protocol.MarkupContentOrBuilder>(
                (protocol.MarkupContent) documentation_,
                getParentForChildren(),
                isClean());
        documentation_ = null;
      }
      documentationCase_ = 5;
      onChanged();;
      return markupContentBuilder_;
    }

    /**
     * <code>string content = 6;</code>
     */
    public java.lang.String getContent() {
      java.lang.Object ref = "";
      if (documentationCase_ == 6) {
        ref = documentation_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (documentationCase_ == 6) {
          documentation_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string content = 6;</code>
     */
    public com.google.protobuf.ByteString
        getContentBytes() {
      java.lang.Object ref = "";
      if (documentationCase_ == 6) {
        ref = documentation_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (documentationCase_ == 6) {
          documentation_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string content = 6;</code>
     */
    public Builder setContent(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  documentationCase_ = 6;
      documentation_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string content = 6;</code>
     */
    public Builder clearContent() {
      if (documentationCase_ == 6) {
        documentationCase_ = 0;
        documentation_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <code>string content = 6;</code>
     */
    public Builder setContentBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      documentationCase_ = 6;
      documentation_ = value;
      onChanged();
      return this;
    }

    private boolean deprecated_ ;
    /**
     * <pre>
     * Indicates if this item is deprecated.
     * Use tags instead if supported.
     * </pre>
     *
     * <code>bool deprecated = 7 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean getDeprecated() {
      return deprecated_;
    }
    /**
     * <pre>
     * Indicates if this item is deprecated.
     * Use tags instead if supported.
     * </pre>
     *
     * <code>bool deprecated = 7 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setDeprecated(boolean value) {
      
      deprecated_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Indicates if this item is deprecated.
     * Use tags instead if supported.
     * </pre>
     *
     * <code>bool deprecated = 7 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearDeprecated() {
      
      deprecated_ = false;
      onChanged();
      return this;
    }

    private boolean preselect_ ;
    /**
     * <pre>
     * Optional. Select this item when showing.
     * *Note* that only one completion item can be selected and that the
     * tool / client decides which item that is. The rule is that the *first*
     * item of those that match best is selected.
     * </pre>
     *
     * <code>bool preselect = 8;</code>
     */
    public boolean getPreselect() {
      return preselect_;
    }
    /**
     * <pre>
     * Optional. Select this item when showing.
     * *Note* that only one completion item can be selected and that the
     * tool / client decides which item that is. The rule is that the *first*
     * item of those that match best is selected.
     * </pre>
     *
     * <code>bool preselect = 8;</code>
     */
    public Builder setPreselect(boolean value) {
      
      preselect_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. Select this item when showing.
     * *Note* that only one completion item can be selected and that the
     * tool / client decides which item that is. The rule is that the *first*
     * item of those that match best is selected.
     * </pre>
     *
     * <code>bool preselect = 8;</code>
     */
    public Builder clearPreselect() {
      
      preselect_ = false;
      onChanged();
      return this;
    }

    private com.google.protobuf.StringValue sortText_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder> sortTextBuilder_;
    /**
     * <pre>
     * A string that should be used when comparing this item
     * with other items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue sort_text = 9;</code>
     */
    public boolean hasSortText() {
      return sortTextBuilder_ != null || sortText_ != null;
    }
    /**
     * <pre>
     * A string that should be used when comparing this item
     * with other items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue sort_text = 9;</code>
     */
    public com.google.protobuf.StringValue getSortText() {
      if (sortTextBuilder_ == null) {
        return sortText_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : sortText_;
      } else {
        return sortTextBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * A string that should be used when comparing this item
     * with other items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue sort_text = 9;</code>
     */
    public Builder setSortText(com.google.protobuf.StringValue value) {
      if (sortTextBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sortText_ = value;
        onChanged();
      } else {
        sortTextBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * A string that should be used when comparing this item
     * with other items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue sort_text = 9;</code>
     */
    public Builder setSortText(
        com.google.protobuf.StringValue.Builder builderForValue) {
      if (sortTextBuilder_ == null) {
        sortText_ = builderForValue.build();
        onChanged();
      } else {
        sortTextBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * A string that should be used when comparing this item
     * with other items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue sort_text = 9;</code>
     */
    public Builder mergeSortText(com.google.protobuf.StringValue value) {
      if (sortTextBuilder_ == null) {
        if (sortText_ != null) {
          sortText_ =
            com.google.protobuf.StringValue.newBuilder(sortText_).mergeFrom(value).buildPartial();
        } else {
          sortText_ = value;
        }
        onChanged();
      } else {
        sortTextBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * A string that should be used when comparing this item
     * with other items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue sort_text = 9;</code>
     */
    public Builder clearSortText() {
      if (sortTextBuilder_ == null) {
        sortText_ = null;
        onChanged();
      } else {
        sortText_ = null;
        sortTextBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * A string that should be used when comparing this item
     * with other items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue sort_text = 9;</code>
     */
    public com.google.protobuf.StringValue.Builder getSortTextBuilder() {
      
      onChanged();
      return getSortTextFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A string that should be used when comparing this item
     * with other items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue sort_text = 9;</code>
     */
    public com.google.protobuf.StringValueOrBuilder getSortTextOrBuilder() {
      if (sortTextBuilder_ != null) {
        return sortTextBuilder_.getMessageOrBuilder();
      } else {
        return sortText_ == null ?
            com.google.protobuf.StringValue.getDefaultInstance() : sortText_;
      }
    }
    /**
     * <pre>
     * A string that should be used when comparing this item
     * with other items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue sort_text = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder> 
        getSortTextFieldBuilder() {
      if (sortTextBuilder_ == null) {
        sortTextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder>(
                getSortText(),
                getParentForChildren(),
                isClean());
        sortText_ = null;
      }
      return sortTextBuilder_;
    }

    private com.google.protobuf.StringValue filterText_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder> filterTextBuilder_;
    /**
     * <pre>
     * A string that should be used when filtering a set of
     * completion items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue filter_text = 10;</code>
     */
    public boolean hasFilterText() {
      return filterTextBuilder_ != null || filterText_ != null;
    }
    /**
     * <pre>
     * A string that should be used when filtering a set of
     * completion items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue filter_text = 10;</code>
     */
    public com.google.protobuf.StringValue getFilterText() {
      if (filterTextBuilder_ == null) {
        return filterText_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : filterText_;
      } else {
        return filterTextBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * A string that should be used when filtering a set of
     * completion items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue filter_text = 10;</code>
     */
    public Builder setFilterText(com.google.protobuf.StringValue value) {
      if (filterTextBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        filterText_ = value;
        onChanged();
      } else {
        filterTextBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * A string that should be used when filtering a set of
     * completion items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue filter_text = 10;</code>
     */
    public Builder setFilterText(
        com.google.protobuf.StringValue.Builder builderForValue) {
      if (filterTextBuilder_ == null) {
        filterText_ = builderForValue.build();
        onChanged();
      } else {
        filterTextBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * A string that should be used when filtering a set of
     * completion items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue filter_text = 10;</code>
     */
    public Builder mergeFilterText(com.google.protobuf.StringValue value) {
      if (filterTextBuilder_ == null) {
        if (filterText_ != null) {
          filterText_ =
            com.google.protobuf.StringValue.newBuilder(filterText_).mergeFrom(value).buildPartial();
        } else {
          filterText_ = value;
        }
        onChanged();
      } else {
        filterTextBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * A string that should be used when filtering a set of
     * completion items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue filter_text = 10;</code>
     */
    public Builder clearFilterText() {
      if (filterTextBuilder_ == null) {
        filterText_ = null;
        onChanged();
      } else {
        filterText_ = null;
        filterTextBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * A string that should be used when filtering a set of
     * completion items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue filter_text = 10;</code>
     */
    public com.google.protobuf.StringValue.Builder getFilterTextBuilder() {
      
      onChanged();
      return getFilterTextFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A string that should be used when filtering a set of
     * completion items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue filter_text = 10;</code>
     */
    public com.google.protobuf.StringValueOrBuilder getFilterTextOrBuilder() {
      if (filterTextBuilder_ != null) {
        return filterTextBuilder_.getMessageOrBuilder();
      } else {
        return filterText_ == null ?
            com.google.protobuf.StringValue.getDefaultInstance() : filterText_;
      }
    }
    /**
     * <pre>
     * A string that should be used when filtering a set of
     * completion items. When `falsy` the label is used.
     * </pre>
     *
     * <code>.google.protobuf.StringValue filter_text = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder> 
        getFilterTextFieldBuilder() {
      if (filterTextBuilder_ == null) {
        filterTextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder>(
                getFilterText(),
                getParentForChildren(),
                isClean());
        filterText_ = null;
      }
      return filterTextBuilder_;
    }

    private com.google.protobuf.StringValue insertText_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder> insertTextBuilder_;
    /**
     * <pre>
     * A string that should be inserted into a document when selecting
     * this completion. When `falsy` the label is used.
     * The `insertText` is subject to interpretation by the client side.
     * Some tools might not take the string literally. For example
     * VS Code when code complete is requested in this example `con&lt;cursor position&gt;`
     * and a completion item with an `insertText` of `console` is provided it
     * will only insert `sole`. Therefore it is recommended to use `textEdit` instead
     * since it avoids additional client side interpretation.
     * </pre>
     *
     * <code>.google.protobuf.StringValue insert_text = 11;</code>
     */
    public boolean hasInsertText() {
      return insertTextBuilder_ != null || insertText_ != null;
    }
    /**
     * <pre>
     * A string that should be inserted into a document when selecting
     * this completion. When `falsy` the label is used.
     * The `insertText` is subject to interpretation by the client side.
     * Some tools might not take the string literally. For example
     * VS Code when code complete is requested in this example `con&lt;cursor position&gt;`
     * and a completion item with an `insertText` of `console` is provided it
     * will only insert `sole`. Therefore it is recommended to use `textEdit` instead
     * since it avoids additional client side interpretation.
     * </pre>
     *
     * <code>.google.protobuf.StringValue insert_text = 11;</code>
     */
    public com.google.protobuf.StringValue getInsertText() {
      if (insertTextBuilder_ == null) {
        return insertText_ == null ? com.google.protobuf.StringValue.getDefaultInstance() : insertText_;
      } else {
        return insertTextBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * A string that should be inserted into a document when selecting
     * this completion. When `falsy` the label is used.
     * The `insertText` is subject to interpretation by the client side.
     * Some tools might not take the string literally. For example
     * VS Code when code complete is requested in this example `con&lt;cursor position&gt;`
     * and a completion item with an `insertText` of `console` is provided it
     * will only insert `sole`. Therefore it is recommended to use `textEdit` instead
     * since it avoids additional client side interpretation.
     * </pre>
     *
     * <code>.google.protobuf.StringValue insert_text = 11;</code>
     */
    public Builder setInsertText(com.google.protobuf.StringValue value) {
      if (insertTextBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        insertText_ = value;
        onChanged();
      } else {
        insertTextBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * A string that should be inserted into a document when selecting
     * this completion. When `falsy` the label is used.
     * The `insertText` is subject to interpretation by the client side.
     * Some tools might not take the string literally. For example
     * VS Code when code complete is requested in this example `con&lt;cursor position&gt;`
     * and a completion item with an `insertText` of `console` is provided it
     * will only insert `sole`. Therefore it is recommended to use `textEdit` instead
     * since it avoids additional client side interpretation.
     * </pre>
     *
     * <code>.google.protobuf.StringValue insert_text = 11;</code>
     */
    public Builder setInsertText(
        com.google.protobuf.StringValue.Builder builderForValue) {
      if (insertTextBuilder_ == null) {
        insertText_ = builderForValue.build();
        onChanged();
      } else {
        insertTextBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * A string that should be inserted into a document when selecting
     * this completion. When `falsy` the label is used.
     * The `insertText` is subject to interpretation by the client side.
     * Some tools might not take the string literally. For example
     * VS Code when code complete is requested in this example `con&lt;cursor position&gt;`
     * and a completion item with an `insertText` of `console` is provided it
     * will only insert `sole`. Therefore it is recommended to use `textEdit` instead
     * since it avoids additional client side interpretation.
     * </pre>
     *
     * <code>.google.protobuf.StringValue insert_text = 11;</code>
     */
    public Builder mergeInsertText(com.google.protobuf.StringValue value) {
      if (insertTextBuilder_ == null) {
        if (insertText_ != null) {
          insertText_ =
            com.google.protobuf.StringValue.newBuilder(insertText_).mergeFrom(value).buildPartial();
        } else {
          insertText_ = value;
        }
        onChanged();
      } else {
        insertTextBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * A string that should be inserted into a document when selecting
     * this completion. When `falsy` the label is used.
     * The `insertText` is subject to interpretation by the client side.
     * Some tools might not take the string literally. For example
     * VS Code when code complete is requested in this example `con&lt;cursor position&gt;`
     * and a completion item with an `insertText` of `console` is provided it
     * will only insert `sole`. Therefore it is recommended to use `textEdit` instead
     * since it avoids additional client side interpretation.
     * </pre>
     *
     * <code>.google.protobuf.StringValue insert_text = 11;</code>
     */
    public Builder clearInsertText() {
      if (insertTextBuilder_ == null) {
        insertText_ = null;
        onChanged();
      } else {
        insertText_ = null;
        insertTextBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * A string that should be inserted into a document when selecting
     * this completion. When `falsy` the label is used.
     * The `insertText` is subject to interpretation by the client side.
     * Some tools might not take the string literally. For example
     * VS Code when code complete is requested in this example `con&lt;cursor position&gt;`
     * and a completion item with an `insertText` of `console` is provided it
     * will only insert `sole`. Therefore it is recommended to use `textEdit` instead
     * since it avoids additional client side interpretation.
     * </pre>
     *
     * <code>.google.protobuf.StringValue insert_text = 11;</code>
     */
    public com.google.protobuf.StringValue.Builder getInsertTextBuilder() {
      
      onChanged();
      return getInsertTextFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A string that should be inserted into a document when selecting
     * this completion. When `falsy` the label is used.
     * The `insertText` is subject to interpretation by the client side.
     * Some tools might not take the string literally. For example
     * VS Code when code complete is requested in this example `con&lt;cursor position&gt;`
     * and a completion item with an `insertText` of `console` is provided it
     * will only insert `sole`. Therefore it is recommended to use `textEdit` instead
     * since it avoids additional client side interpretation.
     * </pre>
     *
     * <code>.google.protobuf.StringValue insert_text = 11;</code>
     */
    public com.google.protobuf.StringValueOrBuilder getInsertTextOrBuilder() {
      if (insertTextBuilder_ != null) {
        return insertTextBuilder_.getMessageOrBuilder();
      } else {
        return insertText_ == null ?
            com.google.protobuf.StringValue.getDefaultInstance() : insertText_;
      }
    }
    /**
     * <pre>
     * A string that should be inserted into a document when selecting
     * this completion. When `falsy` the label is used.
     * The `insertText` is subject to interpretation by the client side.
     * Some tools might not take the string literally. For example
     * VS Code when code complete is requested in this example `con&lt;cursor position&gt;`
     * and a completion item with an `insertText` of `console` is provided it
     * will only insert `sole`. Therefore it is recommended to use `textEdit` instead
     * since it avoids additional client side interpretation.
     * </pre>
     *
     * <code>.google.protobuf.StringValue insert_text = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder> 
        getInsertTextFieldBuilder() {
      if (insertTextBuilder_ == null) {
        insertTextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.StringValue, com.google.protobuf.StringValue.Builder, com.google.protobuf.StringValueOrBuilder>(
                getInsertText(),
                getParentForChildren(),
                isClean());
        insertText_ = null;
      }
      return insertTextBuilder_;
    }

    private int insertTextFormat_ = 0;
    /**
     * <pre>
     * The format of the insert text. The format applies to both the `insertText` property
     * and the `newText` property of a provided `textEdit`. If omitted defaults to
     * `InsertTextFormat.PlainText`.
     * </pre>
     *
     * <code>.protocol.rpc.InsertTextFormat insert_text_format = 12;</code>
     */
    public int getInsertTextFormatValue() {
      return insertTextFormat_;
    }
    /**
     * <pre>
     * The format of the insert text. The format applies to both the `insertText` property
     * and the `newText` property of a provided `textEdit`. If omitted defaults to
     * `InsertTextFormat.PlainText`.
     * </pre>
     *
     * <code>.protocol.rpc.InsertTextFormat insert_text_format = 12;</code>
     */
    public Builder setInsertTextFormatValue(int value) {
      insertTextFormat_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The format of the insert text. The format applies to both the `insertText` property
     * and the `newText` property of a provided `textEdit`. If omitted defaults to
     * `InsertTextFormat.PlainText`.
     * </pre>
     *
     * <code>.protocol.rpc.InsertTextFormat insert_text_format = 12;</code>
     */
    public protocol.rpc.InsertTextFormat getInsertTextFormat() {
      protocol.rpc.InsertTextFormat result = protocol.rpc.InsertTextFormat.valueOf(insertTextFormat_);
      return result == null ? protocol.rpc.InsertTextFormat.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The format of the insert text. The format applies to both the `insertText` property
     * and the `newText` property of a provided `textEdit`. If omitted defaults to
     * `InsertTextFormat.PlainText`.
     * </pre>
     *
     * <code>.protocol.rpc.InsertTextFormat insert_text_format = 12;</code>
     */
    public Builder setInsertTextFormat(protocol.rpc.InsertTextFormat value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      insertTextFormat_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The format of the insert text. The format applies to both the `insertText` property
     * and the `newText` property of a provided `textEdit`. If omitted defaults to
     * `InsertTextFormat.PlainText`.
     * </pre>
     *
     * <code>.protocol.rpc.InsertTextFormat insert_text_format = 12;</code>
     */
    public Builder clearInsertTextFormat() {
      
      insertTextFormat_ = 0;
      onChanged();
      return this;
    }

    private protocol.TextEdit textEdit_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        protocol.TextEdit, protocol.TextEdit.Builder, protocol.TextEditOrBuilder> textEditBuilder_;
    /**
     * <pre>
     * An edit which is applied to a document when selecting this completion. When an edit is provided
     * the value of `insertText` is ignored.
     * NOTE: The range of the edit must be a single line range and it must contain the position at
     * which completion has been requested.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 13;</code>
     */
    public boolean hasTextEdit() {
      return textEditBuilder_ != null || textEdit_ != null;
    }
    /**
     * <pre>
     * An edit which is applied to a document when selecting this completion. When an edit is provided
     * the value of `insertText` is ignored.
     * NOTE: The range of the edit must be a single line range and it must contain the position at
     * which completion has been requested.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 13;</code>
     */
    public protocol.TextEdit getTextEdit() {
      if (textEditBuilder_ == null) {
        return textEdit_ == null ? protocol.TextEdit.getDefaultInstance() : textEdit_;
      } else {
        return textEditBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * An edit which is applied to a document when selecting this completion. When an edit is provided
     * the value of `insertText` is ignored.
     * NOTE: The range of the edit must be a single line range and it must contain the position at
     * which completion has been requested.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 13;</code>
     */
    public Builder setTextEdit(protocol.TextEdit value) {
      if (textEditBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        textEdit_ = value;
        onChanged();
      } else {
        textEditBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * An edit which is applied to a document when selecting this completion. When an edit is provided
     * the value of `insertText` is ignored.
     * NOTE: The range of the edit must be a single line range and it must contain the position at
     * which completion has been requested.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 13;</code>
     */
    public Builder setTextEdit(
        protocol.TextEdit.Builder builderForValue) {
      if (textEditBuilder_ == null) {
        textEdit_ = builderForValue.build();
        onChanged();
      } else {
        textEditBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * An edit which is applied to a document when selecting this completion. When an edit is provided
     * the value of `insertText` is ignored.
     * NOTE: The range of the edit must be a single line range and it must contain the position at
     * which completion has been requested.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 13;</code>
     */
    public Builder mergeTextEdit(protocol.TextEdit value) {
      if (textEditBuilder_ == null) {
        if (textEdit_ != null) {
          textEdit_ =
            protocol.TextEdit.newBuilder(textEdit_).mergeFrom(value).buildPartial();
        } else {
          textEdit_ = value;
        }
        onChanged();
      } else {
        textEditBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * An edit which is applied to a document when selecting this completion. When an edit is provided
     * the value of `insertText` is ignored.
     * NOTE: The range of the edit must be a single line range and it must contain the position at
     * which completion has been requested.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 13;</code>
     */
    public Builder clearTextEdit() {
      if (textEditBuilder_ == null) {
        textEdit_ = null;
        onChanged();
      } else {
        textEdit_ = null;
        textEditBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * An edit which is applied to a document when selecting this completion. When an edit is provided
     * the value of `insertText` is ignored.
     * NOTE: The range of the edit must be a single line range and it must contain the position at
     * which completion has been requested.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 13;</code>
     */
    public protocol.TextEdit.Builder getTextEditBuilder() {
      
      onChanged();
      return getTextEditFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * An edit which is applied to a document when selecting this completion. When an edit is provided
     * the value of `insertText` is ignored.
     * NOTE: The range of the edit must be a single line range and it must contain the position at
     * which completion has been requested.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 13;</code>
     */
    public protocol.TextEditOrBuilder getTextEditOrBuilder() {
      if (textEditBuilder_ != null) {
        return textEditBuilder_.getMessageOrBuilder();
      } else {
        return textEdit_ == null ?
            protocol.TextEdit.getDefaultInstance() : textEdit_;
      }
    }
    /**
     * <pre>
     * An edit which is applied to a document when selecting this completion. When an edit is provided
     * the value of `insertText` is ignored.
     * NOTE: The range of the edit must be a single line range and it must contain the position at
     * which completion has been requested.
     * </pre>
     *
     * <code>.protocol.TextEdit text_edit = 13;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        protocol.TextEdit, protocol.TextEdit.Builder, protocol.TextEditOrBuilder> 
        getTextEditFieldBuilder() {
      if (textEditBuilder_ == null) {
        textEditBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            protocol.TextEdit, protocol.TextEdit.Builder, protocol.TextEditOrBuilder>(
                getTextEdit(),
                getParentForChildren(),
                isClean());
        textEdit_ = null;
      }
      return textEditBuilder_;
    }

    private java.util.List<protocol.TextEdit> additionalTextEdits_ =
      java.util.Collections.emptyList();
    private void ensureAdditionalTextEditsIsMutable() {
      if (!((bitField0_ & 0x00002000) == 0x00002000)) {
        additionalTextEdits_ = new java.util.ArrayList<protocol.TextEdit>(additionalTextEdits_);
        bitField0_ |= 0x00002000;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        protocol.TextEdit, protocol.TextEdit.Builder, protocol.TextEditOrBuilder> additionalTextEditsBuilder_;

    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public java.util.List<protocol.TextEdit> getAdditionalTextEditsList() {
      if (additionalTextEditsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(additionalTextEdits_);
      } else {
        return additionalTextEditsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public int getAdditionalTextEditsCount() {
      if (additionalTextEditsBuilder_ == null) {
        return additionalTextEdits_.size();
      } else {
        return additionalTextEditsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public protocol.TextEdit getAdditionalTextEdits(int index) {
      if (additionalTextEditsBuilder_ == null) {
        return additionalTextEdits_.get(index);
      } else {
        return additionalTextEditsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public Builder setAdditionalTextEdits(
        int index, protocol.TextEdit value) {
      if (additionalTextEditsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalTextEditsIsMutable();
        additionalTextEdits_.set(index, value);
        onChanged();
      } else {
        additionalTextEditsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public Builder setAdditionalTextEdits(
        int index, protocol.TextEdit.Builder builderForValue) {
      if (additionalTextEditsBuilder_ == null) {
        ensureAdditionalTextEditsIsMutable();
        additionalTextEdits_.set(index, builderForValue.build());
        onChanged();
      } else {
        additionalTextEditsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public Builder addAdditionalTextEdits(protocol.TextEdit value) {
      if (additionalTextEditsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalTextEditsIsMutable();
        additionalTextEdits_.add(value);
        onChanged();
      } else {
        additionalTextEditsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public Builder addAdditionalTextEdits(
        int index, protocol.TextEdit value) {
      if (additionalTextEditsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalTextEditsIsMutable();
        additionalTextEdits_.add(index, value);
        onChanged();
      } else {
        additionalTextEditsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public Builder addAdditionalTextEdits(
        protocol.TextEdit.Builder builderForValue) {
      if (additionalTextEditsBuilder_ == null) {
        ensureAdditionalTextEditsIsMutable();
        additionalTextEdits_.add(builderForValue.build());
        onChanged();
      } else {
        additionalTextEditsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public Builder addAdditionalTextEdits(
        int index, protocol.TextEdit.Builder builderForValue) {
      if (additionalTextEditsBuilder_ == null) {
        ensureAdditionalTextEditsIsMutable();
        additionalTextEdits_.add(index, builderForValue.build());
        onChanged();
      } else {
        additionalTextEditsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public Builder addAllAdditionalTextEdits(
        java.lang.Iterable<? extends protocol.TextEdit> values) {
      if (additionalTextEditsBuilder_ == null) {
        ensureAdditionalTextEditsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, additionalTextEdits_);
        onChanged();
      } else {
        additionalTextEditsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public Builder clearAdditionalTextEdits() {
      if (additionalTextEditsBuilder_ == null) {
        additionalTextEdits_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
      } else {
        additionalTextEditsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public Builder removeAdditionalTextEdits(int index) {
      if (additionalTextEditsBuilder_ == null) {
        ensureAdditionalTextEditsIsMutable();
        additionalTextEdits_.remove(index);
        onChanged();
      } else {
        additionalTextEditsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public protocol.TextEdit.Builder getAdditionalTextEditsBuilder(
        int index) {
      return getAdditionalTextEditsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public protocol.TextEditOrBuilder getAdditionalTextEditsOrBuilder(
        int index) {
      if (additionalTextEditsBuilder_ == null) {
        return additionalTextEdits_.get(index);  } else {
        return additionalTextEditsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public java.util.List<? extends protocol.TextEditOrBuilder> 
         getAdditionalTextEditsOrBuilderList() {
      if (additionalTextEditsBuilder_ != null) {
        return additionalTextEditsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(additionalTextEdits_);
      }
    }
    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public protocol.TextEdit.Builder addAdditionalTextEditsBuilder() {
      return getAdditionalTextEditsFieldBuilder().addBuilder(
          protocol.TextEdit.getDefaultInstance());
    }
    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public protocol.TextEdit.Builder addAdditionalTextEditsBuilder(
        int index) {
      return getAdditionalTextEditsFieldBuilder().addBuilder(
          index, protocol.TextEdit.getDefaultInstance());
    }
    /**
     * <pre>
     * An optional array of additional text edits that are applied when
     * selecting this completion. Edits must not overlap (including the same insert position)
     * with the main edit nor with themselves.
     * Additional text edits should be used to change text unrelated to the current cursor position
     * (for example adding an import statement at the top of the file if the completion item will
     * insert an unqualified type).
     * </pre>
     *
     * <code>repeated .protocol.TextEdit additional_text_edits = 14;</code>
     */
    public java.util.List<protocol.TextEdit.Builder> 
         getAdditionalTextEditsBuilderList() {
      return getAdditionalTextEditsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        protocol.TextEdit, protocol.TextEdit.Builder, protocol.TextEditOrBuilder> 
        getAdditionalTextEditsFieldBuilder() {
      if (additionalTextEditsBuilder_ == null) {
        additionalTextEditsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            protocol.TextEdit, protocol.TextEdit.Builder, protocol.TextEditOrBuilder>(
                additionalTextEdits_,
                ((bitField0_ & 0x00002000) == 0x00002000),
                getParentForChildren(),
                isClean());
        additionalTextEdits_ = null;
      }
      return additionalTextEditsBuilder_;
    }

    private com.google.protobuf.LazyStringList commitCharacters_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureCommitCharactersIsMutable() {
      if (!((bitField0_ & 0x00004000) == 0x00004000)) {
        commitCharacters_ = new com.google.protobuf.LazyStringArrayList(commitCharacters_);
        bitField0_ |= 0x00004000;
       }
    }
    /**
     * <pre>
     * An optional set of characters that when pressed while this completion is active will accept it
     * first and then type that character. *Note* that all commit characters should have `length=1`
     * and that superfluous characters will be ignored.
     * </pre>
     *
     * <code>repeated string commit_characters = 15;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getCommitCharactersList() {
      return commitCharacters_.getUnmodifiableView();
    }
    /**
     * <pre>
     * An optional set of characters that when pressed while this completion is active will accept it
     * first and then type that character. *Note* that all commit characters should have `length=1`
     * and that superfluous characters will be ignored.
     * </pre>
     *
     * <code>repeated string commit_characters = 15;</code>
     */
    public int getCommitCharactersCount() {
      return commitCharacters_.size();
    }
    /**
     * <pre>
     * An optional set of characters that when pressed while this completion is active will accept it
     * first and then type that character. *Note* that all commit characters should have `length=1`
     * and that superfluous characters will be ignored.
     * </pre>
     *
     * <code>repeated string commit_characters = 15;</code>
     */
    public java.lang.String getCommitCharacters(int index) {
      return commitCharacters_.get(index);
    }
    /**
     * <pre>
     * An optional set of characters that when pressed while this completion is active will accept it
     * first and then type that character. *Note* that all commit characters should have `length=1`
     * and that superfluous characters will be ignored.
     * </pre>
     *
     * <code>repeated string commit_characters = 15;</code>
     */
    public com.google.protobuf.ByteString
        getCommitCharactersBytes(int index) {
      return commitCharacters_.getByteString(index);
    }
    /**
     * <pre>
     * An optional set of characters that when pressed while this completion is active will accept it
     * first and then type that character. *Note* that all commit characters should have `length=1`
     * and that superfluous characters will be ignored.
     * </pre>
     *
     * <code>repeated string commit_characters = 15;</code>
     */
    public Builder setCommitCharacters(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureCommitCharactersIsMutable();
      commitCharacters_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional set of characters that when pressed while this completion is active will accept it
     * first and then type that character. *Note* that all commit characters should have `length=1`
     * and that superfluous characters will be ignored.
     * </pre>
     *
     * <code>repeated string commit_characters = 15;</code>
     */
    public Builder addCommitCharacters(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureCommitCharactersIsMutable();
      commitCharacters_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional set of characters that when pressed while this completion is active will accept it
     * first and then type that character. *Note* that all commit characters should have `length=1`
     * and that superfluous characters will be ignored.
     * </pre>
     *
     * <code>repeated string commit_characters = 15;</code>
     */
    public Builder addAllCommitCharacters(
        java.lang.Iterable<java.lang.String> values) {
      ensureCommitCharactersIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, commitCharacters_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional set of characters that when pressed while this completion is active will accept it
     * first and then type that character. *Note* that all commit characters should have `length=1`
     * and that superfluous characters will be ignored.
     * </pre>
     *
     * <code>repeated string commit_characters = 15;</code>
     */
    public Builder clearCommitCharacters() {
      commitCharacters_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00004000);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional set of characters that when pressed while this completion is active will accept it
     * first and then type that character. *Note* that all commit characters should have `length=1`
     * and that superfluous characters will be ignored.
     * </pre>
     *
     * <code>repeated string commit_characters = 15;</code>
     */
    public Builder addCommitCharactersBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureCommitCharactersIsMutable();
      commitCharacters_.add(value);
      onChanged();
      return this;
    }

    private protocol.Command command_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        protocol.Command, protocol.Command.Builder, protocol.CommandOrBuilder> commandBuilder_;
    /**
     * <pre>
     * Optional. An optional command that is executed *after* inserting this completion. *Note* that
     * additional modifications to the current document should be described with the
     * additionalTextEdits-property.
     * </pre>
     *
     * <code>.protocol.Command command = 16;</code>
     */
    public boolean hasCommand() {
      return commandBuilder_ != null || command_ != null;
    }
    /**
     * <pre>
     * Optional. An optional command that is executed *after* inserting this completion. *Note* that
     * additional modifications to the current document should be described with the
     * additionalTextEdits-property.
     * </pre>
     *
     * <code>.protocol.Command command = 16;</code>
     */
    public protocol.Command getCommand() {
      if (commandBuilder_ == null) {
        return command_ == null ? protocol.Command.getDefaultInstance() : command_;
      } else {
        return commandBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Optional. An optional command that is executed *after* inserting this completion. *Note* that
     * additional modifications to the current document should be described with the
     * additionalTextEdits-property.
     * </pre>
     *
     * <code>.protocol.Command command = 16;</code>
     */
    public Builder setCommand(protocol.Command value) {
      if (commandBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        commandBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Optional. An optional command that is executed *after* inserting this completion. *Note* that
     * additional modifications to the current document should be described with the
     * additionalTextEdits-property.
     * </pre>
     *
     * <code>.protocol.Command command = 16;</code>
     */
    public Builder setCommand(
        protocol.Command.Builder builderForValue) {
      if (commandBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        commandBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Optional. An optional command that is executed *after* inserting this completion. *Note* that
     * additional modifications to the current document should be described with the
     * additionalTextEdits-property.
     * </pre>
     *
     * <code>.protocol.Command command = 16;</code>
     */
    public Builder mergeCommand(protocol.Command value) {
      if (commandBuilder_ == null) {
        if (command_ != null) {
          command_ =
            protocol.Command.newBuilder(command_).mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        commandBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Optional. An optional command that is executed *after* inserting this completion. *Note* that
     * additional modifications to the current document should be described with the
     * additionalTextEdits-property.
     * </pre>
     *
     * <code>.protocol.Command command = 16;</code>
     */
    public Builder clearCommand() {
      if (commandBuilder_ == null) {
        command_ = null;
        onChanged();
      } else {
        command_ = null;
        commandBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Optional. An optional command that is executed *after* inserting this completion. *Note* that
     * additional modifications to the current document should be described with the
     * additionalTextEdits-property.
     * </pre>
     *
     * <code>.protocol.Command command = 16;</code>
     */
    public protocol.Command.Builder getCommandBuilder() {
      
      onChanged();
      return getCommandFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Optional. An optional command that is executed *after* inserting this completion. *Note* that
     * additional modifications to the current document should be described with the
     * additionalTextEdits-property.
     * </pre>
     *
     * <code>.protocol.Command command = 16;</code>
     */
    public protocol.CommandOrBuilder getCommandOrBuilder() {
      if (commandBuilder_ != null) {
        return commandBuilder_.getMessageOrBuilder();
      } else {
        return command_ == null ?
            protocol.Command.getDefaultInstance() : command_;
      }
    }
    /**
     * <pre>
     * Optional. An optional command that is executed *after* inserting this completion. *Note* that
     * additional modifications to the current document should be described with the
     * additionalTextEdits-property.
     * </pre>
     *
     * <code>.protocol.Command command = 16;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        protocol.Command, protocol.Command.Builder, protocol.CommandOrBuilder> 
        getCommandFieldBuilder() {
      if (commandBuilder_ == null) {
        commandBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            protocol.Command, protocol.Command.Builder, protocol.CommandOrBuilder>(
                getCommand(),
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      return commandBuilder_;
    }

    private com.google.protobuf.Any data_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> dataBuilder_;
    /**
     * <pre>
     * A data entry field that is preserved on a completion item between
     * a completion and a completion resolve request.
     * </pre>
     *
     * <code>.google.protobuf.Any data = 17;</code>
     */
    public boolean hasData() {
      return dataBuilder_ != null || data_ != null;
    }
    /**
     * <pre>
     * A data entry field that is preserved on a completion item between
     * a completion and a completion resolve request.
     * </pre>
     *
     * <code>.google.protobuf.Any data = 17;</code>
     */
    public com.google.protobuf.Any getData() {
      if (dataBuilder_ == null) {
        return data_ == null ? com.google.protobuf.Any.getDefaultInstance() : data_;
      } else {
        return dataBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * A data entry field that is preserved on a completion item between
     * a completion and a completion resolve request.
     * </pre>
     *
     * <code>.google.protobuf.Any data = 17;</code>
     */
    public Builder setData(com.google.protobuf.Any value) {
      if (dataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        data_ = value;
        onChanged();
      } else {
        dataBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * A data entry field that is preserved on a completion item between
     * a completion and a completion resolve request.
     * </pre>
     *
     * <code>.google.protobuf.Any data = 17;</code>
     */
    public Builder setData(
        com.google.protobuf.Any.Builder builderForValue) {
      if (dataBuilder_ == null) {
        data_ = builderForValue.build();
        onChanged();
      } else {
        dataBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * A data entry field that is preserved on a completion item between
     * a completion and a completion resolve request.
     * </pre>
     *
     * <code>.google.protobuf.Any data = 17;</code>
     */
    public Builder mergeData(com.google.protobuf.Any value) {
      if (dataBuilder_ == null) {
        if (data_ != null) {
          data_ =
            com.google.protobuf.Any.newBuilder(data_).mergeFrom(value).buildPartial();
        } else {
          data_ = value;
        }
        onChanged();
      } else {
        dataBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * A data entry field that is preserved on a completion item between
     * a completion and a completion resolve request.
     * </pre>
     *
     * <code>.google.protobuf.Any data = 17;</code>
     */
    public Builder clearData() {
      if (dataBuilder_ == null) {
        data_ = null;
        onChanged();
      } else {
        data_ = null;
        dataBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * A data entry field that is preserved on a completion item between
     * a completion and a completion resolve request.
     * </pre>
     *
     * <code>.google.protobuf.Any data = 17;</code>
     */
    public com.google.protobuf.Any.Builder getDataBuilder() {
      
      onChanged();
      return getDataFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A data entry field that is preserved on a completion item between
     * a completion and a completion resolve request.
     * </pre>
     *
     * <code>.google.protobuf.Any data = 17;</code>
     */
    public com.google.protobuf.AnyOrBuilder getDataOrBuilder() {
      if (dataBuilder_ != null) {
        return dataBuilder_.getMessageOrBuilder();
      } else {
        return data_ == null ?
            com.google.protobuf.Any.getDefaultInstance() : data_;
      }
    }
    /**
     * <pre>
     * A data entry field that is preserved on a completion item between
     * a completion and a completion resolve request.
     * </pre>
     *
     * <code>.google.protobuf.Any data = 17;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> 
        getDataFieldBuilder() {
      if (dataBuilder_ == null) {
        dataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder>(
                getData(),
                getParentForChildren(),
                isClean());
        data_ = null;
      }
      return dataBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:protocol.rpc.CompletionItem)
  }

  // @@protoc_insertion_point(class_scope:protocol.rpc.CompletionItem)
  private static final protocol.rpc.CompletionItem DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new protocol.rpc.CompletionItem();
  }

  public static protocol.rpc.CompletionItem getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CompletionItem>
      PARSER = new com.google.protobuf.AbstractParser<CompletionItem>() {
    public CompletionItem parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new CompletionItem(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CompletionItem> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CompletionItem> getParserForType() {
    return PARSER;
  }

  public protocol.rpc.CompletionItem getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

