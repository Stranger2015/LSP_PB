// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

public interface FoldingRangeClientCapabilitiesOrBuilder extends
    // @@protoc_insertion_point(interface_extends:protocol.rpc.FoldingRangeClientCapabilities)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Optional. Whether implementation supports dynamic registration for folding range providers. If
   * this is set to `true` the client supports the new `FoldingRangeRegistrationOptions` return
   * value for the corresponding server capability as well.
   * </pre>
   *
   * <code>bool dynamic_registration = 1;</code>
   */
  boolean getDynamicRegistration();

  /**
   * <pre>
   * The maximum number of folding ranges that the client prefers to receive per document. The value
   * serves as a hint, servers are free to follow the limit.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value range_limit = 2;</code>
   */
  boolean hasRangeLimit();
  /**
   * <pre>
   * The maximum number of folding ranges that the client prefers to receive per document. The value
   * serves as a hint, servers are free to follow the limit.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value range_limit = 2;</code>
   */
  com.google.protobuf.Int32Value getRangeLimit();
  /**
   * <pre>
   * The maximum number of folding ranges that the client prefers to receive per document. The value
   * serves as a hint, servers are free to follow the limit.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value range_limit = 2;</code>
   */
  com.google.protobuf.Int32ValueOrBuilder getRangeLimitOrBuilder();

  /**
   * <pre>
   * Optional. If set, the client signals that it only supports folding complete lines. If set,
   * client will ignore specified `startCharacter` and `endCharacter` properties in a FoldingRange.
   * </pre>
   *
   * <code>bool line_folding_only = 3;</code>
   */
  boolean getLineFoldingOnly();
}
