// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

public interface FormattingOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:protocol.rpc.FormattingOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Size of a tab in spaces.
   * </pre>
   *
   * <code>int32 tab_size = 1;</code>
   */
  int getTabSize();

  /**
   * <pre>
   * Prefer spaces over tabs.
   * </pre>
   *
   * <code>bool insert_spaces = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  boolean getInsertSpaces();

  /**
   * <pre>
   * Optional. Trim trailing whitespace on a line.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>bool trim_trailing_whitespace = 3;</code>
   */
  boolean getTrimTrailingWhitespace();

  /**
   * <pre>
   * Optional. Insert a newline character at the end of the file if one does not exist.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>bool insert_final_newline = 4;</code>
   */
  boolean getInsertFinalNewline();

  /**
   * <pre>
   * Optional. Trim all newlines after the final newline at the end of the file.
   * &#64;since 3.15.0
   * </pre>
   *
   * <code>bool trim_final_newlines = 5;</code>
   */
  boolean getTrimFinalNewlines();

  /**
   * <pre>
   * Signature for further properties.
   * </pre>
   *
   * <code>map&lt;string, .protocol.rpc.FormattingOptions.Value&gt; key = 9;</code>
   */
  int getKeyCount();
  /**
   * <pre>
   * Signature for further properties.
   * </pre>
   *
   * <code>map&lt;string, .protocol.rpc.FormattingOptions.Value&gt; key = 9;</code>
   */
  boolean containsKey(
      java.lang.String key);
  /**
   * Use {@link #getKeyMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, protocol.rpc.FormattingOptions.Value>
  getKey();
  /**
   * <pre>
   * Signature for further properties.
   * </pre>
   *
   * <code>map&lt;string, .protocol.rpc.FormattingOptions.Value&gt; key = 9;</code>
   */
  java.util.Map<java.lang.String, protocol.rpc.FormattingOptions.Value>
  getKeyMap();
  /**
   * <pre>
   * Signature for further properties.
   * </pre>
   *
   * <code>map&lt;string, .protocol.rpc.FormattingOptions.Value&gt; key = 9;</code>
   */

  protocol.rpc.FormattingOptions.Value getKeyOrDefault(
      java.lang.String key,
      protocol.rpc.FormattingOptions.Value defaultValue);
  /**
   * <pre>
   * Signature for further properties.
   * </pre>
   *
   * <code>map&lt;string, .protocol.rpc.FormattingOptions.Value&gt; key = 9;</code>
   */

  protocol.rpc.FormattingOptions.Value getKeyOrThrow(
      java.lang.String key);
}
