// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

/**
 * <pre>
 * SemanticTokenTypes represents a semantic token type.
 * (-- api-linter: core::0192::only-leading-comments=disabled --)
 * </pre>
 *
 * Protobuf enum {@code protocol.rpc.SemanticTokenTypes}
 */
public enum SemanticTokenTypes
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Conventional default for enums. Do not use this.
   * </pre>
   *
   * <code>SEMANTIC_TOKEN_TYPES_UNSPECIFIED = 0;</code>
   */
  SEMANTIC_TOKEN_TYPES_UNSPECIFIED(0),
  /**
   * <pre>
   * 'namespace',
   * </pre>
   *
   * <code>NAMESPACE = 1;</code>
   */
  NAMESPACE(1),
  /**
   * <pre>
   * 'type',
   * </pre>
   *
   * <code>TYPE = 2;</code>
   */
  TYPE(2),
  /**
   * <pre>
   * 'class',
   * </pre>
   *
   * <code>CLASS = 3;</code>
   */
  CLASS(3),
  /**
   * <pre>
   * 'enum',
   * </pre>
   *
   * <code>ENUM = 4;</code>
   */
  ENUM(4),
  /**
   * <pre>
   * 'interface',
   * </pre>
   *
   * <code>INTERFACE = 5;</code>
   */
  INTERFACE(5),
  /**
   * <pre>
   * 'struct',
   * </pre>
   *
   * <code>STRUCT = 6;</code>
   */
  STRUCT(6),
  /**
   * <pre>
   * 'typeParameter',
   * </pre>
   *
   * <code>TYPE_PARAMETER = 7;</code>
   */
  TYPE_PARAMETER(7),
  /**
   * <pre>
   * 'parameter',
   * </pre>
   *
   * <code>PARAMETER = 8;</code>
   */
  PARAMETER(8),
  /**
   * <pre>
   * 'variable',
   * </pre>
   *
   * <code>VARIABLE = 9;</code>
   */
  VARIABLE(9),
  /**
   * <pre>
   * 'property',
   * </pre>
   *
   * <code>PROPERTY = 10;</code>
   */
  PROPERTY(10),
  /**
   * <pre>
   * 'enumMember',
   * </pre>
   *
   * <code>ENUMMEMBER = 11;</code>
   */
  ENUMMEMBER(11),
  /**
   * <pre>
   * 'event',
   * </pre>
   *
   * <code>EVENT = 12;</code>
   */
  EVENT(12),
  /**
   * <pre>
   * 'function',
   * </pre>
   *
   * <code>FUNCTION = 13;</code>
   */
  FUNCTION(13),
  /**
   * <pre>
   * 'member',
   * </pre>
   *
   * <code>MEMBER = 14;</code>
   */
  MEMBER(14),
  /**
   * <pre>
   * 'macro',
   * </pre>
   *
   * <code>MACRO = 15;</code>
   */
  MACRO(15),
  /**
   * <pre>
   * 'keyword',
   * </pre>
   *
   * <code>KEYWORD = 16;</code>
   */
  KEYWORD(16),
  /**
   * <pre>
   * 'modifier',
   * </pre>
   *
   * <code>MODIFIER = 17;</code>
   */
  MODIFIER(17),
  /**
   * <pre>
   * 'comment',
   * </pre>
   *
   * <code>COMMENT = 18;</code>
   */
  COMMENT(18),
  /**
   * <pre>
   * 'string',
   * </pre>
   *
   * <code>STRING = 19;</code>
   */
  STRING(19),
  /**
   * <pre>
   * 'number',
   * </pre>
   *
   * <code>NUMBER = 20;</code>
   */
  NUMBER(20),
  /**
   * <pre>
   * 'regexp',
   * </pre>
   *
   * <code>REGEXP = 21;</code>
   */
  REGEXP(21),
  /**
   * <pre>
   * 'operator'
   * </pre>
   *
   * <code>OPERATOR = 22;</code>
   */
  OPERATOR(22),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Conventional default for enums. Do not use this.
   * </pre>
   *
   * <code>SEMANTIC_TOKEN_TYPES_UNSPECIFIED = 0;</code>
   */
  public static final int SEMANTIC_TOKEN_TYPES_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * 'namespace',
   * </pre>
   *
   * <code>NAMESPACE = 1;</code>
   */
  public static final int NAMESPACE_VALUE = 1;
  /**
   * <pre>
   * 'type',
   * </pre>
   *
   * <code>TYPE = 2;</code>
   */
  public static final int TYPE_VALUE = 2;
  /**
   * <pre>
   * 'class',
   * </pre>
   *
   * <code>CLASS = 3;</code>
   */
  public static final int CLASS_VALUE = 3;
  /**
   * <pre>
   * 'enum',
   * </pre>
   *
   * <code>ENUM = 4;</code>
   */
  public static final int ENUM_VALUE = 4;
  /**
   * <pre>
   * 'interface',
   * </pre>
   *
   * <code>INTERFACE = 5;</code>
   */
  public static final int INTERFACE_VALUE = 5;
  /**
   * <pre>
   * 'struct',
   * </pre>
   *
   * <code>STRUCT = 6;</code>
   */
  public static final int STRUCT_VALUE = 6;
  /**
   * <pre>
   * 'typeParameter',
   * </pre>
   *
   * <code>TYPE_PARAMETER = 7;</code>
   */
  public static final int TYPE_PARAMETER_VALUE = 7;
  /**
   * <pre>
   * 'parameter',
   * </pre>
   *
   * <code>PARAMETER = 8;</code>
   */
  public static final int PARAMETER_VALUE = 8;
  /**
   * <pre>
   * 'variable',
   * </pre>
   *
   * <code>VARIABLE = 9;</code>
   */
  public static final int VARIABLE_VALUE = 9;
  /**
   * <pre>
   * 'property',
   * </pre>
   *
   * <code>PROPERTY = 10;</code>
   */
  public static final int PROPERTY_VALUE = 10;
  /**
   * <pre>
   * 'enumMember',
   * </pre>
   *
   * <code>ENUMMEMBER = 11;</code>
   */
  public static final int ENUMMEMBER_VALUE = 11;
  /**
   * <pre>
   * 'event',
   * </pre>
   *
   * <code>EVENT = 12;</code>
   */
  public static final int EVENT_VALUE = 12;
  /**
   * <pre>
   * 'function',
   * </pre>
   *
   * <code>FUNCTION = 13;</code>
   */
  public static final int FUNCTION_VALUE = 13;
  /**
   * <pre>
   * 'member',
   * </pre>
   *
   * <code>MEMBER = 14;</code>
   */
  public static final int MEMBER_VALUE = 14;
  /**
   * <pre>
   * 'macro',
   * </pre>
   *
   * <code>MACRO = 15;</code>
   */
  public static final int MACRO_VALUE = 15;
  /**
   * <pre>
   * 'keyword',
   * </pre>
   *
   * <code>KEYWORD = 16;</code>
   */
  public static final int KEYWORD_VALUE = 16;
  /**
   * <pre>
   * 'modifier',
   * </pre>
   *
   * <code>MODIFIER = 17;</code>
   */
  public static final int MODIFIER_VALUE = 17;
  /**
   * <pre>
   * 'comment',
   * </pre>
   *
   * <code>COMMENT = 18;</code>
   */
  public static final int COMMENT_VALUE = 18;
  /**
   * <pre>
   * 'string',
   * </pre>
   *
   * <code>STRING = 19;</code>
   */
  public static final int STRING_VALUE = 19;
  /**
   * <pre>
   * 'number',
   * </pre>
   *
   * <code>NUMBER = 20;</code>
   */
  public static final int NUMBER_VALUE = 20;
  /**
   * <pre>
   * 'regexp',
   * </pre>
   *
   * <code>REGEXP = 21;</code>
   */
  public static final int REGEXP_VALUE = 21;
  /**
   * <pre>
   * 'operator'
   * </pre>
   *
   * <code>OPERATOR = 22;</code>
   */
  public static final int OPERATOR_VALUE = 22;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SemanticTokenTypes valueOf(int value) {
    return forNumber(value);
  }

  public static SemanticTokenTypes forNumber(int value) {
    switch (value) {
      case 0: return SEMANTIC_TOKEN_TYPES_UNSPECIFIED;
      case 1: return NAMESPACE;
      case 2: return TYPE;
      case 3: return CLASS;
      case 4: return ENUM;
      case 5: return INTERFACE;
      case 6: return STRUCT;
      case 7: return TYPE_PARAMETER;
      case 8: return PARAMETER;
      case 9: return VARIABLE;
      case 10: return PROPERTY;
      case 11: return ENUMMEMBER;
      case 12: return EVENT;
      case 13: return FUNCTION;
      case 14: return MEMBER;
      case 15: return MACRO;
      case 16: return KEYWORD;
      case 17: return MODIFIER;
      case 18: return COMMENT;
      case 19: return STRING;
      case 20: return NUMBER;
      case 21: return REGEXP;
      case 22: return OPERATOR;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SemanticTokenTypes>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SemanticTokenTypes> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SemanticTokenTypes>() {
          public SemanticTokenTypes findValueByNumber(int number) {
            return SemanticTokenTypes.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return protocol.rpc.RpcProto.getDescriptor().getEnumTypes().get(11);
  }

  private static final SemanticTokenTypes[] VALUES = values();

  public static SemanticTokenTypes valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SemanticTokenTypes(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:protocol.rpc.SemanticTokenTypes)
}

