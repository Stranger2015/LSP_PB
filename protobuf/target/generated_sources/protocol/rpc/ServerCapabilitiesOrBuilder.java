// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

public interface ServerCapabilitiesOrBuilder extends
    // @@protoc_insertion_point(interface_extends:protocol.rpc.ServerCapabilities)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.protocol.rpc.TextDocumentSyncOptions text_document_sync_options = 1;</code>
   */
  protocol.rpc.TextDocumentSyncOptions getTextDocumentSyncOptions();
  /**
   * <code>.protocol.rpc.TextDocumentSyncOptions text_document_sync_options = 1;</code>
   */
  protocol.rpc.TextDocumentSyncOptionsOrBuilder getTextDocumentSyncOptionsOrBuilder();

  /**
   * <code>.protocol.rpc.TextDocumentSyncKind text_document_sync_kind = 2;</code>
   */
  int getTextDocumentSyncKindValue();
  /**
   * <code>.protocol.rpc.TextDocumentSyncKind text_document_sync_kind = 2;</code>
   */
  protocol.rpc.TextDocumentSyncKind getTextDocumentSyncKind();

  /**
   * <pre>
   * Optional. The server provides completion support.
   * </pre>
   *
   * <code>.protocol.rpc.CompletionOptions completion_provider = 3;</code>
   */
  boolean hasCompletionProvider();
  /**
   * <pre>
   * Optional. The server provides completion support.
   * </pre>
   *
   * <code>.protocol.rpc.CompletionOptions completion_provider = 3;</code>
   */
  protocol.rpc.CompletionOptions getCompletionProvider();
  /**
   * <pre>
   * Optional. The server provides completion support.
   * </pre>
   *
   * <code>.protocol.rpc.CompletionOptions completion_provider = 3;</code>
   */
  protocol.rpc.CompletionOptionsOrBuilder getCompletionProviderOrBuilder();

  /**
   * <code>bool enable_hover_provider = 4;</code>
   */
  boolean getEnableHoverProvider();

  /**
   * <code>.protocol.rpc.HoverOptions hover_options = 5;</code>
   */
  protocol.rpc.HoverOptions getHoverOptions();
  /**
   * <code>.protocol.rpc.HoverOptions hover_options = 5;</code>
   */
  protocol.rpc.HoverOptionsOrBuilder getHoverOptionsOrBuilder();

  /**
   * <pre>
   * Optional. The server provides signature help support.
   * </pre>
   *
   * <code>.protocol.rpc.SignatureHelpOptions signature_help_provider = 6;</code>
   */
  boolean hasSignatureHelpProvider();
  /**
   * <pre>
   * Optional. The server provides signature help support.
   * </pre>
   *
   * <code>.protocol.rpc.SignatureHelpOptions signature_help_provider = 6;</code>
   */
  protocol.rpc.SignatureHelpOptions getSignatureHelpProvider();
  /**
   * <pre>
   * Optional. The server provides signature help support.
   * </pre>
   *
   * <code>.protocol.rpc.SignatureHelpOptions signature_help_provider = 6;</code>
   */
  protocol.rpc.SignatureHelpOptionsOrBuilder getSignatureHelpProviderOrBuilder();

  /**
   * <code>bool enable_declaration_provider = 7;</code>
   */
  boolean getEnableDeclarationProvider();

  /**
   * <code>.protocol.rpc.DeclarationOptions declaration_options = 8;</code>
   */
  protocol.rpc.DeclarationOptions getDeclarationOptions();
  /**
   * <code>.protocol.rpc.DeclarationOptions declaration_options = 8;</code>
   */
  protocol.rpc.DeclarationOptionsOrBuilder getDeclarationOptionsOrBuilder();

  /**
   * <code>.protocol.rpc.DeclarationRegistrationOptions declaration_registration_options = 9;</code>
   */
  protocol.rpc.DeclarationRegistrationOptions getDeclarationRegistrationOptions();
  /**
   * <code>.protocol.rpc.DeclarationRegistrationOptions declaration_registration_options = 9;</code>
   */
  protocol.rpc.DeclarationRegistrationOptionsOrBuilder getDeclarationRegistrationOptionsOrBuilder();

  /**
   * <code>bool enable_definition_provider = 10;</code>
   */
  boolean getEnableDefinitionProvider();

  /**
   * <code>.protocol.rpc.DefinitionOptions definition_options = 11;</code>
   */
  protocol.rpc.DefinitionOptions getDefinitionOptions();
  /**
   * <code>.protocol.rpc.DefinitionOptions definition_options = 11;</code>
   */
  protocol.rpc.DefinitionOptionsOrBuilder getDefinitionOptionsOrBuilder();

  /**
   * <code>bool enable_type_definition_provider = 12;</code>
   */
  boolean getEnableTypeDefinitionProvider();

  /**
   * <code>.protocol.rpc.TypeDefinitionOptions type_definition_options = 13;</code>
   */
  protocol.rpc.TypeDefinitionOptions getTypeDefinitionOptions();
  /**
   * <code>.protocol.rpc.TypeDefinitionOptions type_definition_options = 13;</code>
   */
  protocol.rpc.TypeDefinitionOptionsOrBuilder getTypeDefinitionOptionsOrBuilder();

  /**
   * <code>.protocol.rpc.TypeDefinitionRegistrationOptions type_definition_registration_options = 14;</code>
   */
  protocol.rpc.TypeDefinitionRegistrationOptions getTypeDefinitionRegistrationOptions();
  /**
   * <code>.protocol.rpc.TypeDefinitionRegistrationOptions type_definition_registration_options = 14;</code>
   */
  protocol.rpc.TypeDefinitionRegistrationOptionsOrBuilder getTypeDefinitionRegistrationOptionsOrBuilder();

  /**
   * <code>bool enable_implementation_provider = 15;</code>
   */
  boolean getEnableImplementationProvider();

  /**
   * <code>.protocol.rpc.ImplementationOptions implementation_options = 16;</code>
   */
  protocol.rpc.ImplementationOptions getImplementationOptions();
  /**
   * <code>.protocol.rpc.ImplementationOptions implementation_options = 16;</code>
   */
  protocol.rpc.ImplementationOptionsOrBuilder getImplementationOptionsOrBuilder();

  /**
   * <code>.protocol.rpc.ImplementationRegistrationOptions implementation_registration_options = 17;</code>
   */
  protocol.rpc.ImplementationRegistrationOptions getImplementationRegistrationOptions();
  /**
   * <code>.protocol.rpc.ImplementationRegistrationOptions implementation_registration_options = 17;</code>
   */
  protocol.rpc.ImplementationRegistrationOptionsOrBuilder getImplementationRegistrationOptionsOrBuilder();

  /**
   * <code>bool enable_references_provider = 18;</code>
   */
  boolean getEnableReferencesProvider();

  /**
   * <code>.protocol.rpc.ReferenceOptions reference_options = 19;</code>
   */
  protocol.rpc.ReferenceOptions getReferenceOptions();
  /**
   * <code>.protocol.rpc.ReferenceOptions reference_options = 19;</code>
   */
  protocol.rpc.ReferenceOptionsOrBuilder getReferenceOptionsOrBuilder();

  /**
   * <code>bool enable_document_highlight_provider = 20;</code>
   */
  boolean getEnableDocumentHighlightProvider();

  /**
   * <code>.protocol.rpc.DocumentHighlightOptions document_highlight_options = 21;</code>
   */
  protocol.rpc.DocumentHighlightOptions getDocumentHighlightOptions();
  /**
   * <code>.protocol.rpc.DocumentHighlightOptions document_highlight_options = 21;</code>
   */
  protocol.rpc.DocumentHighlightOptionsOrBuilder getDocumentHighlightOptionsOrBuilder();

  /**
   * <code>bool enable_document_symbol_provider = 22;</code>
   */
  boolean getEnableDocumentSymbolProvider();

  /**
   * <code>.protocol.rpc.DocumentSymbolOptions document_symbol_options = 23;</code>
   */
  protocol.rpc.DocumentSymbolOptions getDocumentSymbolOptions();
  /**
   * <code>.protocol.rpc.DocumentSymbolOptions document_symbol_options = 23;</code>
   */
  protocol.rpc.DocumentSymbolOptionsOrBuilder getDocumentSymbolOptionsOrBuilder();

  /**
   * <code>bool enable_code_action_provider = 24;</code>
   */
  boolean getEnableCodeActionProvider();

  /**
   * <code>.protocol.rpc.CodeActionOptions code_action_options = 25;</code>
   */
  protocol.rpc.CodeActionOptions getCodeActionOptions();
  /**
   * <code>.protocol.rpc.CodeActionOptions code_action_options = 25;</code>
   */
  protocol.rpc.CodeActionOptionsOrBuilder getCodeActionOptionsOrBuilder();

  /**
   * <pre>
   * Optional. The server provides code lens.
   * </pre>
   *
   * <code>.protocol.rpc.CodeLensOptions codelens_provider = 26;</code>
   */
  boolean hasCodelensProvider();
  /**
   * <pre>
   * Optional. The server provides code lens.
   * </pre>
   *
   * <code>.protocol.rpc.CodeLensOptions codelens_provider = 26;</code>
   */
  protocol.rpc.CodeLensOptions getCodelensProvider();
  /**
   * <pre>
   * Optional. The server provides code lens.
   * </pre>
   *
   * <code>.protocol.rpc.CodeLensOptions codelens_provider = 26;</code>
   */
  protocol.rpc.CodeLensOptionsOrBuilder getCodelensProviderOrBuilder();

  /**
   * <pre>
   * Optional. The server provides document link support.
   * </pre>
   *
   * <code>.protocol.rpc.DocumentLinkOptions document_link_provider = 27;</code>
   */
  boolean hasDocumentLinkProvider();
  /**
   * <pre>
   * Optional. The server provides document link support.
   * </pre>
   *
   * <code>.protocol.rpc.DocumentLinkOptions document_link_provider = 27;</code>
   */
  protocol.rpc.DocumentLinkOptions getDocumentLinkProvider();
  /**
   * <pre>
   * Optional. The server provides document link support.
   * </pre>
   *
   * <code>.protocol.rpc.DocumentLinkOptions document_link_provider = 27;</code>
   */
  protocol.rpc.DocumentLinkOptionsOrBuilder getDocumentLinkProviderOrBuilder();

  /**
   * <code>bool enable_color_provider = 28;</code>
   */
  boolean getEnableColorProvider();

  /**
   * <code>.protocol.rpc.DocumentColorOptions document_color_options = 29;</code>
   */
  protocol.rpc.DocumentColorOptions getDocumentColorOptions();
  /**
   * <code>.protocol.rpc.DocumentColorOptions document_color_options = 29;</code>
   */
  protocol.rpc.DocumentColorOptionsOrBuilder getDocumentColorOptionsOrBuilder();

  /**
   * <code>.protocol.rpc.DocumentColorRegistrationOptions document_color_registration_options = 30;</code>
   */
  protocol.rpc.DocumentColorRegistrationOptions getDocumentColorRegistrationOptions();
  /**
   * <code>.protocol.rpc.DocumentColorRegistrationOptions document_color_registration_options = 30;</code>
   */
  protocol.rpc.DocumentColorRegistrationOptionsOrBuilder getDocumentColorRegistrationOptionsOrBuilder();

  /**
   * <code>bool enable_document_formatting_provider = 31;</code>
   */
  boolean getEnableDocumentFormattingProvider();

  /**
   * <code>.protocol.rpc.DocumentFormattingOptions document_formatting_options = 32;</code>
   */
  protocol.rpc.DocumentFormattingOptions getDocumentFormattingOptions();
  /**
   * <code>.protocol.rpc.DocumentFormattingOptions document_formatting_options = 32;</code>
   */
  protocol.rpc.DocumentFormattingOptionsOrBuilder getDocumentFormattingOptionsOrBuilder();

  /**
   * <code>bool enable_document_range_formatting_provider = 33;</code>
   */
  boolean getEnableDocumentRangeFormattingProvider();

  /**
   * <code>.protocol.rpc.DocumentRangeFormattingOptions document_range_formatting_options = 34;</code>
   */
  protocol.rpc.DocumentRangeFormattingOptions getDocumentRangeFormattingOptions();
  /**
   * <code>.protocol.rpc.DocumentRangeFormattingOptions document_range_formatting_options = 34;</code>
   */
  protocol.rpc.DocumentRangeFormattingOptionsOrBuilder getDocumentRangeFormattingOptionsOrBuilder();

  /**
   * <pre>
   * Optional. The server provides document formatting on typing.
   * </pre>
   *
   * <code>.protocol.rpc.DocumentOnTypeFormattingOptions document_on_type_formatting_provider = 35;</code>
   */
  boolean hasDocumentOnTypeFormattingProvider();
  /**
   * <pre>
   * Optional. The server provides document formatting on typing.
   * </pre>
   *
   * <code>.protocol.rpc.DocumentOnTypeFormattingOptions document_on_type_formatting_provider = 35;</code>
   */
  protocol.rpc.DocumentOnTypeFormattingOptions getDocumentOnTypeFormattingProvider();
  /**
   * <pre>
   * Optional. The server provides document formatting on typing.
   * </pre>
   *
   * <code>.protocol.rpc.DocumentOnTypeFormattingOptions document_on_type_formatting_provider = 35;</code>
   */
  protocol.rpc.DocumentOnTypeFormattingOptionsOrBuilder getDocumentOnTypeFormattingProviderOrBuilder();

  /**
   * <code>bool enable_rename_provider = 36;</code>
   */
  boolean getEnableRenameProvider();

  /**
   * <code>.protocol.rpc.RenameOptions rename_options = 37;</code>
   */
  protocol.rpc.RenameOptions getRenameOptions();
  /**
   * <code>.protocol.rpc.RenameOptions rename_options = 37;</code>
   */
  protocol.rpc.RenameOptionsOrBuilder getRenameOptionsOrBuilder();

  /**
   * <code>bool enable_folding_range_provider = 38;</code>
   */
  boolean getEnableFoldingRangeProvider();

  /**
   * <code>.protocol.rpc.FoldingRangeOptions folding_range_options = 39;</code>
   */
  protocol.rpc.FoldingRangeOptions getFoldingRangeOptions();
  /**
   * <code>.protocol.rpc.FoldingRangeOptions folding_range_options = 39;</code>
   */
  protocol.rpc.FoldingRangeOptionsOrBuilder getFoldingRangeOptionsOrBuilder();

  /**
   * <code>.protocol.rpc.FoldingRangeRegistrationOptions folding_range_registration_options = 40;</code>
   */
  protocol.rpc.FoldingRangeRegistrationOptions getFoldingRangeRegistrationOptions();
  /**
   * <code>.protocol.rpc.FoldingRangeRegistrationOptions folding_range_registration_options = 40;</code>
   */
  protocol.rpc.FoldingRangeRegistrationOptionsOrBuilder getFoldingRangeRegistrationOptionsOrBuilder();

  /**
   * <pre>
   * Optional. The server provides execute command support.
   * </pre>
   *
   * <code>.protocol.rpc.ExecuteCommandOptions execute_command_provider = 41;</code>
   */
  boolean hasExecuteCommandProvider();
  /**
   * <pre>
   * Optional. The server provides execute command support.
   * </pre>
   *
   * <code>.protocol.rpc.ExecuteCommandOptions execute_command_provider = 41;</code>
   */
  protocol.rpc.ExecuteCommandOptions getExecuteCommandProvider();
  /**
   * <pre>
   * Optional. The server provides execute command support.
   * </pre>
   *
   * <code>.protocol.rpc.ExecuteCommandOptions execute_command_provider = 41;</code>
   */
  protocol.rpc.ExecuteCommandOptionsOrBuilder getExecuteCommandProviderOrBuilder();

  /**
   * <code>bool enable_selection_range_provider = 42;</code>
   */
  boolean getEnableSelectionRangeProvider();

  /**
   * <code>.protocol.rpc.SelectionRangeOptions selection_range_options = 43;</code>
   */
  protocol.rpc.SelectionRangeOptions getSelectionRangeOptions();
  /**
   * <code>.protocol.rpc.SelectionRangeOptions selection_range_options = 43;</code>
   */
  protocol.rpc.SelectionRangeOptionsOrBuilder getSelectionRangeOptionsOrBuilder();

  /**
   * <code>.protocol.rpc.SelectionRangeRegistrationOptions selection_range_registration_options = 44;</code>
   */
  protocol.rpc.SelectionRangeRegistrationOptions getSelectionRangeRegistrationOptions();
  /**
   * <code>.protocol.rpc.SelectionRangeRegistrationOptions selection_range_registration_options = 44;</code>
   */
  protocol.rpc.SelectionRangeRegistrationOptionsOrBuilder getSelectionRangeRegistrationOptionsOrBuilder();

  /**
   * <pre>
   * The server provides workspace symbol support.
   * </pre>
   *
   * <code>bool workspace_symbol_provider = 45;</code>
   */
  boolean getWorkspaceSymbolProvider();

  /**
   * <pre>
   * Optional.
   * </pre>
   *
   * <code>.protocol.rpc.ServerCapabilities.Workspace workspace = 46;</code>
   */
  boolean hasWorkspace();
  /**
   * <pre>
   * Optional.
   * </pre>
   *
   * <code>.protocol.rpc.ServerCapabilities.Workspace workspace = 46;</code>
   */
  protocol.rpc.ServerCapabilities.Workspace getWorkspace();
  /**
   * <pre>
   * Optional.
   * </pre>
   *
   * <code>.protocol.rpc.ServerCapabilities.Workspace workspace = 46;</code>
   */
  protocol.rpc.ServerCapabilities.WorkspaceOrBuilder getWorkspaceOrBuilder();

  /**
   * <pre>
   * Optional. Experimental server capabilities.
   * </pre>
   *
   * <code>.google.protobuf.Any experimental = 47;</code>
   */
  boolean hasExperimental();
  /**
   * <pre>
   * Optional. Experimental server capabilities.
   * </pre>
   *
   * <code>.google.protobuf.Any experimental = 47;</code>
   */
  com.google.protobuf.Any getExperimental();
  /**
   * <pre>
   * Optional. Experimental server capabilities.
   * </pre>
   *
   * <code>.google.protobuf.Any experimental = 47;</code>
   */
  com.google.protobuf.AnyOrBuilder getExperimentalOrBuilder();

  public protocol.rpc.ServerCapabilities.TextDocumentSyncCase getTextDocumentSyncCase();

  public protocol.rpc.ServerCapabilities.HoverProviderCase getHoverProviderCase();

  public protocol.rpc.ServerCapabilities.DeclarationProviderCase getDeclarationProviderCase();

  public protocol.rpc.ServerCapabilities.DefinitionProviderCase getDefinitionProviderCase();

  public protocol.rpc.ServerCapabilities.TypeDefinitionProviderCase getTypeDefinitionProviderCase();

  public protocol.rpc.ServerCapabilities.ImplementationProviderCase getImplementationProviderCase();

  public protocol.rpc.ServerCapabilities.ReferencesProviderCase getReferencesProviderCase();

  public protocol.rpc.ServerCapabilities.DocumentHighlightProviderCase getDocumentHighlightProviderCase();

  public protocol.rpc.ServerCapabilities.DocumentSymbolProviderCase getDocumentSymbolProviderCase();

  public protocol.rpc.ServerCapabilities.CodeActionProviderCase getCodeActionProviderCase();

  public protocol.rpc.ServerCapabilities.ColorProviderCase getColorProviderCase();

  public protocol.rpc.ServerCapabilities.DocumentFormattingProviderCase getDocumentFormattingProviderCase();

  public protocol.rpc.ServerCapabilities.DocumentRangeFormattingProviderCase getDocumentRangeFormattingProviderCase();

  public protocol.rpc.ServerCapabilities.RenameProviderCase getRenameProviderCase();

  public protocol.rpc.ServerCapabilities.FoldingRangeProviderCase getFoldingRangeProviderCase();

  public protocol.rpc.ServerCapabilities.SelectionRangeProviderCase getSelectionRangeProviderCase();
}
