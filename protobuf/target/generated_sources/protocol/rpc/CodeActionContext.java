// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/rpc/rpc.proto

package protocol.rpc;

/**
 * <pre>
 * CodeActionContext contains additional diagnostic information about the context in which
 * a code action is run.
 * </pre>
 *
 * Protobuf type {@code protocol.rpc.CodeActionContext}
 */
public  final class CodeActionContext extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:protocol.rpc.CodeActionContext)
    CodeActionContextOrBuilder {
  // Use CodeActionContext.newBuilder() to construct.
  private CodeActionContext(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CodeActionContext() {
    diagnostics_ = java.util.Collections.emptyList();
    only_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private CodeActionContext(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              diagnostics_ = new java.util.ArrayList<protocol.Diagnostic>();
              mutable_bitField0_ |= 0x00000001;
            }
            diagnostics_.add(
                input.readMessage(protocol.Diagnostic.parser(), extensionRegistry));
            break;
          }
          case 16: {
            int rawValue = input.readEnum();
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              only_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000002;
            }
            only_.add(rawValue);
            break;
          }
          case 18: {
            int length = input.readRawVarint32();
            int oldLimit = input.pushLimit(length);
            while(input.getBytesUntilLimit() > 0) {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                only_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              only_.add(rawValue);
            }
            input.popLimit(oldLimit);
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        diagnostics_ = java.util.Collections.unmodifiableList(diagnostics_);
      }
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        only_ = java.util.Collections.unmodifiableList(only_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_CodeActionContext_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return protocol.rpc.RpcProto.internal_static_protocol_rpc_CodeActionContext_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            protocol.rpc.CodeActionContext.class, protocol.rpc.CodeActionContext.Builder.class);
  }

  public static final int DIAGNOSTICS_FIELD_NUMBER = 1;
  private java.util.List<protocol.Diagnostic> diagnostics_;
  /**
   * <pre>
   * An array of diagnostics known on the client side overlapping the range provided to the
   * `textDocument/codeAction` request. They are provided so that the server knows which
   * errors are currently presented to the user for the given range. There is no guarantee
   * that these accurately reflect the error state of the resource. The primary parameter
   * to compute code actions is the provided range.
   * </pre>
   *
   * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public java.util.List<protocol.Diagnostic> getDiagnosticsList() {
    return diagnostics_;
  }
  /**
   * <pre>
   * An array of diagnostics known on the client side overlapping the range provided to the
   * `textDocument/codeAction` request. They are provided so that the server knows which
   * errors are currently presented to the user for the given range. There is no guarantee
   * that these accurately reflect the error state of the resource. The primary parameter
   * to compute code actions is the provided range.
   * </pre>
   *
   * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public java.util.List<? extends protocol.DiagnosticOrBuilder> 
      getDiagnosticsOrBuilderList() {
    return diagnostics_;
  }
  /**
   * <pre>
   * An array of diagnostics known on the client side overlapping the range provided to the
   * `textDocument/codeAction` request. They are provided so that the server knows which
   * errors are currently presented to the user for the given range. There is no guarantee
   * that these accurately reflect the error state of the resource. The primary parameter
   * to compute code actions is the provided range.
   * </pre>
   *
   * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public int getDiagnosticsCount() {
    return diagnostics_.size();
  }
  /**
   * <pre>
   * An array of diagnostics known on the client side overlapping the range provided to the
   * `textDocument/codeAction` request. They are provided so that the server knows which
   * errors are currently presented to the user for the given range. There is no guarantee
   * that these accurately reflect the error state of the resource. The primary parameter
   * to compute code actions is the provided range.
   * </pre>
   *
   * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public protocol.Diagnostic getDiagnostics(int index) {
    return diagnostics_.get(index);
  }
  /**
   * <pre>
   * An array of diagnostics known on the client side overlapping the range provided to the
   * `textDocument/codeAction` request. They are provided so that the server knows which
   * errors are currently presented to the user for the given range. There is no guarantee
   * that these accurately reflect the error state of the resource. The primary parameter
   * to compute code actions is the provided range.
   * </pre>
   *
   * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  public protocol.DiagnosticOrBuilder getDiagnosticsOrBuilder(
      int index) {
    return diagnostics_.get(index);
  }

  public static final int ONLY_FIELD_NUMBER = 2;
  private java.util.List<java.lang.Integer> only_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, protocol.rpc.CodeActionKind> only_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, protocol.rpc.CodeActionKind>() {
            public protocol.rpc.CodeActionKind convert(java.lang.Integer from) {
              protocol.rpc.CodeActionKind result = protocol.rpc.CodeActionKind.valueOf(from);
              return result == null ? protocol.rpc.CodeActionKind.UNRECOGNIZED : result;
            }
          };
  /**
   * <pre>
   * Requested kind of actions to return.
   * Actions not of this kind are filtered out by the client before being shown. So servers
   * can omit computing them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
   */
  public java.util.List<protocol.rpc.CodeActionKind> getOnlyList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, protocol.rpc.CodeActionKind>(only_, only_converter_);
  }
  /**
   * <pre>
   * Requested kind of actions to return.
   * Actions not of this kind are filtered out by the client before being shown. So servers
   * can omit computing them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
   */
  public int getOnlyCount() {
    return only_.size();
  }
  /**
   * <pre>
   * Requested kind of actions to return.
   * Actions not of this kind are filtered out by the client before being shown. So servers
   * can omit computing them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
   */
  public protocol.rpc.CodeActionKind getOnly(int index) {
    return only_converter_.convert(only_.get(index));
  }
  /**
   * <pre>
   * Requested kind of actions to return.
   * Actions not of this kind are filtered out by the client before being shown. So servers
   * can omit computing them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
   */
  public java.util.List<java.lang.Integer>
  getOnlyValueList() {
    return only_;
  }
  /**
   * <pre>
   * Requested kind of actions to return.
   * Actions not of this kind are filtered out by the client before being shown. So servers
   * can omit computing them.
   * </pre>
   *
   * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
   */
  public int getOnlyValue(int index) {
    return only_.get(index);
  }
  private int onlyMemoizedSerializedSize;

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    for (int i = 0; i < diagnostics_.size(); i++) {
      output.writeMessage(1, diagnostics_.get(i));
    }
    if (getOnlyList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(onlyMemoizedSerializedSize);
    }
    for (int i = 0; i < only_.size(); i++) {
      output.writeEnumNoTag(only_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < diagnostics_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, diagnostics_.get(i));
    }
    {
      int dataSize = 0;
      for (int i = 0; i < only_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(only_.get(i));
      }
      size += dataSize;
      if (!getOnlyList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }onlyMemoizedSerializedSize = dataSize;
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof protocol.rpc.CodeActionContext)) {
      return super.equals(obj);
    }
    protocol.rpc.CodeActionContext other = (protocol.rpc.CodeActionContext) obj;

    boolean result = true;
    result = result && getDiagnosticsList()
        .equals(other.getDiagnosticsList());
    result = result && only_.equals(other.only_);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getDiagnosticsCount() > 0) {
      hash = (37 * hash) + DIAGNOSTICS_FIELD_NUMBER;
      hash = (53 * hash) + getDiagnosticsList().hashCode();
    }
    if (getOnlyCount() > 0) {
      hash = (37 * hash) + ONLY_FIELD_NUMBER;
      hash = (53 * hash) + only_.hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static protocol.rpc.CodeActionContext parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.CodeActionContext parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.CodeActionContext parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static protocol.rpc.CodeActionContext parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static protocol.rpc.CodeActionContext parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.CodeActionContext parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.CodeActionContext parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static protocol.rpc.CodeActionContext parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static protocol.rpc.CodeActionContext parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static protocol.rpc.CodeActionContext parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(protocol.rpc.CodeActionContext prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * CodeActionContext contains additional diagnostic information about the context in which
   * a code action is run.
   * </pre>
   *
   * Protobuf type {@code protocol.rpc.CodeActionContext}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:protocol.rpc.CodeActionContext)
      protocol.rpc.CodeActionContextOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_CodeActionContext_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_CodeActionContext_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              protocol.rpc.CodeActionContext.class, protocol.rpc.CodeActionContext.Builder.class);
    }

    // Construct using protocol.rpc.CodeActionContext.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getDiagnosticsFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      if (diagnosticsBuilder_ == null) {
        diagnostics_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        diagnosticsBuilder_.clear();
      }
      only_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return protocol.rpc.RpcProto.internal_static_protocol_rpc_CodeActionContext_descriptor;
    }

    public protocol.rpc.CodeActionContext getDefaultInstanceForType() {
      return protocol.rpc.CodeActionContext.getDefaultInstance();
    }

    public protocol.rpc.CodeActionContext build() {
      protocol.rpc.CodeActionContext result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public protocol.rpc.CodeActionContext buildPartial() {
      protocol.rpc.CodeActionContext result = new protocol.rpc.CodeActionContext(this);
      int from_bitField0_ = bitField0_;
      if (diagnosticsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          diagnostics_ = java.util.Collections.unmodifiableList(diagnostics_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.diagnostics_ = diagnostics_;
      } else {
        result.diagnostics_ = diagnosticsBuilder_.build();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        only_ = java.util.Collections.unmodifiableList(only_);
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.only_ = only_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof protocol.rpc.CodeActionContext) {
        return mergeFrom((protocol.rpc.CodeActionContext)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(protocol.rpc.CodeActionContext other) {
      if (other == protocol.rpc.CodeActionContext.getDefaultInstance()) return this;
      if (diagnosticsBuilder_ == null) {
        if (!other.diagnostics_.isEmpty()) {
          if (diagnostics_.isEmpty()) {
            diagnostics_ = other.diagnostics_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDiagnosticsIsMutable();
            diagnostics_.addAll(other.diagnostics_);
          }
          onChanged();
        }
      } else {
        if (!other.diagnostics_.isEmpty()) {
          if (diagnosticsBuilder_.isEmpty()) {
            diagnosticsBuilder_.dispose();
            diagnosticsBuilder_ = null;
            diagnostics_ = other.diagnostics_;
            bitField0_ = (bitField0_ & ~0x00000001);
            diagnosticsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getDiagnosticsFieldBuilder() : null;
          } else {
            diagnosticsBuilder_.addAllMessages(other.diagnostics_);
          }
        }
      }
      if (!other.only_.isEmpty()) {
        if (only_.isEmpty()) {
          only_ = other.only_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureOnlyIsMutable();
          only_.addAll(other.only_);
        }
        onChanged();
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      protocol.rpc.CodeActionContext parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (protocol.rpc.CodeActionContext) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<protocol.Diagnostic> diagnostics_ =
      java.util.Collections.emptyList();
    private void ensureDiagnosticsIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        diagnostics_ = new java.util.ArrayList<protocol.Diagnostic>(diagnostics_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        protocol.Diagnostic, protocol.Diagnostic.Builder, protocol.DiagnosticOrBuilder> diagnosticsBuilder_;

    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<protocol.Diagnostic> getDiagnosticsList() {
      if (diagnosticsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(diagnostics_);
      } else {
        return diagnosticsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public int getDiagnosticsCount() {
      if (diagnosticsBuilder_ == null) {
        return diagnostics_.size();
      } else {
        return diagnosticsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.Diagnostic getDiagnostics(int index) {
      if (diagnosticsBuilder_ == null) {
        return diagnostics_.get(index);
      } else {
        return diagnosticsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setDiagnostics(
        int index, protocol.Diagnostic value) {
      if (diagnosticsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDiagnosticsIsMutable();
        diagnostics_.set(index, value);
        onChanged();
      } else {
        diagnosticsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setDiagnostics(
        int index, protocol.Diagnostic.Builder builderForValue) {
      if (diagnosticsBuilder_ == null) {
        ensureDiagnosticsIsMutable();
        diagnostics_.set(index, builderForValue.build());
        onChanged();
      } else {
        diagnosticsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addDiagnostics(protocol.Diagnostic value) {
      if (diagnosticsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDiagnosticsIsMutable();
        diagnostics_.add(value);
        onChanged();
      } else {
        diagnosticsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addDiagnostics(
        int index, protocol.Diagnostic value) {
      if (diagnosticsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDiagnosticsIsMutable();
        diagnostics_.add(index, value);
        onChanged();
      } else {
        diagnosticsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addDiagnostics(
        protocol.Diagnostic.Builder builderForValue) {
      if (diagnosticsBuilder_ == null) {
        ensureDiagnosticsIsMutable();
        diagnostics_.add(builderForValue.build());
        onChanged();
      } else {
        diagnosticsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addDiagnostics(
        int index, protocol.Diagnostic.Builder builderForValue) {
      if (diagnosticsBuilder_ == null) {
        ensureDiagnosticsIsMutable();
        diagnostics_.add(index, builderForValue.build());
        onChanged();
      } else {
        diagnosticsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addAllDiagnostics(
        java.lang.Iterable<? extends protocol.Diagnostic> values) {
      if (diagnosticsBuilder_ == null) {
        ensureDiagnosticsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, diagnostics_);
        onChanged();
      } else {
        diagnosticsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearDiagnostics() {
      if (diagnosticsBuilder_ == null) {
        diagnostics_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        diagnosticsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder removeDiagnostics(int index) {
      if (diagnosticsBuilder_ == null) {
        ensureDiagnosticsIsMutable();
        diagnostics_.remove(index);
        onChanged();
      } else {
        diagnosticsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.Diagnostic.Builder getDiagnosticsBuilder(
        int index) {
      return getDiagnosticsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.DiagnosticOrBuilder getDiagnosticsOrBuilder(
        int index) {
      if (diagnosticsBuilder_ == null) {
        return diagnostics_.get(index);  } else {
        return diagnosticsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<? extends protocol.DiagnosticOrBuilder> 
         getDiagnosticsOrBuilderList() {
      if (diagnosticsBuilder_ != null) {
        return diagnosticsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(diagnostics_);
      }
    }
    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.Diagnostic.Builder addDiagnosticsBuilder() {
      return getDiagnosticsFieldBuilder().addBuilder(
          protocol.Diagnostic.getDefaultInstance());
    }
    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public protocol.Diagnostic.Builder addDiagnosticsBuilder(
        int index) {
      return getDiagnosticsFieldBuilder().addBuilder(
          index, protocol.Diagnostic.getDefaultInstance());
    }
    /**
     * <pre>
     * An array of diagnostics known on the client side overlapping the range provided to the
     * `textDocument/codeAction` request. They are provided so that the server knows which
     * errors are currently presented to the user for the given range. There is no guarantee
     * that these accurately reflect the error state of the resource. The primary parameter
     * to compute code actions is the provided range.
     * </pre>
     *
     * <code>repeated .protocol.Diagnostic diagnostics = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<protocol.Diagnostic.Builder> 
         getDiagnosticsBuilderList() {
      return getDiagnosticsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        protocol.Diagnostic, protocol.Diagnostic.Builder, protocol.DiagnosticOrBuilder> 
        getDiagnosticsFieldBuilder() {
      if (diagnosticsBuilder_ == null) {
        diagnosticsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            protocol.Diagnostic, protocol.Diagnostic.Builder, protocol.DiagnosticOrBuilder>(
                diagnostics_,
                ((bitField0_ & 0x00000001) == 0x00000001),
                getParentForChildren(),
                isClean());
        diagnostics_ = null;
      }
      return diagnosticsBuilder_;
    }

    private java.util.List<java.lang.Integer> only_ =
      java.util.Collections.emptyList();
    private void ensureOnlyIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        only_ = new java.util.ArrayList<java.lang.Integer>(only_);
        bitField0_ |= 0x00000002;
      }
    }
    /**
     * <pre>
     * Requested kind of actions to return.
     * Actions not of this kind are filtered out by the client before being shown. So servers
     * can omit computing them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
     */
    public java.util.List<protocol.rpc.CodeActionKind> getOnlyList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, protocol.rpc.CodeActionKind>(only_, only_converter_);
    }
    /**
     * <pre>
     * Requested kind of actions to return.
     * Actions not of this kind are filtered out by the client before being shown. So servers
     * can omit computing them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
     */
    public int getOnlyCount() {
      return only_.size();
    }
    /**
     * <pre>
     * Requested kind of actions to return.
     * Actions not of this kind are filtered out by the client before being shown. So servers
     * can omit computing them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
     */
    public protocol.rpc.CodeActionKind getOnly(int index) {
      return only_converter_.convert(only_.get(index));
    }
    /**
     * <pre>
     * Requested kind of actions to return.
     * Actions not of this kind are filtered out by the client before being shown. So servers
     * can omit computing them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
     */
    public Builder setOnly(
        int index, protocol.rpc.CodeActionKind value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureOnlyIsMutable();
      only_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Requested kind of actions to return.
     * Actions not of this kind are filtered out by the client before being shown. So servers
     * can omit computing them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
     */
    public Builder addOnly(protocol.rpc.CodeActionKind value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureOnlyIsMutable();
      only_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Requested kind of actions to return.
     * Actions not of this kind are filtered out by the client before being shown. So servers
     * can omit computing them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
     */
    public Builder addAllOnly(
        java.lang.Iterable<? extends protocol.rpc.CodeActionKind> values) {
      ensureOnlyIsMutable();
      for (protocol.rpc.CodeActionKind value : values) {
        only_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Requested kind of actions to return.
     * Actions not of this kind are filtered out by the client before being shown. So servers
     * can omit computing them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
     */
    public Builder clearOnly() {
      only_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Requested kind of actions to return.
     * Actions not of this kind are filtered out by the client before being shown. So servers
     * can omit computing them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
     */
    public java.util.List<java.lang.Integer>
    getOnlyValueList() {
      return java.util.Collections.unmodifiableList(only_);
    }
    /**
     * <pre>
     * Requested kind of actions to return.
     * Actions not of this kind are filtered out by the client before being shown. So servers
     * can omit computing them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
     */
    public int getOnlyValue(int index) {
      return only_.get(index);
    }
    /**
     * <pre>
     * Requested kind of actions to return.
     * Actions not of this kind are filtered out by the client before being shown. So servers
     * can omit computing them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
     */
    public Builder setOnlyValue(
        int index, int value) {
      ensureOnlyIsMutable();
      only_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Requested kind of actions to return.
     * Actions not of this kind are filtered out by the client before being shown. So servers
     * can omit computing them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
     */
    public Builder addOnlyValue(int value) {
      ensureOnlyIsMutable();
      only_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Requested kind of actions to return.
     * Actions not of this kind are filtered out by the client before being shown. So servers
     * can omit computing them.
     * </pre>
     *
     * <code>repeated .protocol.rpc.CodeActionKind only = 2;</code>
     */
    public Builder addAllOnlyValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureOnlyIsMutable();
      for (int value : values) {
        only_.add(value);
      }
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:protocol.rpc.CodeActionContext)
  }

  // @@protoc_insertion_point(class_scope:protocol.rpc.CodeActionContext)
  private static final protocol.rpc.CodeActionContext DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new protocol.rpc.CodeActionContext();
  }

  public static protocol.rpc.CodeActionContext getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CodeActionContext>
      PARSER = new com.google.protobuf.AbstractParser<CodeActionContext>() {
    public CodeActionContext parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new CodeActionContext(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CodeActionContext> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CodeActionContext> getParserForType() {
    return PARSER;
  }

  public protocol.rpc.CodeActionContext getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

